/* Bubble sort code: */
 
dcl v array[0:100] int;
dcl n, c, d, swap int;
print("Enter number of elements: ");
read(n);
print("Enter ", n, " integers\n");
do
  for c = 0 to n-1;
    read(v[c]);
od;
do
  for c = 0 to n-2;
    do
      for d = 0 to n-c-2;
        // For decreasing order use "<"    
        if v[d] > v[d+1] then
          swap   = v[d];
          v[d]   = v[d+1];
          v[d+1] = swap;
        fi;
    od;
od;
print("Sorted list in ascending order:\n");
do
  for c = 0 to n-1;
    print(v[c], " ");
od;


/*
'''
Scope level for Program : 0
  variables & their offsets
  n : 101
  d : 103
  c : 102
  v : 0
  swap : 104
 '''

["Enter number of elements: ", "Enter ", " integers\n", "Sorted list in ascending order:\n", " ", ]
[
  ('stp'),
  ('alc', 105),
  ('prc', 0),
  ('rdv'),
  ('stv', 0, 101),
  ('prc', 1),
  ('ldv', 0, 101),
  ('prv'),
  ('prc', 2),
  ('ldc', 0),
  ('stv', 0, 102),
  ('lbl', 1),
  ('ldr', 0, 0),
  ('ldv', 0, 102),
  ('ldc', 0),
  ('sub'),
  ('idx', 1),
  ('rdv'),
  ('smv', 1),
  ('ldv', 0, 102),
  ('ldc', 1),
  ('add'),
  ('stv', 0, 102),
  ('ldv', 0, 102),
  ('ldv', 0, 101),
  ('ldc', 1),
  ('sub'),
  ('leq'),
  ('jof', 2),
  ('jmp', 1),
  ('lbl', 2),
  ('ldc', 0),
  ('stv', 0, 102),
  ('lbl', 3),
  ('ldc', 0),
  ('stv', 0, 103),
  ('lbl', 5),
  ('ldr', 0, 0), ------ ldv
  ('ldv', 0, 103),
  ('ldc', 0),
  ('sub'),
  ('idx', 1),
  ('grc'),
  ('ldr', 0, 0),   ---- ldv
  ('ldv', 0, 103),
  ('ldc', 1),
  ('add'),
  ('ldc', 0),
  ('sub'),
  ('idx', 1),
  ('grc'),
  ('grt'),
  ('jof', 7),
  ('ldr', 0, 0),
  ('ldv', 0, 103),
  ('ldc', 0),
  ('sub'),
  ('idx', 1),
  ('grc'),
  ('stv', 0, 104),


  
  ('ldr', 0, 0),
  ('ldv', 0, 103),
  ('ldc', 0),
  ('sub'),
  ('idx', 1),
  ('ldr', 0, 0),
  ('ldv', 0, 103),
  ('ldc', 1),
  ('add'),
  ('ldc', 0),
  ('sub'),
  ('idx', 1),
  ('grc'),
  ('smv', 1),
  ('ldr', 0, 0),
  ('ldv', 0, 103),
  ('ldc', 1),
  ('add'),
  ('ldc', 0),
  ('sub'),
  ('idx', 1),
  ('ldv', 0, 104),
  ('smv', 1),
  ('lbl', 7),
  ('ldv', 0, 103),
  ('ldc', 1),
  ('add'),
  ('stv', 0, 103),
  ('ldv', 0, 103),
  ('ldv', 0, 101),
  ('ldv', 0, 102),
  ('sub'),
  ('ldc', 2),
  ('sub'),
  ('leq'),
  ('jof', 6),
  ('jmp', 5),
  ('lbl', 6),
  ('ldv', 0, 102),
  ('ldc', 1),
  ('add'),
  ('stv', 0, 102),
  ('ldv', 0, 102),
  ('ldv', 0, 101),
  ('ldc', 2),
  ('sub'),
  ('leq'),
  ('jof', 4),
  ('jmp', 3),
  ('lbl', 4),
  ('prc', 3),
  ('ldc', 0),
  ('stv', 0, 102),
  ('lbl', 8),
  ('ldr', 0, 0),
  ('ldv', 0, 102),
  ('ldc', 0),
  ('sub'),
  ('idx', 1),
  ('grc'),
  ('prv'),
  ('prc', 4),
  ('ldv', 0, 102),
  ('ldc', 1),
  ('add'),
  ('stv', 0, 102),
  ('ldv', 0, 102),
  ('ldv', 0, 101),
  ('ldc', 1),
  ('sub'),
  ('leq'),
  ('jof', 9),
  ('jmp', 8),
  ('lbl', 9),
  ('dlc', 105),
  ('end'),
]

*/