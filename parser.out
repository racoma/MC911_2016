Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    ACC
    DIVEQUAL
    USCORE
    MODEQUAL
    RBRACE
    PLUSEQUAL
    LBRACE
    INT
    MINUSEQUAL
    CONCATEQUAL
    TIMESEQUAL

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMI
Rule 10    declaration_list -> declaration
Rule 11    declaration_list -> declaration_list COMMA declaration
Rule 12    declaration -> identifier_list mode initialization
Rule 13    declaration -> identifier_list mode
Rule 14    initialization -> ASSIGN expression
Rule 15    identifier_list -> identifier
Rule 16    identifier_list -> identifier_list COMMA identifier
Rule 17    identifier -> ID
Rule 18    synonym_statement -> SYN synonym_list SEMI
Rule 19    synonym_list -> synonym_definition
Rule 20    synonym_list -> synonym_list COMMA synonym_definition
Rule 21    synonym_definition -> identifier_list mode ASSIGN constant_expression
Rule 22    synonym_definition -> identifier_list ASSIGN constant_expression
Rule 23    constant_expression -> expression
Rule 24    newmode_statement -> TYPE newmode_list
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> newmode_list COMMA mode_definition
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    mode -> mode_name
Rule 29    mode -> discrete_mode
Rule 30    mode -> reference_mode
Rule 31    mode -> composite_mode
Rule 32    discrete_mode -> integer_mode
Rule 33    discrete_mode -> boolean_mode
Rule 34    discrete_mode -> character_mode
Rule 35    discrete_mode -> discrete_range_mode
Rule 36    integer_mode -> ICONST
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    mode_name -> identifier
Rule 42    discrete_mode_name -> identifier
Rule 43    literal_range -> lower_bound COLON upper_bound
Rule 44    lower_bound -> integer_literal
Rule 45    upper_bound -> integer_literal
Rule 46    reference_mode -> REF mode
Rule 47    composite_mode -> string_mode
Rule 48    composite_mode -> array_mode
Rule 49    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 50    string_length -> integer_literal
Rule 51    array_mode -> ARRAY LBRACKET index_mode RBRACKET
Rule 52    array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET
Rule 53    index_mode_list -> index_mode
Rule 54    index_mode_list -> index_mode_list COMMA index_mode
Rule 55    index_mode -> discrete_mode
Rule 56    index_mode -> literal_range
Rule 57    element_mode -> mode
Rule 58    location -> identifier
Rule 59    location -> dereferenced_reference
Rule 60    location -> string_element
Rule 61    location -> string_slice
Rule 62    location -> array_element
Rule 63    location -> array_slice
Rule 64    location -> call_action
Rule 65    dereferenced_reference -> location ARROW
Rule 66    string_element -> string_location LBRACKET start_element COLON right_element RBRACKET
Rule 67    start_element -> ICONST
Rule 68    string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET
Rule 69    string_location -> identifier
Rule 70    left_element -> ICONST
Rule 71    right_element -> ICONST
Rule 72    array_element -> string_location LBRACKET expression_list RBRACKET
Rule 73    expression_list -> expression
Rule 74    expression_list -> expression_list COMMA expression
Rule 75    array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET
Rule 76    array_location -> location
Rule 77    lower_element -> expression
Rule 78    upper_element -> expression
Rule 79    primitive_value -> literal
Rule 80    primitive_value -> value_array_element
Rule 81    primitive_value -> value_array_slice
Rule 82    primitive_value -> parenthesized_expression
Rule 83    literal -> integer_literal
Rule 84    literal -> boolean_literal
Rule 85    literal -> character_literal
Rule 86    literal -> empty_literal
Rule 87    literal -> character_string_literal
Rule 88    integer_literal -> ICONST
Rule 89    boolean_literal -> FALSE
Rule 90    boolean_literal -> TRUE
Rule 91    character_literal -> CCONST
Rule 92    empty_literal -> NULL
Rule 93    character_string_literal -> SCONST
Rule 94    value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET
Rule 95    value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET
Rule 96    array_primitive_value -> primitive_value
Rule 97    parenthesized_expression -> LPAREN expression RPAREN
Rule 98    expression -> operand0
Rule 99    expression -> conditional_expression
Rule 100   conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 101   conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 102   boolean_expression -> expression
Rule 103   then_expression -> THEN expression
Rule 104   else_expression -> ELSE expression
Rule 105   elsif_expression -> ELSIF boolean_expression then_expression
Rule 106   elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 107   operand0 -> operand1
Rule 108   operand0 -> operand0 operator1 operand1
Rule 109   operator1 -> relational_operator
Rule 110   operator1 -> membership_operator
Rule 111   relational_operator -> AND
Rule 112   relational_operator -> OR
Rule 113   relational_operator -> EQ
Rule 114   relational_operator -> NEQ
Rule 115   relational_operator -> GT
Rule 116   relational_operator -> GE
Rule 117   relational_operator -> LT
Rule 118   relational_operator -> LE
Rule 119   membership_operator -> IN
Rule 120   operand1 -> operand2
Rule 121   operand1 -> operand1 operator2 operand2
Rule 122   operator2 -> arithmetic_additive_operator
Rule 123   operator2 -> string_concatenation_operator
Rule 124   arithmetic_additive_operator -> PLUS
Rule 125   arithmetic_additive_operator -> MINUS
Rule 126   string_concatenation_operator -> CONCAT
Rule 127   operand2 -> operand3
Rule 128   operand2 -> operand2 arithmetic_multiplicative_operator operand3
Rule 129   arithmetic_multiplicative_operator -> TIMES
Rule 130   arithmetic_multiplicative_operator -> DIVIDE
Rule 131   arithmetic_multiplicative_operator -> MOD
Rule 132   operand3 -> monadic_operator operand4
Rule 133   operand3 -> integer_literal
Rule 134   monadic_operator -> MINUS
Rule 135   monadic_operator -> NOT
Rule 136   operand4 -> location
Rule 137   operand4 -> referenced_location
Rule 138   operand4 -> primitive_value
Rule 139   referenced_location -> ARROW location
Rule 140   action_statement -> label_id COLON action SEMI
Rule 141   action_statement -> action SEMI
Rule 142   label_id -> identifier
Rule 143   action -> bracketed_action
Rule 144   action -> assignment_action
Rule 145   action -> call_action
Rule 146   action -> exit_action
Rule 147   action -> return_action
Rule 148   action -> result_action
Rule 149   bracketed_action -> if_action
Rule 150   bracketed_action -> do_action
Rule 151   assignment_action -> location assigning_operator expression
Rule 152   assigning_operator -> closed_dyadic_operator assignment_symbol
Rule 153   assigning_operator -> assignment_symbol
Rule 154   closed_dyadic_operator -> arithmetic_additive_operator
Rule 155   closed_dyadic_operator -> arithmetic_multiplicative_operator
Rule 156   closed_dyadic_operator -> string_concatenation_operator
Rule 157   assignment_symbol -> ASSIGN
Rule 158   if_action -> IF boolean_expression then_clause else_clause FI
Rule 159   if_action -> IF boolean_expression then_clause FI
Rule 160   then_clause -> THEN action_statement_list
Rule 161   else_clause -> ELSE action_statement_list
Rule 162   else_clause -> ELSIF boolean_expression then_clause else_clause
Rule 163   else_clause -> ELSIF boolean_expression then_clause
Rule 164   do_action -> DO control_part SEMI action_statement_list OD
Rule 165   do_action -> DO action_statement_list OD
Rule 166   control_part -> for_control while_control
Rule 167   control_part -> while_control
Rule 168   for_control -> FOR iteration
Rule 169   iteration -> step_enumeration
Rule 170   iteration -> range_enumeration
Rule 171   step_enumeration -> loop_counter ASSIGN start_value step_value DOWN end_value
Rule 172   step_enumeration -> loop_counter ASSIGN start_value DOWN end_value
Rule 173   step_enumeration -> loop_counter ASSIGN start_value step_value end_value
Rule 174   step_enumeration -> loop_counter ASSIGN start_value end_value
Rule 175   loop_counter -> identifier
Rule 176   start_value -> discrete_expression
Rule 177   step_value -> BY ICONST
Rule 178   end_value -> TO discrete_expression
Rule 179   discrete_expression -> expression
Rule 180   range_enumeration -> loop_counter DOWN IN discrete_mode_name
Rule 181   range_enumeration -> loop_counter IN discrete_mode_name
Rule 182   while_control -> WHILE boolean_expression
Rule 183   call_action -> procedure_call
Rule 184   call_action -> builtin_call
Rule 185   procedure_call -> procedure_name LPAREN parameter_list RPAREN
Rule 186   procedure_call -> procedure_name LPAREN RPAREN
Rule 187   parameter_list -> parameter
Rule 188   parameter_list -> parameter_list COMMA parameter
Rule 189   parameter -> expression
Rule 190   procedure_name -> identifier
Rule 191   exit_action -> EXIT label_id
Rule 192   return_action -> RETURN result
Rule 193   return_action -> RETURN
Rule 194   result_action -> RESULT result
Rule 195   result -> expression
Rule 196   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 197   builtin_call -> builtin_name LPAREN RPAREN
Rule 198   builtin_name -> NUM
Rule 199   builtin_name -> PRED
Rule 200   builtin_name -> SUCC
Rule 201   builtin_name -> UPPER
Rule 202   builtin_name -> LOWER
Rule 203   builtin_name -> LENGTH
Rule 204   builtin_name -> READ
Rule 205   builtin_name -> PRINT
Rule 206   procedure_statement -> label_id COLON procedure_definition SEMI
Rule 207   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement action_statement_list END
Rule 208   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement END
Rule 209   procedure_definition -> PROC LPAREN RPAREN SEMI action_statement action_statement_list END
Rule 210   procedure_definition -> PROC LPAREN RPAREN SEMI action_statement END
Rule 211   action_statement_list -> action_statement
Rule 212   action_statement_list -> action_statement_list COMMA action_statement
Rule 213   formal_parameter_list -> formal_parameter
Rule 214   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 215   formal_parameter -> identifier_list parameter_spec
Rule 216   parameter_spec -> mode attribute
Rule 217   parameter_spec -> mode
Rule 218   result_spec -> RETURNS LPAREN mode attribute RPAREN
Rule 219   result_spec -> RETURNS LPAREN mode RPAREN
Rule 220   attribute -> LOC

Terminals, with rules where they appear

ACC                  : 
AND                  : 111
ARRAY                : 51 52
ARROW                : 65 139
ASSIGN               : 14 21 22 27 157 171 172 173 174
BOOL                 : 37
BY                   : 177
CCONST               : 91
CHAR                 : 38
CHARS                : 49
COLON                : 43 66 68 75 95 140 206
COMMA                : 11 16 20 26 52 54 74 188 212 214
CONCAT               : 126
CONCATEQUAL          : 
DCL                  : 9
DIVEQUAL             : 
DIVIDE               : 130
DO                   : 164 165
DOWN                 : 171 172 180
ELSE                 : 104 161
ELSIF                : 105 106 162 163
END                  : 207 208 209 210
EQ                   : 113
EXIT                 : 191
FALSE                : 89
FI                   : 100 101 158 159
FOR                  : 168
GE                   : 116
GT                   : 115
ICONST               : 36 67 70 71 88 177
ID                   : 17
IF                   : 100 101 158 159
IN                   : 119 180 181
INT                  : 
LBRACE               : 
LBRACKET             : 49 51 52 66 68 72 75 94 95
LE                   : 118
LENGTH               : 203
LOC                  : 220
LOWER                : 202
LPAREN               : 39 40 97 185 186 196 197 207 208 209 210 218 219
LT                   : 117
MINUS                : 125 134
MINUSEQUAL           : 
MOD                  : 131
MODEQUAL             : 
NEQ                  : 114
NOT                  : 135
NULL                 : 92
NUM                  : 198
OD                   : 164 165
OR                   : 112
PLUS                 : 124
PLUSEQUAL            : 
PRED                 : 199
PRINT                : 205
PROC                 : 207 208 209 210
RBRACE               : 
RBRACKET             : 49 51 52 66 68 72 75 94 95
READ                 : 204
REF                  : 46
RESULT               : 194
RETURN               : 192 193
RETURNS              : 218 219
RPAREN               : 39 40 97 185 186 196 197 207 208 209 210 218 219
SCONST               : 93
SEMI                 : 9 18 140 141 164 206 207 208 209 210
SUCC                 : 200
SYN                  : 18
THEN                 : 103 160
TIMES                : 129
TIMESEQUAL           : 
TO                   : 178
TRUE                 : 90
TYPE                 : 24
UPPER                : 201
USCORE               : 
WHILE                : 182
error                : 

Nonterminals, with rules where they appear

action               : 140 141
action_statement     : 8 207 208 209 210 211 212
action_statement_list : 160 161 164 165 207 209 212
arithmetic_additive_operator : 122 154
arithmetic_multiplicative_operator : 128 155
array_element        : 62
array_location       : 75
array_mode           : 48
array_primitive_value : 94 95
array_slice          : 63
assigning_operator   : 151
assignment_action    : 144
assignment_symbol    : 152 153
attribute            : 216 218
boolean_expression   : 100 101 105 106 158 159 162 163 182
boolean_literal      : 84
boolean_mode         : 33
bracketed_action     : 143
builtin_call         : 184
builtin_name         : 196 197
call_action          : 64 145
character_literal    : 85
character_mode       : 34
character_string_literal : 87
closed_dyadic_operator : 152
composite_mode       : 31
conditional_expression : 99
constant_expression  : 21 22
control_part         : 164
declaration          : 10 11
declaration_list     : 9 11
declaration_statement : 4
dereferenced_reference : 59
discrete_expression  : 176 178
discrete_mode        : 29 40 55
discrete_mode_name   : 39 180 181
discrete_range_mode  : 35
do_action            : 150
element_mode         : 
else_clause          : 158 162
else_expression      : 100 101
elsif_expression     : 101 106
empty_literal        : 86
end_value            : 171 172 173 174
exit_action          : 146
expression           : 14 23 73 74 77 78 97 102 103 104 151 179 189 195
expression_list      : 72 74 94
for_control          : 166
formal_parameter     : 213 214
formal_parameter_list : 207 208 214
identifier           : 15 16 41 42 58 69 142 175 190
identifier_list      : 12 13 16 21 22 27 215
if_action            : 149
index_mode           : 51 52 53 54
index_mode_list      : 52 54
initialization       : 12
integer_literal      : 44 45 50 83 133
integer_mode         : 32
iteration            : 168
label_id             : 140 191 206
left_element         : 68
literal              : 79
literal_range        : 39 40 56
location             : 65 76 136 139 151
loop_counter         : 171 172 173 174 180 181
lower_bound          : 43
lower_element        : 75 95
membership_operator  : 110
mode                 : 12 13 21 27 46 57 216 217 218 219
mode_definition      : 25 26
mode_name            : 28
monadic_operator     : 132
newmode_list         : 24 26
newmode_statement    : 6
operand0             : 98 108
operand1             : 107 108 121
operand2             : 120 121 128
operand3             : 127 128
operand4             : 132
operator1            : 108
operator2            : 121
parameter            : 187 188
parameter_list       : 185 188 196
parameter_spec       : 215
parenthesized_expression : 82
primitive_value      : 96 138
procedure_call       : 183
procedure_definition : 206
procedure_name       : 185 186
procedure_statement  : 7
program              : 0
range_enumeration    : 170
reference_mode       : 30
referenced_location  : 137
relational_operator  : 109
result               : 192 194
result_action        : 148
result_spec          : 207 208
return_action        : 147
right_element        : 66 68
start_element        : 66
start_value          : 171 172 173 174
statement            : 2 3
statement_list       : 1 3
step_enumeration     : 169
step_value           : 171 173
string_concatenation_operator : 123 156
string_element       : 60
string_length        : 49
string_location      : 66 68 72
string_mode          : 47
string_slice         : 61
synonym_definition   : 19 20
synonym_list         : 18 20
synonym_statement    : 5
then_clause          : 158 159 162 163
then_expression      : 100 101 105 106
upper_bound          : 43
upper_element        : 75 95
value_array_element  : 80
value_array_slice    : 81
while_control        : 166 167

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list
    (206) procedure_statement -> . label_id COLON procedure_definition SEMI
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    DCL             shift and go to state 17
    SYN             shift and go to state 41
    TYPE            shift and go to state 40
    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    synonym_statement              shift and go to state 5
    string_location                shift and go to state 6
    result_action                  shift and go to state 8
    return_action                  shift and go to state 12
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    procedure_statement            shift and go to state 20
    label_id                       shift and go to state 22
    program                        shift and go to state 23
    location                       shift and go to state 24
    call_action                    shift and go to state 31
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    statement                      shift and go to state 25
    statement_list                 shift and go to state 32
    exit_action                    shift and go to state 34
    newmode_statement              shift and go to state 35
    dereferenced_reference         shift and go to state 39
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    declaration_statement          shift and go to state 43
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    identifier                     shift and go to state 47
    action_statement               shift and go to state 48

state 1

    (144) action -> assignment_action .

    SEMI            reduce using rule 144 (action -> assignment_action .)


state 2

    (192) return_action -> RETURN . result
    (193) return_action -> RETURN .
    (195) result -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    SEMI            reduce using rule 193 (return_action -> RETURN .)
    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    result                         shift and go to state 49
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 61
    integer_literal                shift and go to state 57

state 3

    (143) action -> bracketed_action .

    SEMI            reduce using rule 143 (action -> bracketed_action .)


state 4

    (164) do_action -> DO . control_part SEMI action_statement_list OD
    (165) do_action -> DO . action_statement_list OD
    (166) control_part -> . for_control while_control
    (167) control_part -> . while_control
    (211) action_statement_list -> . action_statement
    (212) action_statement_list -> . action_statement_list COMMA action_statement
    (168) for_control -> . FOR iteration
    (182) while_control -> . WHILE boolean_expression
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    FOR             shift and go to state 67
    WHILE           shift and go to state 62
    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    action_statement_list          shift and go to state 63
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    control_part                   shift and go to state 64
    while_control                  shift and go to state 68
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    call_action                    shift and go to state 31
    for_control                    shift and go to state 65
    dereferenced_reference         shift and go to state 39
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47
    action_statement               shift and go to state 69

state 5

    (5) statement -> synonym_statement .

    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    RETURN          reduce using rule 5 (statement -> synonym_statement .)
    RESULT          reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    DO              reduce using rule 5 (statement -> synonym_statement .)
    NUM             reduce using rule 5 (statement -> synonym_statement .)
    PRED            reduce using rule 5 (statement -> synonym_statement .)
    SUCC            reduce using rule 5 (statement -> synonym_statement .)
    UPPER           reduce using rule 5 (statement -> synonym_statement .)
    LOWER           reduce using rule 5 (statement -> synonym_statement .)
    LENGTH          reduce using rule 5 (statement -> synonym_statement .)
    READ            reduce using rule 5 (statement -> synonym_statement .)
    PRINT           reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)


state 6

    (66) string_element -> string_location . LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> string_location . LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> string_location . LBRACKET expression_list RBRACKET

    LBRACKET        shift and go to state 70


state 7

    (62) location -> array_element .

    ARROW           reduce using rule 62 (location -> array_element .)
    ASSIGN          reduce using rule 62 (location -> array_element .)
    PLUS            reduce using rule 62 (location -> array_element .)
    MINUS           reduce using rule 62 (location -> array_element .)
    TIMES           reduce using rule 62 (location -> array_element .)
    DIVIDE          reduce using rule 62 (location -> array_element .)
    MOD             reduce using rule 62 (location -> array_element .)
    CONCAT          reduce using rule 62 (location -> array_element .)
    LBRACKET        reduce using rule 62 (location -> array_element .)
    AND             reduce using rule 62 (location -> array_element .)
    OR              reduce using rule 62 (location -> array_element .)
    EQ              reduce using rule 62 (location -> array_element .)
    NEQ             reduce using rule 62 (location -> array_element .)
    GT              reduce using rule 62 (location -> array_element .)
    GE              reduce using rule 62 (location -> array_element .)
    LT              reduce using rule 62 (location -> array_element .)
    LE              reduce using rule 62 (location -> array_element .)
    IN              reduce using rule 62 (location -> array_element .)
    SEMI            reduce using rule 62 (location -> array_element .)
    THEN            reduce using rule 62 (location -> array_element .)
    RBRACKET        reduce using rule 62 (location -> array_element .)
    COMMA           reduce using rule 62 (location -> array_element .)
    RPAREN          reduce using rule 62 (location -> array_element .)
    COLON           reduce using rule 62 (location -> array_element .)
    ELSE            reduce using rule 62 (location -> array_element .)
    ELSIF           reduce using rule 62 (location -> array_element .)
    DOWN            reduce using rule 62 (location -> array_element .)
    BY              reduce using rule 62 (location -> array_element .)
    TO              reduce using rule 62 (location -> array_element .)
    FI              reduce using rule 62 (location -> array_element .)
    WHILE           reduce using rule 62 (location -> array_element .)


state 8

    (148) action -> result_action .

    SEMI            reduce using rule 148 (action -> result_action .)


state 9

    (196) builtin_call -> builtin_name . LPAREN parameter_list RPAREN
    (197) builtin_call -> builtin_name . LPAREN RPAREN

    LPAREN          shift and go to state 71


state 10

    (199) builtin_name -> PRED .

    LPAREN          reduce using rule 199 (builtin_name -> PRED .)


state 11

    (200) builtin_name -> SUCC .

    LPAREN          reduce using rule 200 (builtin_name -> SUCC .)


state 12

    (147) action -> return_action .

    SEMI            reduce using rule 147 (action -> return_action .)


state 13

    (183) call_action -> procedure_call .

    SEMI            reduce using rule 183 (call_action -> procedure_call .)
    ARROW           reduce using rule 183 (call_action -> procedure_call .)
    ASSIGN          reduce using rule 183 (call_action -> procedure_call .)
    PLUS            reduce using rule 183 (call_action -> procedure_call .)
    MINUS           reduce using rule 183 (call_action -> procedure_call .)
    TIMES           reduce using rule 183 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 183 (call_action -> procedure_call .)
    MOD             reduce using rule 183 (call_action -> procedure_call .)
    CONCAT          reduce using rule 183 (call_action -> procedure_call .)
    LBRACKET        reduce using rule 183 (call_action -> procedure_call .)
    AND             reduce using rule 183 (call_action -> procedure_call .)
    OR              reduce using rule 183 (call_action -> procedure_call .)
    EQ              reduce using rule 183 (call_action -> procedure_call .)
    NEQ             reduce using rule 183 (call_action -> procedure_call .)
    GT              reduce using rule 183 (call_action -> procedure_call .)
    GE              reduce using rule 183 (call_action -> procedure_call .)
    LT              reduce using rule 183 (call_action -> procedure_call .)
    LE              reduce using rule 183 (call_action -> procedure_call .)
    IN              reduce using rule 183 (call_action -> procedure_call .)
    THEN            reduce using rule 183 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 183 (call_action -> procedure_call .)
    COMMA           reduce using rule 183 (call_action -> procedure_call .)
    RPAREN          reduce using rule 183 (call_action -> procedure_call .)
    COLON           reduce using rule 183 (call_action -> procedure_call .)
    ELSE            reduce using rule 183 (call_action -> procedure_call .)
    ELSIF           reduce using rule 183 (call_action -> procedure_call .)
    DOWN            reduce using rule 183 (call_action -> procedure_call .)
    BY              reduce using rule 183 (call_action -> procedure_call .)
    TO              reduce using rule 183 (call_action -> procedure_call .)
    FI              reduce using rule 183 (call_action -> procedure_call .)
    WHILE           reduce using rule 183 (call_action -> procedure_call .)


state 14

    (150) bracketed_action -> do_action .

    SEMI            reduce using rule 150 (bracketed_action -> do_action .)


state 15

    (149) bracketed_action -> if_action .

    SEMI            reduce using rule 149 (bracketed_action -> if_action .)


state 16

    (60) location -> string_element .

    ARROW           reduce using rule 60 (location -> string_element .)
    ASSIGN          reduce using rule 60 (location -> string_element .)
    PLUS            reduce using rule 60 (location -> string_element .)
    MINUS           reduce using rule 60 (location -> string_element .)
    TIMES           reduce using rule 60 (location -> string_element .)
    DIVIDE          reduce using rule 60 (location -> string_element .)
    MOD             reduce using rule 60 (location -> string_element .)
    CONCAT          reduce using rule 60 (location -> string_element .)
    LBRACKET        reduce using rule 60 (location -> string_element .)
    AND             reduce using rule 60 (location -> string_element .)
    OR              reduce using rule 60 (location -> string_element .)
    EQ              reduce using rule 60 (location -> string_element .)
    NEQ             reduce using rule 60 (location -> string_element .)
    GT              reduce using rule 60 (location -> string_element .)
    GE              reduce using rule 60 (location -> string_element .)
    LT              reduce using rule 60 (location -> string_element .)
    LE              reduce using rule 60 (location -> string_element .)
    IN              reduce using rule 60 (location -> string_element .)
    SEMI            reduce using rule 60 (location -> string_element .)
    THEN            reduce using rule 60 (location -> string_element .)
    RBRACKET        reduce using rule 60 (location -> string_element .)
    COMMA           reduce using rule 60 (location -> string_element .)
    RPAREN          reduce using rule 60 (location -> string_element .)
    COLON           reduce using rule 60 (location -> string_element .)
    ELSE            reduce using rule 60 (location -> string_element .)
    ELSIF           reduce using rule 60 (location -> string_element .)
    DOWN            reduce using rule 60 (location -> string_element .)
    BY              reduce using rule 60 (location -> string_element .)
    TO              reduce using rule 60 (location -> string_element .)
    FI              reduce using rule 60 (location -> string_element .)
    WHILE           reduce using rule 60 (location -> string_element .)


state 17

    (9) declaration_statement -> DCL . declaration_list SEMI
    (10) declaration_list -> . declaration
    (11) declaration_list -> . declaration_list COMMA declaration
    (12) declaration -> . identifier_list mode initialization
    (13) declaration -> . identifier_list mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    identifier_list                shift and go to state 75
    declaration_list               shift and go to state 73
    declaration                    shift and go to state 74
    identifier                     shift and go to state 72

state 18

    (202) builtin_name -> LOWER .

    LPAREN          reduce using rule 202 (builtin_name -> LOWER .)


state 19

    (203) builtin_name -> LENGTH .

    LPAREN          reduce using rule 203 (builtin_name -> LENGTH .)


state 20

    (7) statement -> procedure_statement .

    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    RETURN          reduce using rule 7 (statement -> procedure_statement .)
    RESULT          reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    DO              reduce using rule 7 (statement -> procedure_statement .)
    NUM             reduce using rule 7 (statement -> procedure_statement .)
    PRED            reduce using rule 7 (statement -> procedure_statement .)
    SUCC            reduce using rule 7 (statement -> procedure_statement .)
    UPPER           reduce using rule 7 (statement -> procedure_statement .)
    LOWER           reduce using rule 7 (statement -> procedure_statement .)
    LENGTH          reduce using rule 7 (statement -> procedure_statement .)
    READ            reduce using rule 7 (statement -> procedure_statement .)
    PRINT           reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)


state 21

    (204) builtin_name -> READ .

    LPAREN          reduce using rule 204 (builtin_name -> READ .)


state 22

    (206) procedure_statement -> label_id . COLON procedure_definition SEMI
    (140) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 76


state 23

    (0) S' -> program .



state 24

    (151) assignment_action -> location . assigning_operator expression
    (65) dereferenced_reference -> location . ARROW
    (76) array_location -> location .
    (152) assigning_operator -> . closed_dyadic_operator assignment_symbol
    (153) assigning_operator -> . assignment_symbol
    (154) closed_dyadic_operator -> . arithmetic_additive_operator
    (155) closed_dyadic_operator -> . arithmetic_multiplicative_operator
    (156) closed_dyadic_operator -> . string_concatenation_operator
    (157) assignment_symbol -> . ASSIGN
    (124) arithmetic_additive_operator -> . PLUS
    (125) arithmetic_additive_operator -> . MINUS
    (129) arithmetic_multiplicative_operator -> . TIMES
    (130) arithmetic_multiplicative_operator -> . DIVIDE
    (131) arithmetic_multiplicative_operator -> . MOD
    (126) string_concatenation_operator -> . CONCAT

    ARROW           shift and go to state 86
    LBRACKET        reduce using rule 76 (array_location -> location .)
    ASSIGN          shift and go to state 88
    PLUS            shift and go to state 85
    MINUS           shift and go to state 84
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 78
    MOD             shift and go to state 90
    CONCAT          shift and go to state 79

    arithmetic_additive_operator   shift and go to state 83
    assignment_symbol              shift and go to state 80
    string_concatenation_operator  shift and go to state 81
    arithmetic_multiplicative_operator shift and go to state 82
    assigning_operator             shift and go to state 77
    closed_dyadic_operator         shift and go to state 89

state 25

    (2) statement_list -> statement .

    DCL             reduce using rule 2 (statement_list -> statement .)
    SYN             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    EXIT            reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    RESULT          reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    NUM             reduce using rule 2 (statement_list -> statement .)
    PRED            reduce using rule 2 (statement_list -> statement .)
    SUCC            reduce using rule 2 (statement_list -> statement .)
    UPPER           reduce using rule 2 (statement_list -> statement .)
    LOWER           reduce using rule 2 (statement_list -> statement .)
    LENGTH          reduce using rule 2 (statement_list -> statement .)
    READ            reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 26

    (205) builtin_name -> PRINT .

    LPAREN          reduce using rule 205 (builtin_name -> PRINT .)


state 27

    (61) location -> string_slice .

    ARROW           reduce using rule 61 (location -> string_slice .)
    ASSIGN          reduce using rule 61 (location -> string_slice .)
    PLUS            reduce using rule 61 (location -> string_slice .)
    MINUS           reduce using rule 61 (location -> string_slice .)
    TIMES           reduce using rule 61 (location -> string_slice .)
    DIVIDE          reduce using rule 61 (location -> string_slice .)
    MOD             reduce using rule 61 (location -> string_slice .)
    CONCAT          reduce using rule 61 (location -> string_slice .)
    LBRACKET        reduce using rule 61 (location -> string_slice .)
    AND             reduce using rule 61 (location -> string_slice .)
    OR              reduce using rule 61 (location -> string_slice .)
    EQ              reduce using rule 61 (location -> string_slice .)
    NEQ             reduce using rule 61 (location -> string_slice .)
    GT              reduce using rule 61 (location -> string_slice .)
    GE              reduce using rule 61 (location -> string_slice .)
    LT              reduce using rule 61 (location -> string_slice .)
    LE              reduce using rule 61 (location -> string_slice .)
    IN              reduce using rule 61 (location -> string_slice .)
    SEMI            reduce using rule 61 (location -> string_slice .)
    THEN            reduce using rule 61 (location -> string_slice .)
    RBRACKET        reduce using rule 61 (location -> string_slice .)
    COMMA           reduce using rule 61 (location -> string_slice .)
    RPAREN          reduce using rule 61 (location -> string_slice .)
    COLON           reduce using rule 61 (location -> string_slice .)
    ELSE            reduce using rule 61 (location -> string_slice .)
    ELSIF           reduce using rule 61 (location -> string_slice .)
    DOWN            reduce using rule 61 (location -> string_slice .)
    BY              reduce using rule 61 (location -> string_slice .)
    TO              reduce using rule 61 (location -> string_slice .)
    FI              reduce using rule 61 (location -> string_slice .)
    WHILE           reduce using rule 61 (location -> string_slice .)


state 28

    (184) call_action -> builtin_call .

    SEMI            reduce using rule 184 (call_action -> builtin_call .)
    ARROW           reduce using rule 184 (call_action -> builtin_call .)
    ASSIGN          reduce using rule 184 (call_action -> builtin_call .)
    PLUS            reduce using rule 184 (call_action -> builtin_call .)
    MINUS           reduce using rule 184 (call_action -> builtin_call .)
    TIMES           reduce using rule 184 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 184 (call_action -> builtin_call .)
    MOD             reduce using rule 184 (call_action -> builtin_call .)
    CONCAT          reduce using rule 184 (call_action -> builtin_call .)
    LBRACKET        reduce using rule 184 (call_action -> builtin_call .)
    AND             reduce using rule 184 (call_action -> builtin_call .)
    OR              reduce using rule 184 (call_action -> builtin_call .)
    EQ              reduce using rule 184 (call_action -> builtin_call .)
    NEQ             reduce using rule 184 (call_action -> builtin_call .)
    GT              reduce using rule 184 (call_action -> builtin_call .)
    GE              reduce using rule 184 (call_action -> builtin_call .)
    LT              reduce using rule 184 (call_action -> builtin_call .)
    LE              reduce using rule 184 (call_action -> builtin_call .)
    IN              reduce using rule 184 (call_action -> builtin_call .)
    THEN            reduce using rule 184 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 184 (call_action -> builtin_call .)
    COMMA           reduce using rule 184 (call_action -> builtin_call .)
    RPAREN          reduce using rule 184 (call_action -> builtin_call .)
    COLON           reduce using rule 184 (call_action -> builtin_call .)
    ELSE            reduce using rule 184 (call_action -> builtin_call .)
    ELSIF           reduce using rule 184 (call_action -> builtin_call .)
    DOWN            reduce using rule 184 (call_action -> builtin_call .)
    BY              reduce using rule 184 (call_action -> builtin_call .)
    TO              reduce using rule 184 (call_action -> builtin_call .)
    FI              reduce using rule 184 (call_action -> builtin_call .)
    WHILE           reduce using rule 184 (call_action -> builtin_call .)


state 29

    (185) procedure_call -> procedure_name . LPAREN parameter_list RPAREN
    (186) procedure_call -> procedure_name . LPAREN RPAREN

    LPAREN          shift and go to state 91


state 30

    (198) builtin_name -> NUM .

    LPAREN          reduce using rule 198 (builtin_name -> NUM .)


state 31

    (145) action -> call_action .
    (64) location -> call_action .

    SEMI            reduce using rule 145 (action -> call_action .)
    ARROW           reduce using rule 64 (location -> call_action .)
    ASSIGN          reduce using rule 64 (location -> call_action .)
    PLUS            reduce using rule 64 (location -> call_action .)
    MINUS           reduce using rule 64 (location -> call_action .)
    TIMES           reduce using rule 64 (location -> call_action .)
    DIVIDE          reduce using rule 64 (location -> call_action .)
    MOD             reduce using rule 64 (location -> call_action .)
    CONCAT          reduce using rule 64 (location -> call_action .)
    LBRACKET        reduce using rule 64 (location -> call_action .)


state 32

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list
    (206) procedure_statement -> . label_id COLON procedure_definition SEMI
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 17
    SYN             shift and go to state 41
    TYPE            shift and go to state 40
    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    synonym_statement              shift and go to state 5
    string_location                shift and go to state 6
    result_action                  shift and go to state 8
    return_action                  shift and go to state 12
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    procedure_statement            shift and go to state 20
    label_id                       shift and go to state 22
    location                       shift and go to state 24
    call_action                    shift and go to state 31
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    statement                      shift and go to state 92
    exit_action                    shift and go to state 34
    newmode_statement              shift and go to state 35
    dereferenced_reference         shift and go to state 39
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    declaration_statement          shift and go to state 43
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    identifier                     shift and go to state 47
    action_statement               shift and go to state 48

state 33

    (194) result_action -> RESULT . result
    (195) result -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    result                         shift and go to state 93
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 61
    integer_literal                shift and go to state 57

state 34

    (146) action -> exit_action .

    SEMI            reduce using rule 146 (action -> exit_action .)


state 35

    (6) statement -> newmode_statement .

    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    RETURN          reduce using rule 6 (statement -> newmode_statement .)
    RESULT          reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    DO              reduce using rule 6 (statement -> newmode_statement .)
    NUM             reduce using rule 6 (statement -> newmode_statement .)
    PRED            reduce using rule 6 (statement -> newmode_statement .)
    SUCC            reduce using rule 6 (statement -> newmode_statement .)
    UPPER           reduce using rule 6 (statement -> newmode_statement .)
    LOWER           reduce using rule 6 (statement -> newmode_statement .)
    LENGTH          reduce using rule 6 (statement -> newmode_statement .)
    READ            reduce using rule 6 (statement -> newmode_statement .)
    PRINT           reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)


state 36

    (17) identifier -> ID .

    COLON           reduce using rule 17 (identifier -> ID .)
    ARROW           reduce using rule 17 (identifier -> ID .)
    ASSIGN          reduce using rule 17 (identifier -> ID .)
    PLUS            reduce using rule 17 (identifier -> ID .)
    MINUS           reduce using rule 17 (identifier -> ID .)
    TIMES           reduce using rule 17 (identifier -> ID .)
    DIVIDE          reduce using rule 17 (identifier -> ID .)
    MOD             reduce using rule 17 (identifier -> ID .)
    CONCAT          reduce using rule 17 (identifier -> ID .)
    LBRACKET        reduce using rule 17 (identifier -> ID .)
    LPAREN          reduce using rule 17 (identifier -> ID .)
    COMMA           reduce using rule 17 (identifier -> ID .)
    REF             reduce using rule 17 (identifier -> ID .)
    ID              reduce using rule 17 (identifier -> ID .)
    ICONST          reduce using rule 17 (identifier -> ID .)
    BOOL            reduce using rule 17 (identifier -> ID .)
    CHAR            reduce using rule 17 (identifier -> ID .)
    CHARS           reduce using rule 17 (identifier -> ID .)
    ARRAY           reduce using rule 17 (identifier -> ID .)
    LOC             reduce using rule 17 (identifier -> ID .)
    RPAREN          reduce using rule 17 (identifier -> ID .)
    SEMI            reduce using rule 17 (identifier -> ID .)
    DCL             reduce using rule 17 (identifier -> ID .)
    SYN             reduce using rule 17 (identifier -> ID .)
    TYPE            reduce using rule 17 (identifier -> ID .)
    EXIT            reduce using rule 17 (identifier -> ID .)
    RETURN          reduce using rule 17 (identifier -> ID .)
    RESULT          reduce using rule 17 (identifier -> ID .)
    IF              reduce using rule 17 (identifier -> ID .)
    DO              reduce using rule 17 (identifier -> ID .)
    NUM             reduce using rule 17 (identifier -> ID .)
    PRED            reduce using rule 17 (identifier -> ID .)
    SUCC            reduce using rule 17 (identifier -> ID .)
    UPPER           reduce using rule 17 (identifier -> ID .)
    LOWER           reduce using rule 17 (identifier -> ID .)
    LENGTH          reduce using rule 17 (identifier -> ID .)
    READ            reduce using rule 17 (identifier -> ID .)
    PRINT           reduce using rule 17 (identifier -> ID .)
    $end            reduce using rule 17 (identifier -> ID .)
    DOWN            reduce using rule 17 (identifier -> ID .)
    IN              reduce using rule 17 (identifier -> ID .)
    WHILE           reduce using rule 17 (identifier -> ID .)
    AND             reduce using rule 17 (identifier -> ID .)
    OR              reduce using rule 17 (identifier -> ID .)
    EQ              reduce using rule 17 (identifier -> ID .)
    NEQ             reduce using rule 17 (identifier -> ID .)
    GT              reduce using rule 17 (identifier -> ID .)
    GE              reduce using rule 17 (identifier -> ID .)
    LT              reduce using rule 17 (identifier -> ID .)
    LE              reduce using rule 17 (identifier -> ID .)
    THEN            reduce using rule 17 (identifier -> ID .)
    RBRACKET        reduce using rule 17 (identifier -> ID .)
    ELSE            reduce using rule 17 (identifier -> ID .)
    ELSIF           reduce using rule 17 (identifier -> ID .)
    BY              reduce using rule 17 (identifier -> ID .)
    TO              reduce using rule 17 (identifier -> ID .)
    FI              reduce using rule 17 (identifier -> ID .)


state 37

    (158) if_action -> IF . boolean_expression then_clause else_clause FI
    (159) if_action -> IF . boolean_expression then_clause FI
    (102) boolean_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    boolean_expression             shift and go to state 94
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 95
    integer_literal                shift and go to state 57

state 38

    (201) builtin_name -> UPPER .

    LPAREN          reduce using rule 201 (builtin_name -> UPPER .)


state 39

    (59) location -> dereferenced_reference .

    ARROW           reduce using rule 59 (location -> dereferenced_reference .)
    ASSIGN          reduce using rule 59 (location -> dereferenced_reference .)
    PLUS            reduce using rule 59 (location -> dereferenced_reference .)
    MINUS           reduce using rule 59 (location -> dereferenced_reference .)
    TIMES           reduce using rule 59 (location -> dereferenced_reference .)
    DIVIDE          reduce using rule 59 (location -> dereferenced_reference .)
    MOD             reduce using rule 59 (location -> dereferenced_reference .)
    CONCAT          reduce using rule 59 (location -> dereferenced_reference .)
    LBRACKET        reduce using rule 59 (location -> dereferenced_reference .)
    AND             reduce using rule 59 (location -> dereferenced_reference .)
    OR              reduce using rule 59 (location -> dereferenced_reference .)
    EQ              reduce using rule 59 (location -> dereferenced_reference .)
    NEQ             reduce using rule 59 (location -> dereferenced_reference .)
    GT              reduce using rule 59 (location -> dereferenced_reference .)
    GE              reduce using rule 59 (location -> dereferenced_reference .)
    LT              reduce using rule 59 (location -> dereferenced_reference .)
    LE              reduce using rule 59 (location -> dereferenced_reference .)
    IN              reduce using rule 59 (location -> dereferenced_reference .)
    SEMI            reduce using rule 59 (location -> dereferenced_reference .)
    THEN            reduce using rule 59 (location -> dereferenced_reference .)
    RBRACKET        reduce using rule 59 (location -> dereferenced_reference .)
    COMMA           reduce using rule 59 (location -> dereferenced_reference .)
    RPAREN          reduce using rule 59 (location -> dereferenced_reference .)
    COLON           reduce using rule 59 (location -> dereferenced_reference .)
    ELSE            reduce using rule 59 (location -> dereferenced_reference .)
    ELSIF           reduce using rule 59 (location -> dereferenced_reference .)
    DOWN            reduce using rule 59 (location -> dereferenced_reference .)
    BY              reduce using rule 59 (location -> dereferenced_reference .)
    TO              reduce using rule 59 (location -> dereferenced_reference .)
    FI              reduce using rule 59 (location -> dereferenced_reference .)
    WHILE           reduce using rule 59 (location -> dereferenced_reference .)


state 40

    (24) newmode_statement -> TYPE . newmode_list
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . newmode_list COMMA mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    mode_definition                shift and go to state 96
    newmode_list                   shift and go to state 97
    identifier_list                shift and go to state 98
    identifier                     shift and go to state 72

state 41

    (18) synonym_statement -> SYN . synonym_list SEMI
    (19) synonym_list -> . synonym_definition
    (20) synonym_list -> . synonym_list COMMA synonym_definition
    (21) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (22) synonym_definition -> . identifier_list ASSIGN constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    synonym_definition             shift and go to state 99
    identifier_list                shift and go to state 101
    synonym_list                   shift and go to state 100
    identifier                     shift and go to state 72

state 42

    (75) array_slice -> array_location . LBRACKET lower_element COLON upper_element RBRACKET

    LBRACKET        shift and go to state 102


state 43

    (4) statement -> declaration_statement .

    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    RETURN          reduce using rule 4 (statement -> declaration_statement .)
    RESULT          reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    DO              reduce using rule 4 (statement -> declaration_statement .)
    NUM             reduce using rule 4 (statement -> declaration_statement .)
    PRED            reduce using rule 4 (statement -> declaration_statement .)
    SUCC            reduce using rule 4 (statement -> declaration_statement .)
    UPPER           reduce using rule 4 (statement -> declaration_statement .)
    LOWER           reduce using rule 4 (statement -> declaration_statement .)
    LENGTH          reduce using rule 4 (statement -> declaration_statement .)
    READ            reduce using rule 4 (statement -> declaration_statement .)
    PRINT           reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 44

    (191) exit_action -> EXIT . label_id
    (142) label_id -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    label_id                       shift and go to state 103
    identifier                     shift and go to state 104

state 45

    (63) location -> array_slice .

    ARROW           reduce using rule 63 (location -> array_slice .)
    ASSIGN          reduce using rule 63 (location -> array_slice .)
    PLUS            reduce using rule 63 (location -> array_slice .)
    MINUS           reduce using rule 63 (location -> array_slice .)
    TIMES           reduce using rule 63 (location -> array_slice .)
    DIVIDE          reduce using rule 63 (location -> array_slice .)
    MOD             reduce using rule 63 (location -> array_slice .)
    CONCAT          reduce using rule 63 (location -> array_slice .)
    LBRACKET        reduce using rule 63 (location -> array_slice .)
    AND             reduce using rule 63 (location -> array_slice .)
    OR              reduce using rule 63 (location -> array_slice .)
    EQ              reduce using rule 63 (location -> array_slice .)
    NEQ             reduce using rule 63 (location -> array_slice .)
    GT              reduce using rule 63 (location -> array_slice .)
    GE              reduce using rule 63 (location -> array_slice .)
    LT              reduce using rule 63 (location -> array_slice .)
    LE              reduce using rule 63 (location -> array_slice .)
    IN              reduce using rule 63 (location -> array_slice .)
    SEMI            reduce using rule 63 (location -> array_slice .)
    THEN            reduce using rule 63 (location -> array_slice .)
    RBRACKET        reduce using rule 63 (location -> array_slice .)
    COMMA           reduce using rule 63 (location -> array_slice .)
    RPAREN          reduce using rule 63 (location -> array_slice .)
    COLON           reduce using rule 63 (location -> array_slice .)
    ELSE            reduce using rule 63 (location -> array_slice .)
    ELSIF           reduce using rule 63 (location -> array_slice .)
    DOWN            reduce using rule 63 (location -> array_slice .)
    BY              reduce using rule 63 (location -> array_slice .)
    TO              reduce using rule 63 (location -> array_slice .)
    FI              reduce using rule 63 (location -> array_slice .)
    WHILE           reduce using rule 63 (location -> array_slice .)


state 46

    (141) action_statement -> action . SEMI

    SEMI            shift and go to state 105


state 47

    (142) label_id -> identifier .
    (58) location -> identifier .
    (190) procedure_name -> identifier .
    (69) string_location -> identifier .

  ! reduce/reduce conflict for LBRACKET resolved using rule 58 (location -> identifier .)
    COLON           reduce using rule 142 (label_id -> identifier .)
    ARROW           reduce using rule 58 (location -> identifier .)
    ASSIGN          reduce using rule 58 (location -> identifier .)
    PLUS            reduce using rule 58 (location -> identifier .)
    MINUS           reduce using rule 58 (location -> identifier .)
    TIMES           reduce using rule 58 (location -> identifier .)
    DIVIDE          reduce using rule 58 (location -> identifier .)
    MOD             reduce using rule 58 (location -> identifier .)
    CONCAT          reduce using rule 58 (location -> identifier .)
    LBRACKET        reduce using rule 58 (location -> identifier .)
    LPAREN          reduce using rule 190 (procedure_name -> identifier .)

  ! LBRACKET        [ reduce using rule 69 (string_location -> identifier .) ]


state 48

    (8) statement -> action_statement .

    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    PRED            reduce using rule 8 (statement -> action_statement .)
    SUCC            reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)


state 49

    (192) return_action -> RETURN result .

    SEMI            reduce using rule 192 (return_action -> RETURN result .)


state 50

    (134) monadic_operator -> MINUS .

    ARROW           reduce using rule 134 (monadic_operator -> MINUS .)
    ID              reduce using rule 134 (monadic_operator -> MINUS .)
    LPAREN          reduce using rule 134 (monadic_operator -> MINUS .)
    ICONST          reduce using rule 134 (monadic_operator -> MINUS .)
    FALSE           reduce using rule 134 (monadic_operator -> MINUS .)
    TRUE            reduce using rule 134 (monadic_operator -> MINUS .)
    CCONST          reduce using rule 134 (monadic_operator -> MINUS .)
    NULL            reduce using rule 134 (monadic_operator -> MINUS .)
    SCONST          reduce using rule 134 (monadic_operator -> MINUS .)
    NUM             reduce using rule 134 (monadic_operator -> MINUS .)
    PRED            reduce using rule 134 (monadic_operator -> MINUS .)
    SUCC            reduce using rule 134 (monadic_operator -> MINUS .)
    UPPER           reduce using rule 134 (monadic_operator -> MINUS .)
    LOWER           reduce using rule 134 (monadic_operator -> MINUS .)
    LENGTH          reduce using rule 134 (monadic_operator -> MINUS .)
    READ            reduce using rule 134 (monadic_operator -> MINUS .)
    PRINT           reduce using rule 134 (monadic_operator -> MINUS .)


state 51

    (107) operand0 -> operand1 .
    (121) operand1 -> operand1 . operator2 operand2
    (122) operator2 -> . arithmetic_additive_operator
    (123) operator2 -> . string_concatenation_operator
    (124) arithmetic_additive_operator -> . PLUS
    (125) arithmetic_additive_operator -> . MINUS
    (126) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 107 (operand0 -> operand1 .)
    OR              reduce using rule 107 (operand0 -> operand1 .)
    EQ              reduce using rule 107 (operand0 -> operand1 .)
    NEQ             reduce using rule 107 (operand0 -> operand1 .)
    GT              reduce using rule 107 (operand0 -> operand1 .)
    GE              reduce using rule 107 (operand0 -> operand1 .)
    LT              reduce using rule 107 (operand0 -> operand1 .)
    LE              reduce using rule 107 (operand0 -> operand1 .)
    IN              reduce using rule 107 (operand0 -> operand1 .)
    SEMI            reduce using rule 107 (operand0 -> operand1 .)
    RBRACKET        reduce using rule 107 (operand0 -> operand1 .)
    COMMA           reduce using rule 107 (operand0 -> operand1 .)
    FI              reduce using rule 107 (operand0 -> operand1 .)
    DOWN            reduce using rule 107 (operand0 -> operand1 .)
    BY              reduce using rule 107 (operand0 -> operand1 .)
    TO              reduce using rule 107 (operand0 -> operand1 .)
    COLON           reduce using rule 107 (operand0 -> operand1 .)
    RPAREN          reduce using rule 107 (operand0 -> operand1 .)
    THEN            reduce using rule 107 (operand0 -> operand1 .)
    ELSE            reduce using rule 107 (operand0 -> operand1 .)
    ELSIF           reduce using rule 107 (operand0 -> operand1 .)
    WHILE           reduce using rule 107 (operand0 -> operand1 .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 84
    CONCAT          shift and go to state 79

    string_concatenation_operator  shift and go to state 107
    arithmetic_additive_operator   shift and go to state 106
    operator2                      shift and go to state 108

state 52

    (98) expression -> operand0 .
    (108) operand0 -> operand0 . operator1 operand1
    (109) operator1 -> . relational_operator
    (110) operator1 -> . membership_operator
    (111) relational_operator -> . AND
    (112) relational_operator -> . OR
    (113) relational_operator -> . EQ
    (114) relational_operator -> . NEQ
    (115) relational_operator -> . GT
    (116) relational_operator -> . GE
    (117) relational_operator -> . LT
    (118) relational_operator -> . LE
    (119) membership_operator -> . IN

    THEN            reduce using rule 98 (expression -> operand0 .)
    RBRACKET        reduce using rule 98 (expression -> operand0 .)
    COMMA           reduce using rule 98 (expression -> operand0 .)
    COLON           reduce using rule 98 (expression -> operand0 .)
    RPAREN          reduce using rule 98 (expression -> operand0 .)
    WHILE           reduce using rule 98 (expression -> operand0 .)
    SEMI            reduce using rule 98 (expression -> operand0 .)
    FI              reduce using rule 98 (expression -> operand0 .)
    ELSE            reduce using rule 98 (expression -> operand0 .)
    ELSIF           reduce using rule 98 (expression -> operand0 .)
    DOWN            reduce using rule 98 (expression -> operand0 .)
    BY              reduce using rule 98 (expression -> operand0 .)
    TO              reduce using rule 98 (expression -> operand0 .)
    AND             shift and go to state 109
    OR              shift and go to state 119
    EQ              shift and go to state 118
    NEQ             shift and go to state 117
    GT              shift and go to state 110
    GE              shift and go to state 114
    LT              shift and go to state 113
    LE              shift and go to state 115
    IN              shift and go to state 116

    operator1                      shift and go to state 111
    membership_operator            shift and go to state 112
    relational_operator            shift and go to state 120

state 53

    (127) operand2 -> operand3 .

    TIMES           reduce using rule 127 (operand2 -> operand3 .)
    DIVIDE          reduce using rule 127 (operand2 -> operand3 .)
    MOD             reduce using rule 127 (operand2 -> operand3 .)
    PLUS            reduce using rule 127 (operand2 -> operand3 .)
    MINUS           reduce using rule 127 (operand2 -> operand3 .)
    CONCAT          reduce using rule 127 (operand2 -> operand3 .)
    AND             reduce using rule 127 (operand2 -> operand3 .)
    OR              reduce using rule 127 (operand2 -> operand3 .)
    EQ              reduce using rule 127 (operand2 -> operand3 .)
    NEQ             reduce using rule 127 (operand2 -> operand3 .)
    GT              reduce using rule 127 (operand2 -> operand3 .)
    GE              reduce using rule 127 (operand2 -> operand3 .)
    LT              reduce using rule 127 (operand2 -> operand3 .)
    LE              reduce using rule 127 (operand2 -> operand3 .)
    IN              reduce using rule 127 (operand2 -> operand3 .)
    RPAREN          reduce using rule 127 (operand2 -> operand3 .)
    COMMA           reduce using rule 127 (operand2 -> operand3 .)
    SEMI            reduce using rule 127 (operand2 -> operand3 .)
    RBRACKET        reduce using rule 127 (operand2 -> operand3 .)
    WHILE           reduce using rule 127 (operand2 -> operand3 .)
    COLON           reduce using rule 127 (operand2 -> operand3 .)
    THEN            reduce using rule 127 (operand2 -> operand3 .)
    ELSE            reduce using rule 127 (operand2 -> operand3 .)
    ELSIF           reduce using rule 127 (operand2 -> operand3 .)
    DOWN            reduce using rule 127 (operand2 -> operand3 .)
    BY              reduce using rule 127 (operand2 -> operand3 .)
    TO              reduce using rule 127 (operand2 -> operand3 .)
    FI              reduce using rule 127 (operand2 -> operand3 .)


state 54

    (120) operand1 -> operand2 .
    (128) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (129) arithmetic_multiplicative_operator -> . TIMES
    (130) arithmetic_multiplicative_operator -> . DIVIDE
    (131) arithmetic_multiplicative_operator -> . MOD

    PLUS            reduce using rule 120 (operand1 -> operand2 .)
    MINUS           reduce using rule 120 (operand1 -> operand2 .)
    CONCAT          reduce using rule 120 (operand1 -> operand2 .)
    AND             reduce using rule 120 (operand1 -> operand2 .)
    OR              reduce using rule 120 (operand1 -> operand2 .)
    EQ              reduce using rule 120 (operand1 -> operand2 .)
    NEQ             reduce using rule 120 (operand1 -> operand2 .)
    GT              reduce using rule 120 (operand1 -> operand2 .)
    GE              reduce using rule 120 (operand1 -> operand2 .)
    LT              reduce using rule 120 (operand1 -> operand2 .)
    LE              reduce using rule 120 (operand1 -> operand2 .)
    IN              reduce using rule 120 (operand1 -> operand2 .)
    RBRACKET        reduce using rule 120 (operand1 -> operand2 .)
    COMMA           reduce using rule 120 (operand1 -> operand2 .)
    SEMI            reduce using rule 120 (operand1 -> operand2 .)
    FI              reduce using rule 120 (operand1 -> operand2 .)
    RPAREN          reduce using rule 120 (operand1 -> operand2 .)
    THEN            reduce using rule 120 (operand1 -> operand2 .)
    COLON           reduce using rule 120 (operand1 -> operand2 .)
    ELSE            reduce using rule 120 (operand1 -> operand2 .)
    ELSIF           reduce using rule 120 (operand1 -> operand2 .)
    DOWN            reduce using rule 120 (operand1 -> operand2 .)
    BY              reduce using rule 120 (operand1 -> operand2 .)
    TO              reduce using rule 120 (operand1 -> operand2 .)
    WHILE           reduce using rule 120 (operand1 -> operand2 .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 78
    MOD             shift and go to state 90

    arithmetic_multiplicative_operator shift and go to state 121

state 55

    (132) operand3 -> monadic_operator . operand4
    (136) operand4 -> . location
    (137) operand4 -> . referenced_location
    (138) operand4 -> . primitive_value
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (139) referenced_location -> . ARROW location
    (79) primitive_value -> . literal
    (80) primitive_value -> . value_array_element
    (81) primitive_value -> . value_array_slice
    (82) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (83) literal -> . integer_literal
    (84) literal -> . boolean_literal
    (85) literal -> . character_literal
    (86) literal -> . empty_literal
    (87) literal -> . character_string_literal
    (94) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (95) value_array_slice -> . array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET
    (97) parenthesized_expression -> . LPAREN expression RPAREN
    (69) string_location -> . identifier
    (76) array_location -> . location
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (88) integer_literal -> . ICONST
    (89) boolean_literal -> . FALSE
    (90) boolean_literal -> . TRUE
    (91) character_literal -> . CCONST
    (92) empty_literal -> . NULL
    (93) character_string_literal -> . SCONST
    (96) array_primitive_value -> . primitive_value
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT

    ARROW           shift and go to state 138
    ID              shift and go to state 36
    LPAREN          shift and go to state 122
    ICONST          shift and go to state 56
    FALSE           shift and go to state 130
    TRUE            shift and go to state 127
    CCONST          shift and go to state 136
    NULL            shift and go to state 126
    SCONST          shift and go to state 125
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    empty_literal                  shift and go to state 123
    boolean_literal                shift and go to state 124
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    value_array_element            shift and go to state 128
    string_element                 shift and go to state 16
    operand4                       shift and go to state 129
    literal                        shift and go to state 132
    location                       shift and go to state 133
    call_action                    shift and go to state 134
    referenced_location            shift and go to state 135
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    array_primitive_value          shift and go to state 137
    string_location                shift and go to state 6
    integer_literal                shift and go to state 131
    parenthesized_expression       shift and go to state 139
    character_string_literal       shift and go to state 140
    dereferenced_reference         shift and go to state 39
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    value_array_slice              shift and go to state 141
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    character_literal              shift and go to state 142
    identifier                     shift and go to state 143
    primitive_value                shift and go to state 144

state 56

    (88) integer_literal -> ICONST .

    TIMES           reduce using rule 88 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 88 (integer_literal -> ICONST .)
    MOD             reduce using rule 88 (integer_literal -> ICONST .)
    PLUS            reduce using rule 88 (integer_literal -> ICONST .)
    MINUS           reduce using rule 88 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 88 (integer_literal -> ICONST .)
    AND             reduce using rule 88 (integer_literal -> ICONST .)
    OR              reduce using rule 88 (integer_literal -> ICONST .)
    EQ              reduce using rule 88 (integer_literal -> ICONST .)
    NEQ             reduce using rule 88 (integer_literal -> ICONST .)
    GT              reduce using rule 88 (integer_literal -> ICONST .)
    GE              reduce using rule 88 (integer_literal -> ICONST .)
    LT              reduce using rule 88 (integer_literal -> ICONST .)
    LE              reduce using rule 88 (integer_literal -> ICONST .)
    IN              reduce using rule 88 (integer_literal -> ICONST .)
    SEMI            reduce using rule 88 (integer_literal -> ICONST .)
    COMMA           reduce using rule 88 (integer_literal -> ICONST .)
    COLON           reduce using rule 88 (integer_literal -> ICONST .)
    DOWN            reduce using rule 88 (integer_literal -> ICONST .)
    BY              reduce using rule 88 (integer_literal -> ICONST .)
    TO              reduce using rule 88 (integer_literal -> ICONST .)
    THEN            reduce using rule 88 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 88 (integer_literal -> ICONST .)
    RPAREN          reduce using rule 88 (integer_literal -> ICONST .)
    ELSE            reduce using rule 88 (integer_literal -> ICONST .)
    ELSIF           reduce using rule 88 (integer_literal -> ICONST .)
    FI              reduce using rule 88 (integer_literal -> ICONST .)
    WHILE           reduce using rule 88 (integer_literal -> ICONST .)
    LBRACKET        reduce using rule 88 (integer_literal -> ICONST .)


state 57

    (133) operand3 -> integer_literal .

    TIMES           reduce using rule 133 (operand3 -> integer_literal .)
    DIVIDE          reduce using rule 133 (operand3 -> integer_literal .)
    MOD             reduce using rule 133 (operand3 -> integer_literal .)
    PLUS            reduce using rule 133 (operand3 -> integer_literal .)
    MINUS           reduce using rule 133 (operand3 -> integer_literal .)
    CONCAT          reduce using rule 133 (operand3 -> integer_literal .)
    AND             reduce using rule 133 (operand3 -> integer_literal .)
    OR              reduce using rule 133 (operand3 -> integer_literal .)
    EQ              reduce using rule 133 (operand3 -> integer_literal .)
    NEQ             reduce using rule 133 (operand3 -> integer_literal .)
    GT              reduce using rule 133 (operand3 -> integer_literal .)
    GE              reduce using rule 133 (operand3 -> integer_literal .)
    LT              reduce using rule 133 (operand3 -> integer_literal .)
    LE              reduce using rule 133 (operand3 -> integer_literal .)
    IN              reduce using rule 133 (operand3 -> integer_literal .)
    RPAREN          reduce using rule 133 (operand3 -> integer_literal .)
    COMMA           reduce using rule 133 (operand3 -> integer_literal .)
    SEMI            reduce using rule 133 (operand3 -> integer_literal .)
    THEN            reduce using rule 133 (operand3 -> integer_literal .)
    RBRACKET        reduce using rule 133 (operand3 -> integer_literal .)
    ELSE            reduce using rule 133 (operand3 -> integer_literal .)
    ELSIF           reduce using rule 133 (operand3 -> integer_literal .)
    COLON           reduce using rule 133 (operand3 -> integer_literal .)
    DOWN            reduce using rule 133 (operand3 -> integer_literal .)
    BY              reduce using rule 133 (operand3 -> integer_literal .)
    TO              reduce using rule 133 (operand3 -> integer_literal .)
    FI              reduce using rule 133 (operand3 -> integer_literal .)
    WHILE           reduce using rule 133 (operand3 -> integer_literal .)


state 58

    (100) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (101) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (102) boolean_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    boolean_expression             shift and go to state 145
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 95
    integer_literal                shift and go to state 57

state 59

    (99) expression -> conditional_expression .

    THEN            reduce using rule 99 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 99 (expression -> conditional_expression .)
    COMMA           reduce using rule 99 (expression -> conditional_expression .)
    COLON           reduce using rule 99 (expression -> conditional_expression .)
    RPAREN          reduce using rule 99 (expression -> conditional_expression .)
    WHILE           reduce using rule 99 (expression -> conditional_expression .)
    SEMI            reduce using rule 99 (expression -> conditional_expression .)
    FI              reduce using rule 99 (expression -> conditional_expression .)
    ELSE            reduce using rule 99 (expression -> conditional_expression .)
    ELSIF           reduce using rule 99 (expression -> conditional_expression .)
    DOWN            reduce using rule 99 (expression -> conditional_expression .)
    BY              reduce using rule 99 (expression -> conditional_expression .)
    TO              reduce using rule 99 (expression -> conditional_expression .)


state 60

    (135) monadic_operator -> NOT .

    ARROW           reduce using rule 135 (monadic_operator -> NOT .)
    ID              reduce using rule 135 (monadic_operator -> NOT .)
    LPAREN          reduce using rule 135 (monadic_operator -> NOT .)
    ICONST          reduce using rule 135 (monadic_operator -> NOT .)
    FALSE           reduce using rule 135 (monadic_operator -> NOT .)
    TRUE            reduce using rule 135 (monadic_operator -> NOT .)
    CCONST          reduce using rule 135 (monadic_operator -> NOT .)
    NULL            reduce using rule 135 (monadic_operator -> NOT .)
    SCONST          reduce using rule 135 (monadic_operator -> NOT .)
    NUM             reduce using rule 135 (monadic_operator -> NOT .)
    PRED            reduce using rule 135 (monadic_operator -> NOT .)
    SUCC            reduce using rule 135 (monadic_operator -> NOT .)
    UPPER           reduce using rule 135 (monadic_operator -> NOT .)
    LOWER           reduce using rule 135 (monadic_operator -> NOT .)
    LENGTH          reduce using rule 135 (monadic_operator -> NOT .)
    READ            reduce using rule 135 (monadic_operator -> NOT .)
    PRINT           reduce using rule 135 (monadic_operator -> NOT .)


state 61

    (195) result -> expression .

    SEMI            reduce using rule 195 (result -> expression .)


state 62

    (182) while_control -> WHILE . boolean_expression
    (102) boolean_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    boolean_expression             shift and go to state 146
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 95
    integer_literal                shift and go to state 57

state 63

    (165) do_action -> DO action_statement_list . OD
    (212) action_statement_list -> action_statement_list . COMMA action_statement

    OD              shift and go to state 147
    COMMA           shift and go to state 148


state 64

    (164) do_action -> DO control_part . SEMI action_statement_list OD

    SEMI            shift and go to state 149


state 65

    (166) control_part -> for_control . while_control
    (182) while_control -> . WHILE boolean_expression

    WHILE           shift and go to state 62

    while_control                  shift and go to state 150

state 66

    (140) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 151


state 67

    (168) for_control -> FOR . iteration
    (169) iteration -> . step_enumeration
    (170) iteration -> . range_enumeration
    (171) step_enumeration -> . loop_counter ASSIGN start_value step_value DOWN end_value
    (172) step_enumeration -> . loop_counter ASSIGN start_value DOWN end_value
    (173) step_enumeration -> . loop_counter ASSIGN start_value step_value end_value
    (174) step_enumeration -> . loop_counter ASSIGN start_value end_value
    (180) range_enumeration -> . loop_counter DOWN IN discrete_mode_name
    (181) range_enumeration -> . loop_counter IN discrete_mode_name
    (175) loop_counter -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    range_enumeration              shift and go to state 152
    loop_counter                   shift and go to state 153
    iteration                      shift and go to state 154
    step_enumeration               shift and go to state 155
    identifier                     shift and go to state 156

state 68

    (167) control_part -> while_control .

    SEMI            reduce using rule 167 (control_part -> while_control .)


state 69

    (211) action_statement_list -> action_statement .

    COMMA           reduce using rule 211 (action_statement_list -> action_statement .)
    FI              reduce using rule 211 (action_statement_list -> action_statement .)
    END             reduce using rule 211 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 211 (action_statement_list -> action_statement .)
    ELSIF           reduce using rule 211 (action_statement_list -> action_statement .)
    OD              reduce using rule 211 (action_statement_list -> action_statement .)


state 70

    (66) string_element -> string_location LBRACKET . start_element COLON right_element RBRACKET
    (68) string_slice -> string_location LBRACKET . left_element COLON right_element RBRACKET
    (72) array_element -> string_location LBRACKET . expression_list RBRACKET
    (67) start_element -> . ICONST
    (70) left_element -> . ICONST
    (73) expression_list -> . expression
    (74) expression_list -> . expression_list COMMA expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    ICONST          shift and go to state 159
    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60

    monadic_operator               shift and go to state 55
    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    left_element                   shift and go to state 157
    integer_literal                shift and go to state 57
    start_element                  shift and go to state 158
    conditional_expression         shift and go to state 59
    expression                     shift and go to state 161
    expression_list                shift and go to state 160

state 71

    (196) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (197) builtin_call -> builtin_name LPAREN . RPAREN
    (187) parameter_list -> . parameter
    (188) parameter_list -> . parameter_list COMMA parameter
    (189) parameter -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    RPAREN          shift and go to state 162
    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    parameter_list                 shift and go to state 164
    parameter                      shift and go to state 163
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    integer_literal                shift and go to state 57
    expression                     shift and go to state 165

state 72

    (15) identifier_list -> identifier .

    COMMA           reduce using rule 15 (identifier_list -> identifier .)
    REF             reduce using rule 15 (identifier_list -> identifier .)
    ID              reduce using rule 15 (identifier_list -> identifier .)
    ICONST          reduce using rule 15 (identifier_list -> identifier .)
    BOOL            reduce using rule 15 (identifier_list -> identifier .)
    CHAR            reduce using rule 15 (identifier_list -> identifier .)
    CHARS           reduce using rule 15 (identifier_list -> identifier .)
    ARRAY           reduce using rule 15 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 15 (identifier_list -> identifier .)


state 73

    (9) declaration_statement -> DCL declaration_list . SEMI
    (11) declaration_list -> declaration_list . COMMA declaration

    SEMI            shift and go to state 167
    COMMA           shift and go to state 166


state 74

    (10) declaration_list -> declaration .

    SEMI            reduce using rule 10 (declaration_list -> declaration .)
    COMMA           reduce using rule 10 (declaration_list -> declaration .)


state 75

    (12) declaration -> identifier_list . mode initialization
    (13) declaration -> identifier_list . mode
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (51) array_mode -> . ARRAY LBRACKET index_mode RBRACKET
    (52) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 177
    REF             shift and go to state 173
    ID              shift and go to state 36
    ICONST          shift and go to state 179
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    CHARS           shift and go to state 181
    ARRAY           shift and go to state 178

    string_mode                    shift and go to state 175
    identifier                     shift and go to state 187
    array_mode                     shift and go to state 174
    discrete_range_mode            shift and go to state 180
    discrete_mode_name             shift and go to state 171
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    reference_mode                 shift and go to state 170
    composite_mode                 shift and go to state 183
    integer_mode                   shift and go to state 186
    mode                           shift and go to state 185
    discrete_mode                  shift and go to state 172
    mode_name                      shift and go to state 176

state 76

    (206) procedure_statement -> label_id COLON . procedure_definition SEMI
    (140) action_statement -> label_id COLON . action SEMI
    (207) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement action_statement_list END
    (208) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement END
    (209) procedure_definition -> . PROC LPAREN RPAREN SEMI action_statement action_statement_list END
    (210) procedure_definition -> . PROC LPAREN RPAREN SEMI action_statement END
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (17) identifier -> . ID
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    PROC            shift and go to state 188
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    ID              shift and go to state 36
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    procedure_name                 shift and go to state 29
    string_location                shift and go to state 6
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 189
    procedure_definition           shift and go to state 190
    identifier                     shift and go to state 191

state 77

    (151) assignment_action -> location assigning_operator . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 192
    integer_literal                shift and go to state 57

state 78

    (130) arithmetic_multiplicative_operator -> DIVIDE .

    ASSIGN          reduce using rule 130 (arithmetic_multiplicative_operator -> DIVIDE .)
    MINUS           reduce using rule 130 (arithmetic_multiplicative_operator -> DIVIDE .)
    NOT             reduce using rule 130 (arithmetic_multiplicative_operator -> DIVIDE .)
    ICONST          reduce using rule 130 (arithmetic_multiplicative_operator -> DIVIDE .)


state 79

    (126) string_concatenation_operator -> CONCAT .

    MINUS           reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    NOT             reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    ICONST          reduce using rule 126 (string_concatenation_operator -> CONCAT .)
    ASSIGN          reduce using rule 126 (string_concatenation_operator -> CONCAT .)


state 80

    (153) assigning_operator -> assignment_symbol .

    IF              reduce using rule 153 (assigning_operator -> assignment_symbol .)
    MINUS           reduce using rule 153 (assigning_operator -> assignment_symbol .)
    NOT             reduce using rule 153 (assigning_operator -> assignment_symbol .)
    ICONST          reduce using rule 153 (assigning_operator -> assignment_symbol .)


state 81

    (156) closed_dyadic_operator -> string_concatenation_operator .

    ASSIGN          reduce using rule 156 (closed_dyadic_operator -> string_concatenation_operator .)


state 82

    (155) closed_dyadic_operator -> arithmetic_multiplicative_operator .

    ASSIGN          reduce using rule 155 (closed_dyadic_operator -> arithmetic_multiplicative_operator .)


state 83

    (154) closed_dyadic_operator -> arithmetic_additive_operator .

    ASSIGN          reduce using rule 154 (closed_dyadic_operator -> arithmetic_additive_operator .)


state 84

    (125) arithmetic_additive_operator -> MINUS .

    ASSIGN          reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    MINUS           reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    NOT             reduce using rule 125 (arithmetic_additive_operator -> MINUS .)
    ICONST          reduce using rule 125 (arithmetic_additive_operator -> MINUS .)


state 85

    (124) arithmetic_additive_operator -> PLUS .

    ASSIGN          reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    MINUS           reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    NOT             reduce using rule 124 (arithmetic_additive_operator -> PLUS .)
    ICONST          reduce using rule 124 (arithmetic_additive_operator -> PLUS .)


state 86

    (65) dereferenced_reference -> location ARROW .

    ARROW           reduce using rule 65 (dereferenced_reference -> location ARROW .)
    ASSIGN          reduce using rule 65 (dereferenced_reference -> location ARROW .)
    PLUS            reduce using rule 65 (dereferenced_reference -> location ARROW .)
    MINUS           reduce using rule 65 (dereferenced_reference -> location ARROW .)
    TIMES           reduce using rule 65 (dereferenced_reference -> location ARROW .)
    DIVIDE          reduce using rule 65 (dereferenced_reference -> location ARROW .)
    MOD             reduce using rule 65 (dereferenced_reference -> location ARROW .)
    CONCAT          reduce using rule 65 (dereferenced_reference -> location ARROW .)
    LBRACKET        reduce using rule 65 (dereferenced_reference -> location ARROW .)
    AND             reduce using rule 65 (dereferenced_reference -> location ARROW .)
    OR              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    EQ              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    NEQ             reduce using rule 65 (dereferenced_reference -> location ARROW .)
    GT              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    GE              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    LT              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    LE              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    IN              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    SEMI            reduce using rule 65 (dereferenced_reference -> location ARROW .)
    THEN            reduce using rule 65 (dereferenced_reference -> location ARROW .)
    RBRACKET        reduce using rule 65 (dereferenced_reference -> location ARROW .)
    COMMA           reduce using rule 65 (dereferenced_reference -> location ARROW .)
    RPAREN          reduce using rule 65 (dereferenced_reference -> location ARROW .)
    COLON           reduce using rule 65 (dereferenced_reference -> location ARROW .)
    ELSE            reduce using rule 65 (dereferenced_reference -> location ARROW .)
    ELSIF           reduce using rule 65 (dereferenced_reference -> location ARROW .)
    DOWN            reduce using rule 65 (dereferenced_reference -> location ARROW .)
    BY              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    TO              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    FI              reduce using rule 65 (dereferenced_reference -> location ARROW .)
    WHILE           reduce using rule 65 (dereferenced_reference -> location ARROW .)


state 87

    (129) arithmetic_multiplicative_operator -> TIMES .

    ASSIGN          reduce using rule 129 (arithmetic_multiplicative_operator -> TIMES .)
    MINUS           reduce using rule 129 (arithmetic_multiplicative_operator -> TIMES .)
    NOT             reduce using rule 129 (arithmetic_multiplicative_operator -> TIMES .)
    ICONST          reduce using rule 129 (arithmetic_multiplicative_operator -> TIMES .)


state 88

    (157) assignment_symbol -> ASSIGN .

    IF              reduce using rule 157 (assignment_symbol -> ASSIGN .)
    MINUS           reduce using rule 157 (assignment_symbol -> ASSIGN .)
    NOT             reduce using rule 157 (assignment_symbol -> ASSIGN .)
    ICONST          reduce using rule 157 (assignment_symbol -> ASSIGN .)


state 89

    (152) assigning_operator -> closed_dyadic_operator . assignment_symbol
    (157) assignment_symbol -> . ASSIGN

    ASSIGN          shift and go to state 88

    assignment_symbol              shift and go to state 193

state 90

    (131) arithmetic_multiplicative_operator -> MOD .

    ASSIGN          reduce using rule 131 (arithmetic_multiplicative_operator -> MOD .)
    MINUS           reduce using rule 131 (arithmetic_multiplicative_operator -> MOD .)
    NOT             reduce using rule 131 (arithmetic_multiplicative_operator -> MOD .)
    ICONST          reduce using rule 131 (arithmetic_multiplicative_operator -> MOD .)


state 91

    (185) procedure_call -> procedure_name LPAREN . parameter_list RPAREN
    (186) procedure_call -> procedure_name LPAREN . RPAREN
    (187) parameter_list -> . parameter
    (188) parameter_list -> . parameter_list COMMA parameter
    (189) parameter -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    RPAREN          shift and go to state 194
    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    parameter_list                 shift and go to state 195
    expression                     shift and go to state 165
    operand3                       shift and go to state 53
    integer_literal                shift and go to state 57
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    parameter                      shift and go to state 163

state 92

    (3) statement_list -> statement_list statement .

    DCL             reduce using rule 3 (statement_list -> statement_list statement .)
    SYN             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    NUM             reduce using rule 3 (statement_list -> statement_list statement .)
    PRED            reduce using rule 3 (statement_list -> statement_list statement .)
    SUCC            reduce using rule 3 (statement_list -> statement_list statement .)
    UPPER           reduce using rule 3 (statement_list -> statement_list statement .)
    LOWER           reduce using rule 3 (statement_list -> statement_list statement .)
    LENGTH          reduce using rule 3 (statement_list -> statement_list statement .)
    READ            reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 93

    (194) result_action -> RESULT result .

    SEMI            reduce using rule 194 (result_action -> RESULT result .)


state 94

    (158) if_action -> IF boolean_expression . then_clause else_clause FI
    (159) if_action -> IF boolean_expression . then_clause FI
    (160) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 196

    then_clause                    shift and go to state 197

state 95

    (102) boolean_expression -> expression .

    THEN            reduce using rule 102 (boolean_expression -> expression .)
    SEMI            reduce using rule 102 (boolean_expression -> expression .)


state 96

    (25) newmode_list -> mode_definition .

    COMMA           reduce using rule 25 (newmode_list -> mode_definition .)
    DCL             reduce using rule 25 (newmode_list -> mode_definition .)
    SYN             reduce using rule 25 (newmode_list -> mode_definition .)
    TYPE            reduce using rule 25 (newmode_list -> mode_definition .)
    ID              reduce using rule 25 (newmode_list -> mode_definition .)
    EXIT            reduce using rule 25 (newmode_list -> mode_definition .)
    RETURN          reduce using rule 25 (newmode_list -> mode_definition .)
    RESULT          reduce using rule 25 (newmode_list -> mode_definition .)
    IF              reduce using rule 25 (newmode_list -> mode_definition .)
    DO              reduce using rule 25 (newmode_list -> mode_definition .)
    NUM             reduce using rule 25 (newmode_list -> mode_definition .)
    PRED            reduce using rule 25 (newmode_list -> mode_definition .)
    SUCC            reduce using rule 25 (newmode_list -> mode_definition .)
    UPPER           reduce using rule 25 (newmode_list -> mode_definition .)
    LOWER           reduce using rule 25 (newmode_list -> mode_definition .)
    LENGTH          reduce using rule 25 (newmode_list -> mode_definition .)
    READ            reduce using rule 25 (newmode_list -> mode_definition .)
    PRINT           reduce using rule 25 (newmode_list -> mode_definition .)
    $end            reduce using rule 25 (newmode_list -> mode_definition .)


state 97

    (24) newmode_statement -> TYPE newmode_list .
    (26) newmode_list -> newmode_list . COMMA mode_definition

    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    PRED            reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    SUCC            reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list .)
    COMMA           shift and go to state 198


state 98

    (27) mode_definition -> identifier_list . ASSIGN mode
    (16) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 199
    COMMA           shift and go to state 177


state 99

    (19) synonym_list -> synonym_definition .

    SEMI            reduce using rule 19 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 19 (synonym_list -> synonym_definition .)


state 100

    (18) synonym_statement -> SYN synonym_list . SEMI
    (20) synonym_list -> synonym_list . COMMA synonym_definition

    SEMI            shift and go to state 201
    COMMA           shift and go to state 200


state 101

    (21) synonym_definition -> identifier_list . mode ASSIGN constant_expression
    (22) synonym_definition -> identifier_list . ASSIGN constant_expression
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (51) array_mode -> . ARRAY LBRACKET index_mode RBRACKET
    (52) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET
    (42) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 202
    COMMA           shift and go to state 177
    REF             shift and go to state 173
    ID              shift and go to state 36
    ICONST          shift and go to state 179
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    CHARS           shift and go to state 181
    ARRAY           shift and go to state 178

    string_mode                    shift and go to state 175
    array_mode                     shift and go to state 174
    discrete_range_mode            shift and go to state 180
    discrete_mode_name             shift and go to state 171
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    reference_mode                 shift and go to state 170
    composite_mode                 shift and go to state 183
    integer_mode                   shift and go to state 186
    mode                           shift and go to state 203
    discrete_mode                  shift and go to state 172
    identifier                     shift and go to state 187
    mode_name                      shift and go to state 176

state 102

    (75) array_slice -> array_location LBRACKET . lower_element COLON upper_element RBRACKET
    (77) lower_element -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    lower_element                  shift and go to state 204
    conditional_expression         shift and go to state 59
    operand1                       shift and go to state 51
    integer_literal                shift and go to state 57
    expression                     shift and go to state 205
    monadic_operator               shift and go to state 55

state 103

    (191) exit_action -> EXIT label_id .

    SEMI            reduce using rule 191 (exit_action -> EXIT label_id .)


state 104

    (142) label_id -> identifier .

    SEMI            reduce using rule 142 (label_id -> identifier .)


state 105

    (141) action_statement -> action SEMI .

    END             reduce using rule 141 (action_statement -> action SEMI .)
    ID              reduce using rule 141 (action_statement -> action SEMI .)
    EXIT            reduce using rule 141 (action_statement -> action SEMI .)
    RETURN          reduce using rule 141 (action_statement -> action SEMI .)
    RESULT          reduce using rule 141 (action_statement -> action SEMI .)
    IF              reduce using rule 141 (action_statement -> action SEMI .)
    DO              reduce using rule 141 (action_statement -> action SEMI .)
    NUM             reduce using rule 141 (action_statement -> action SEMI .)
    PRED            reduce using rule 141 (action_statement -> action SEMI .)
    SUCC            reduce using rule 141 (action_statement -> action SEMI .)
    UPPER           reduce using rule 141 (action_statement -> action SEMI .)
    LOWER           reduce using rule 141 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 141 (action_statement -> action SEMI .)
    READ            reduce using rule 141 (action_statement -> action SEMI .)
    PRINT           reduce using rule 141 (action_statement -> action SEMI .)
    OD              reduce using rule 141 (action_statement -> action SEMI .)
    COMMA           reduce using rule 141 (action_statement -> action SEMI .)
    FI              reduce using rule 141 (action_statement -> action SEMI .)
    ELSE            reduce using rule 141 (action_statement -> action SEMI .)
    ELSIF           reduce using rule 141 (action_statement -> action SEMI .)
    DCL             reduce using rule 141 (action_statement -> action SEMI .)
    SYN             reduce using rule 141 (action_statement -> action SEMI .)
    TYPE            reduce using rule 141 (action_statement -> action SEMI .)
    $end            reduce using rule 141 (action_statement -> action SEMI .)


state 106

    (122) operator2 -> arithmetic_additive_operator .

    MINUS           reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    NOT             reduce using rule 122 (operator2 -> arithmetic_additive_operator .)
    ICONST          reduce using rule 122 (operator2 -> arithmetic_additive_operator .)


state 107

    (123) operator2 -> string_concatenation_operator .

    MINUS           reduce using rule 123 (operator2 -> string_concatenation_operator .)
    NOT             reduce using rule 123 (operator2 -> string_concatenation_operator .)
    ICONST          reduce using rule 123 (operator2 -> string_concatenation_operator .)


state 108

    (121) operand1 -> operand1 operator2 . operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    monadic_operator               shift and go to state 55
    operand3                       shift and go to state 53
    operand2                       shift and go to state 206
    integer_literal                shift and go to state 57

state 109

    (111) relational_operator -> AND .

    MINUS           reduce using rule 111 (relational_operator -> AND .)
    NOT             reduce using rule 111 (relational_operator -> AND .)
    ICONST          reduce using rule 111 (relational_operator -> AND .)


state 110

    (115) relational_operator -> GT .

    MINUS           reduce using rule 115 (relational_operator -> GT .)
    NOT             reduce using rule 115 (relational_operator -> GT .)
    ICONST          reduce using rule 115 (relational_operator -> GT .)


state 111

    (108) operand0 -> operand0 operator1 . operand1
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand1                       shift and go to state 207
    operand3                       shift and go to state 53
    operand2                       shift and go to state 54
    monadic_operator               shift and go to state 55
    integer_literal                shift and go to state 57

state 112

    (110) operator1 -> membership_operator .

    MINUS           reduce using rule 110 (operator1 -> membership_operator .)
    NOT             reduce using rule 110 (operator1 -> membership_operator .)
    ICONST          reduce using rule 110 (operator1 -> membership_operator .)


state 113

    (117) relational_operator -> LT .

    MINUS           reduce using rule 117 (relational_operator -> LT .)
    NOT             reduce using rule 117 (relational_operator -> LT .)
    ICONST          reduce using rule 117 (relational_operator -> LT .)


state 114

    (116) relational_operator -> GE .

    MINUS           reduce using rule 116 (relational_operator -> GE .)
    NOT             reduce using rule 116 (relational_operator -> GE .)
    ICONST          reduce using rule 116 (relational_operator -> GE .)


state 115

    (118) relational_operator -> LE .

    MINUS           reduce using rule 118 (relational_operator -> LE .)
    NOT             reduce using rule 118 (relational_operator -> LE .)
    ICONST          reduce using rule 118 (relational_operator -> LE .)


state 116

    (119) membership_operator -> IN .

    MINUS           reduce using rule 119 (membership_operator -> IN .)
    NOT             reduce using rule 119 (membership_operator -> IN .)
    ICONST          reduce using rule 119 (membership_operator -> IN .)


state 117

    (114) relational_operator -> NEQ .

    MINUS           reduce using rule 114 (relational_operator -> NEQ .)
    NOT             reduce using rule 114 (relational_operator -> NEQ .)
    ICONST          reduce using rule 114 (relational_operator -> NEQ .)


state 118

    (113) relational_operator -> EQ .

    MINUS           reduce using rule 113 (relational_operator -> EQ .)
    NOT             reduce using rule 113 (relational_operator -> EQ .)
    ICONST          reduce using rule 113 (relational_operator -> EQ .)


state 119

    (112) relational_operator -> OR .

    MINUS           reduce using rule 112 (relational_operator -> OR .)
    NOT             reduce using rule 112 (relational_operator -> OR .)
    ICONST          reduce using rule 112 (relational_operator -> OR .)


state 120

    (109) operator1 -> relational_operator .

    MINUS           reduce using rule 109 (operator1 -> relational_operator .)
    NOT             reduce using rule 109 (operator1 -> relational_operator .)
    ICONST          reduce using rule 109 (operator1 -> relational_operator .)


state 121

    (128) operand2 -> operand2 arithmetic_multiplicative_operator . operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    monadic_operator               shift and go to state 55
    operand3                       shift and go to state 208
    integer_literal                shift and go to state 57

state 122

    (97) parenthesized_expression -> LPAREN . expression RPAREN
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 209
    integer_literal                shift and go to state 57

state 123

    (86) literal -> empty_literal .

    TIMES           reduce using rule 86 (literal -> empty_literal .)
    DIVIDE          reduce using rule 86 (literal -> empty_literal .)
    MOD             reduce using rule 86 (literal -> empty_literal .)
    PLUS            reduce using rule 86 (literal -> empty_literal .)
    MINUS           reduce using rule 86 (literal -> empty_literal .)
    CONCAT          reduce using rule 86 (literal -> empty_literal .)
    AND             reduce using rule 86 (literal -> empty_literal .)
    OR              reduce using rule 86 (literal -> empty_literal .)
    EQ              reduce using rule 86 (literal -> empty_literal .)
    NEQ             reduce using rule 86 (literal -> empty_literal .)
    GT              reduce using rule 86 (literal -> empty_literal .)
    GE              reduce using rule 86 (literal -> empty_literal .)
    LT              reduce using rule 86 (literal -> empty_literal .)
    LE              reduce using rule 86 (literal -> empty_literal .)
    IN              reduce using rule 86 (literal -> empty_literal .)
    SEMI            reduce using rule 86 (literal -> empty_literal .)
    THEN            reduce using rule 86 (literal -> empty_literal .)
    RBRACKET        reduce using rule 86 (literal -> empty_literal .)
    COMMA           reduce using rule 86 (literal -> empty_literal .)
    RPAREN          reduce using rule 86 (literal -> empty_literal .)
    COLON           reduce using rule 86 (literal -> empty_literal .)
    ELSE            reduce using rule 86 (literal -> empty_literal .)
    ELSIF           reduce using rule 86 (literal -> empty_literal .)
    DOWN            reduce using rule 86 (literal -> empty_literal .)
    BY              reduce using rule 86 (literal -> empty_literal .)
    TO              reduce using rule 86 (literal -> empty_literal .)
    FI              reduce using rule 86 (literal -> empty_literal .)
    WHILE           reduce using rule 86 (literal -> empty_literal .)
    LBRACKET        reduce using rule 86 (literal -> empty_literal .)


state 124

    (84) literal -> boolean_literal .

    TIMES           reduce using rule 84 (literal -> boolean_literal .)
    DIVIDE          reduce using rule 84 (literal -> boolean_literal .)
    MOD             reduce using rule 84 (literal -> boolean_literal .)
    PLUS            reduce using rule 84 (literal -> boolean_literal .)
    MINUS           reduce using rule 84 (literal -> boolean_literal .)
    CONCAT          reduce using rule 84 (literal -> boolean_literal .)
    AND             reduce using rule 84 (literal -> boolean_literal .)
    OR              reduce using rule 84 (literal -> boolean_literal .)
    EQ              reduce using rule 84 (literal -> boolean_literal .)
    NEQ             reduce using rule 84 (literal -> boolean_literal .)
    GT              reduce using rule 84 (literal -> boolean_literal .)
    GE              reduce using rule 84 (literal -> boolean_literal .)
    LT              reduce using rule 84 (literal -> boolean_literal .)
    LE              reduce using rule 84 (literal -> boolean_literal .)
    IN              reduce using rule 84 (literal -> boolean_literal .)
    SEMI            reduce using rule 84 (literal -> boolean_literal .)
    THEN            reduce using rule 84 (literal -> boolean_literal .)
    RBRACKET        reduce using rule 84 (literal -> boolean_literal .)
    COMMA           reduce using rule 84 (literal -> boolean_literal .)
    RPAREN          reduce using rule 84 (literal -> boolean_literal .)
    COLON           reduce using rule 84 (literal -> boolean_literal .)
    ELSE            reduce using rule 84 (literal -> boolean_literal .)
    ELSIF           reduce using rule 84 (literal -> boolean_literal .)
    DOWN            reduce using rule 84 (literal -> boolean_literal .)
    BY              reduce using rule 84 (literal -> boolean_literal .)
    TO              reduce using rule 84 (literal -> boolean_literal .)
    FI              reduce using rule 84 (literal -> boolean_literal .)
    WHILE           reduce using rule 84 (literal -> boolean_literal .)
    LBRACKET        reduce using rule 84 (literal -> boolean_literal .)


state 125

    (93) character_string_literal -> SCONST .

    TIMES           reduce using rule 93 (character_string_literal -> SCONST .)
    DIVIDE          reduce using rule 93 (character_string_literal -> SCONST .)
    MOD             reduce using rule 93 (character_string_literal -> SCONST .)
    PLUS            reduce using rule 93 (character_string_literal -> SCONST .)
    MINUS           reduce using rule 93 (character_string_literal -> SCONST .)
    CONCAT          reduce using rule 93 (character_string_literal -> SCONST .)
    AND             reduce using rule 93 (character_string_literal -> SCONST .)
    OR              reduce using rule 93 (character_string_literal -> SCONST .)
    EQ              reduce using rule 93 (character_string_literal -> SCONST .)
    NEQ             reduce using rule 93 (character_string_literal -> SCONST .)
    GT              reduce using rule 93 (character_string_literal -> SCONST .)
    GE              reduce using rule 93 (character_string_literal -> SCONST .)
    LT              reduce using rule 93 (character_string_literal -> SCONST .)
    LE              reduce using rule 93 (character_string_literal -> SCONST .)
    IN              reduce using rule 93 (character_string_literal -> SCONST .)
    SEMI            reduce using rule 93 (character_string_literal -> SCONST .)
    THEN            reduce using rule 93 (character_string_literal -> SCONST .)
    RBRACKET        reduce using rule 93 (character_string_literal -> SCONST .)
    COMMA           reduce using rule 93 (character_string_literal -> SCONST .)
    RPAREN          reduce using rule 93 (character_string_literal -> SCONST .)
    COLON           reduce using rule 93 (character_string_literal -> SCONST .)
    ELSE            reduce using rule 93 (character_string_literal -> SCONST .)
    ELSIF           reduce using rule 93 (character_string_literal -> SCONST .)
    DOWN            reduce using rule 93 (character_string_literal -> SCONST .)
    BY              reduce using rule 93 (character_string_literal -> SCONST .)
    TO              reduce using rule 93 (character_string_literal -> SCONST .)
    FI              reduce using rule 93 (character_string_literal -> SCONST .)
    WHILE           reduce using rule 93 (character_string_literal -> SCONST .)
    LBRACKET        reduce using rule 93 (character_string_literal -> SCONST .)


state 126

    (92) empty_literal -> NULL .

    TIMES           reduce using rule 92 (empty_literal -> NULL .)
    DIVIDE          reduce using rule 92 (empty_literal -> NULL .)
    MOD             reduce using rule 92 (empty_literal -> NULL .)
    PLUS            reduce using rule 92 (empty_literal -> NULL .)
    MINUS           reduce using rule 92 (empty_literal -> NULL .)
    CONCAT          reduce using rule 92 (empty_literal -> NULL .)
    AND             reduce using rule 92 (empty_literal -> NULL .)
    OR              reduce using rule 92 (empty_literal -> NULL .)
    EQ              reduce using rule 92 (empty_literal -> NULL .)
    NEQ             reduce using rule 92 (empty_literal -> NULL .)
    GT              reduce using rule 92 (empty_literal -> NULL .)
    GE              reduce using rule 92 (empty_literal -> NULL .)
    LT              reduce using rule 92 (empty_literal -> NULL .)
    LE              reduce using rule 92 (empty_literal -> NULL .)
    IN              reduce using rule 92 (empty_literal -> NULL .)
    SEMI            reduce using rule 92 (empty_literal -> NULL .)
    THEN            reduce using rule 92 (empty_literal -> NULL .)
    RBRACKET        reduce using rule 92 (empty_literal -> NULL .)
    COMMA           reduce using rule 92 (empty_literal -> NULL .)
    RPAREN          reduce using rule 92 (empty_literal -> NULL .)
    COLON           reduce using rule 92 (empty_literal -> NULL .)
    ELSE            reduce using rule 92 (empty_literal -> NULL .)
    ELSIF           reduce using rule 92 (empty_literal -> NULL .)
    DOWN            reduce using rule 92 (empty_literal -> NULL .)
    BY              reduce using rule 92 (empty_literal -> NULL .)
    TO              reduce using rule 92 (empty_literal -> NULL .)
    FI              reduce using rule 92 (empty_literal -> NULL .)
    WHILE           reduce using rule 92 (empty_literal -> NULL .)
    LBRACKET        reduce using rule 92 (empty_literal -> NULL .)


state 127

    (90) boolean_literal -> TRUE .

    TIMES           reduce using rule 90 (boolean_literal -> TRUE .)
    DIVIDE          reduce using rule 90 (boolean_literal -> TRUE .)
    MOD             reduce using rule 90 (boolean_literal -> TRUE .)
    PLUS            reduce using rule 90 (boolean_literal -> TRUE .)
    MINUS           reduce using rule 90 (boolean_literal -> TRUE .)
    CONCAT          reduce using rule 90 (boolean_literal -> TRUE .)
    AND             reduce using rule 90 (boolean_literal -> TRUE .)
    OR              reduce using rule 90 (boolean_literal -> TRUE .)
    EQ              reduce using rule 90 (boolean_literal -> TRUE .)
    NEQ             reduce using rule 90 (boolean_literal -> TRUE .)
    GT              reduce using rule 90 (boolean_literal -> TRUE .)
    GE              reduce using rule 90 (boolean_literal -> TRUE .)
    LT              reduce using rule 90 (boolean_literal -> TRUE .)
    LE              reduce using rule 90 (boolean_literal -> TRUE .)
    IN              reduce using rule 90 (boolean_literal -> TRUE .)
    SEMI            reduce using rule 90 (boolean_literal -> TRUE .)
    THEN            reduce using rule 90 (boolean_literal -> TRUE .)
    RBRACKET        reduce using rule 90 (boolean_literal -> TRUE .)
    COMMA           reduce using rule 90 (boolean_literal -> TRUE .)
    RPAREN          reduce using rule 90 (boolean_literal -> TRUE .)
    COLON           reduce using rule 90 (boolean_literal -> TRUE .)
    ELSE            reduce using rule 90 (boolean_literal -> TRUE .)
    ELSIF           reduce using rule 90 (boolean_literal -> TRUE .)
    DOWN            reduce using rule 90 (boolean_literal -> TRUE .)
    BY              reduce using rule 90 (boolean_literal -> TRUE .)
    TO              reduce using rule 90 (boolean_literal -> TRUE .)
    FI              reduce using rule 90 (boolean_literal -> TRUE .)
    WHILE           reduce using rule 90 (boolean_literal -> TRUE .)
    LBRACKET        reduce using rule 90 (boolean_literal -> TRUE .)


state 128

    (80) primitive_value -> value_array_element .

    TIMES           reduce using rule 80 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 80 (primitive_value -> value_array_element .)
    MOD             reduce using rule 80 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 80 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 80 (primitive_value -> value_array_element .)
    CONCAT          reduce using rule 80 (primitive_value -> value_array_element .)
    AND             reduce using rule 80 (primitive_value -> value_array_element .)
    OR              reduce using rule 80 (primitive_value -> value_array_element .)
    EQ              reduce using rule 80 (primitive_value -> value_array_element .)
    NEQ             reduce using rule 80 (primitive_value -> value_array_element .)
    GT              reduce using rule 80 (primitive_value -> value_array_element .)
    GE              reduce using rule 80 (primitive_value -> value_array_element .)
    LT              reduce using rule 80 (primitive_value -> value_array_element .)
    LE              reduce using rule 80 (primitive_value -> value_array_element .)
    IN              reduce using rule 80 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 80 (primitive_value -> value_array_element .)
    THEN            reduce using rule 80 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 80 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 80 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 80 (primitive_value -> value_array_element .)
    COLON           reduce using rule 80 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 80 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 80 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 80 (primitive_value -> value_array_element .)
    BY              reduce using rule 80 (primitive_value -> value_array_element .)
    TO              reduce using rule 80 (primitive_value -> value_array_element .)
    FI              reduce using rule 80 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 80 (primitive_value -> value_array_element .)
    LBRACKET        reduce using rule 80 (primitive_value -> value_array_element .)


state 129

    (132) operand3 -> monadic_operator operand4 .

    TIMES           reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    DIVIDE          reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    MOD             reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    PLUS            reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    MINUS           reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    CONCAT          reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    AND             reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    OR              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    EQ              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    NEQ             reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    GT              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    GE              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    LT              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    LE              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    IN              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    RPAREN          reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    COMMA           reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    SEMI            reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    THEN            reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    RBRACKET        reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    ELSE            reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    ELSIF           reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    COLON           reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    DOWN            reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    BY              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    TO              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    FI              reduce using rule 132 (operand3 -> monadic_operator operand4 .)
    WHILE           reduce using rule 132 (operand3 -> monadic_operator operand4 .)


state 130

    (89) boolean_literal -> FALSE .

    TIMES           reduce using rule 89 (boolean_literal -> FALSE .)
    DIVIDE          reduce using rule 89 (boolean_literal -> FALSE .)
    MOD             reduce using rule 89 (boolean_literal -> FALSE .)
    PLUS            reduce using rule 89 (boolean_literal -> FALSE .)
    MINUS           reduce using rule 89 (boolean_literal -> FALSE .)
    CONCAT          reduce using rule 89 (boolean_literal -> FALSE .)
    AND             reduce using rule 89 (boolean_literal -> FALSE .)
    OR              reduce using rule 89 (boolean_literal -> FALSE .)
    EQ              reduce using rule 89 (boolean_literal -> FALSE .)
    NEQ             reduce using rule 89 (boolean_literal -> FALSE .)
    GT              reduce using rule 89 (boolean_literal -> FALSE .)
    GE              reduce using rule 89 (boolean_literal -> FALSE .)
    LT              reduce using rule 89 (boolean_literal -> FALSE .)
    LE              reduce using rule 89 (boolean_literal -> FALSE .)
    IN              reduce using rule 89 (boolean_literal -> FALSE .)
    SEMI            reduce using rule 89 (boolean_literal -> FALSE .)
    THEN            reduce using rule 89 (boolean_literal -> FALSE .)
    RBRACKET        reduce using rule 89 (boolean_literal -> FALSE .)
    COMMA           reduce using rule 89 (boolean_literal -> FALSE .)
    RPAREN          reduce using rule 89 (boolean_literal -> FALSE .)
    COLON           reduce using rule 89 (boolean_literal -> FALSE .)
    ELSE            reduce using rule 89 (boolean_literal -> FALSE .)
    ELSIF           reduce using rule 89 (boolean_literal -> FALSE .)
    DOWN            reduce using rule 89 (boolean_literal -> FALSE .)
    BY              reduce using rule 89 (boolean_literal -> FALSE .)
    TO              reduce using rule 89 (boolean_literal -> FALSE .)
    FI              reduce using rule 89 (boolean_literal -> FALSE .)
    WHILE           reduce using rule 89 (boolean_literal -> FALSE .)
    LBRACKET        reduce using rule 89 (boolean_literal -> FALSE .)


state 131

    (83) literal -> integer_literal .

    TIMES           reduce using rule 83 (literal -> integer_literal .)
    DIVIDE          reduce using rule 83 (literal -> integer_literal .)
    MOD             reduce using rule 83 (literal -> integer_literal .)
    PLUS            reduce using rule 83 (literal -> integer_literal .)
    MINUS           reduce using rule 83 (literal -> integer_literal .)
    CONCAT          reduce using rule 83 (literal -> integer_literal .)
    AND             reduce using rule 83 (literal -> integer_literal .)
    OR              reduce using rule 83 (literal -> integer_literal .)
    EQ              reduce using rule 83 (literal -> integer_literal .)
    NEQ             reduce using rule 83 (literal -> integer_literal .)
    GT              reduce using rule 83 (literal -> integer_literal .)
    GE              reduce using rule 83 (literal -> integer_literal .)
    LT              reduce using rule 83 (literal -> integer_literal .)
    LE              reduce using rule 83 (literal -> integer_literal .)
    IN              reduce using rule 83 (literal -> integer_literal .)
    SEMI            reduce using rule 83 (literal -> integer_literal .)
    THEN            reduce using rule 83 (literal -> integer_literal .)
    RBRACKET        reduce using rule 83 (literal -> integer_literal .)
    COMMA           reduce using rule 83 (literal -> integer_literal .)
    RPAREN          reduce using rule 83 (literal -> integer_literal .)
    COLON           reduce using rule 83 (literal -> integer_literal .)
    ELSE            reduce using rule 83 (literal -> integer_literal .)
    ELSIF           reduce using rule 83 (literal -> integer_literal .)
    DOWN            reduce using rule 83 (literal -> integer_literal .)
    BY              reduce using rule 83 (literal -> integer_literal .)
    TO              reduce using rule 83 (literal -> integer_literal .)
    FI              reduce using rule 83 (literal -> integer_literal .)
    WHILE           reduce using rule 83 (literal -> integer_literal .)
    LBRACKET        reduce using rule 83 (literal -> integer_literal .)


state 132

    (79) primitive_value -> literal .

    TIMES           reduce using rule 79 (primitive_value -> literal .)
    DIVIDE          reduce using rule 79 (primitive_value -> literal .)
    MOD             reduce using rule 79 (primitive_value -> literal .)
    PLUS            reduce using rule 79 (primitive_value -> literal .)
    MINUS           reduce using rule 79 (primitive_value -> literal .)
    CONCAT          reduce using rule 79 (primitive_value -> literal .)
    AND             reduce using rule 79 (primitive_value -> literal .)
    OR              reduce using rule 79 (primitive_value -> literal .)
    EQ              reduce using rule 79 (primitive_value -> literal .)
    NEQ             reduce using rule 79 (primitive_value -> literal .)
    GT              reduce using rule 79 (primitive_value -> literal .)
    GE              reduce using rule 79 (primitive_value -> literal .)
    LT              reduce using rule 79 (primitive_value -> literal .)
    LE              reduce using rule 79 (primitive_value -> literal .)
    IN              reduce using rule 79 (primitive_value -> literal .)
    SEMI            reduce using rule 79 (primitive_value -> literal .)
    THEN            reduce using rule 79 (primitive_value -> literal .)
    RBRACKET        reduce using rule 79 (primitive_value -> literal .)
    COMMA           reduce using rule 79 (primitive_value -> literal .)
    RPAREN          reduce using rule 79 (primitive_value -> literal .)
    COLON           reduce using rule 79 (primitive_value -> literal .)
    ELSE            reduce using rule 79 (primitive_value -> literal .)
    ELSIF           reduce using rule 79 (primitive_value -> literal .)
    DOWN            reduce using rule 79 (primitive_value -> literal .)
    BY              reduce using rule 79 (primitive_value -> literal .)
    TO              reduce using rule 79 (primitive_value -> literal .)
    FI              reduce using rule 79 (primitive_value -> literal .)
    WHILE           reduce using rule 79 (primitive_value -> literal .)
    LBRACKET        reduce using rule 79 (primitive_value -> literal .)


state 133

    (136) operand4 -> location .
    (65) dereferenced_reference -> location . ARROW
    (76) array_location -> location .

    TIMES           reduce using rule 136 (operand4 -> location .)
    DIVIDE          reduce using rule 136 (operand4 -> location .)
    MOD             reduce using rule 136 (operand4 -> location .)
    PLUS            reduce using rule 136 (operand4 -> location .)
    MINUS           reduce using rule 136 (operand4 -> location .)
    CONCAT          reduce using rule 136 (operand4 -> location .)
    AND             reduce using rule 136 (operand4 -> location .)
    OR              reduce using rule 136 (operand4 -> location .)
    EQ              reduce using rule 136 (operand4 -> location .)
    NEQ             reduce using rule 136 (operand4 -> location .)
    GT              reduce using rule 136 (operand4 -> location .)
    GE              reduce using rule 136 (operand4 -> location .)
    LT              reduce using rule 136 (operand4 -> location .)
    LE              reduce using rule 136 (operand4 -> location .)
    IN              reduce using rule 136 (operand4 -> location .)
    SEMI            reduce using rule 136 (operand4 -> location .)
    THEN            reduce using rule 136 (operand4 -> location .)
    RBRACKET        reduce using rule 136 (operand4 -> location .)
    COMMA           reduce using rule 136 (operand4 -> location .)
    RPAREN          reduce using rule 136 (operand4 -> location .)
    COLON           reduce using rule 136 (operand4 -> location .)
    ELSE            reduce using rule 136 (operand4 -> location .)
    ELSIF           reduce using rule 136 (operand4 -> location .)
    DOWN            reduce using rule 136 (operand4 -> location .)
    BY              reduce using rule 136 (operand4 -> location .)
    TO              reduce using rule 136 (operand4 -> location .)
    FI              reduce using rule 136 (operand4 -> location .)
    WHILE           reduce using rule 136 (operand4 -> location .)
    ARROW           shift and go to state 86
    LBRACKET        reduce using rule 76 (array_location -> location .)


state 134

    (64) location -> call_action .

    ARROW           reduce using rule 64 (location -> call_action .)
    TIMES           reduce using rule 64 (location -> call_action .)
    DIVIDE          reduce using rule 64 (location -> call_action .)
    MOD             reduce using rule 64 (location -> call_action .)
    PLUS            reduce using rule 64 (location -> call_action .)
    MINUS           reduce using rule 64 (location -> call_action .)
    CONCAT          reduce using rule 64 (location -> call_action .)
    AND             reduce using rule 64 (location -> call_action .)
    OR              reduce using rule 64 (location -> call_action .)
    EQ              reduce using rule 64 (location -> call_action .)
    NEQ             reduce using rule 64 (location -> call_action .)
    GT              reduce using rule 64 (location -> call_action .)
    GE              reduce using rule 64 (location -> call_action .)
    LT              reduce using rule 64 (location -> call_action .)
    LE              reduce using rule 64 (location -> call_action .)
    IN              reduce using rule 64 (location -> call_action .)
    SEMI            reduce using rule 64 (location -> call_action .)
    THEN            reduce using rule 64 (location -> call_action .)
    RBRACKET        reduce using rule 64 (location -> call_action .)
    COMMA           reduce using rule 64 (location -> call_action .)
    RPAREN          reduce using rule 64 (location -> call_action .)
    COLON           reduce using rule 64 (location -> call_action .)
    ELSE            reduce using rule 64 (location -> call_action .)
    ELSIF           reduce using rule 64 (location -> call_action .)
    DOWN            reduce using rule 64 (location -> call_action .)
    BY              reduce using rule 64 (location -> call_action .)
    TO              reduce using rule 64 (location -> call_action .)
    FI              reduce using rule 64 (location -> call_action .)
    WHILE           reduce using rule 64 (location -> call_action .)
    LBRACKET        reduce using rule 64 (location -> call_action .)


state 135

    (137) operand4 -> referenced_location .

    TIMES           reduce using rule 137 (operand4 -> referenced_location .)
    DIVIDE          reduce using rule 137 (operand4 -> referenced_location .)
    MOD             reduce using rule 137 (operand4 -> referenced_location .)
    PLUS            reduce using rule 137 (operand4 -> referenced_location .)
    MINUS           reduce using rule 137 (operand4 -> referenced_location .)
    CONCAT          reduce using rule 137 (operand4 -> referenced_location .)
    AND             reduce using rule 137 (operand4 -> referenced_location .)
    OR              reduce using rule 137 (operand4 -> referenced_location .)
    EQ              reduce using rule 137 (operand4 -> referenced_location .)
    NEQ             reduce using rule 137 (operand4 -> referenced_location .)
    GT              reduce using rule 137 (operand4 -> referenced_location .)
    GE              reduce using rule 137 (operand4 -> referenced_location .)
    LT              reduce using rule 137 (operand4 -> referenced_location .)
    LE              reduce using rule 137 (operand4 -> referenced_location .)
    IN              reduce using rule 137 (operand4 -> referenced_location .)
    SEMI            reduce using rule 137 (operand4 -> referenced_location .)
    THEN            reduce using rule 137 (operand4 -> referenced_location .)
    RBRACKET        reduce using rule 137 (operand4 -> referenced_location .)
    COMMA           reduce using rule 137 (operand4 -> referenced_location .)
    RPAREN          reduce using rule 137 (operand4 -> referenced_location .)
    COLON           reduce using rule 137 (operand4 -> referenced_location .)
    ELSE            reduce using rule 137 (operand4 -> referenced_location .)
    ELSIF           reduce using rule 137 (operand4 -> referenced_location .)
    DOWN            reduce using rule 137 (operand4 -> referenced_location .)
    BY              reduce using rule 137 (operand4 -> referenced_location .)
    TO              reduce using rule 137 (operand4 -> referenced_location .)
    FI              reduce using rule 137 (operand4 -> referenced_location .)
    WHILE           reduce using rule 137 (operand4 -> referenced_location .)


state 136

    (91) character_literal -> CCONST .

    TIMES           reduce using rule 91 (character_literal -> CCONST .)
    DIVIDE          reduce using rule 91 (character_literal -> CCONST .)
    MOD             reduce using rule 91 (character_literal -> CCONST .)
    PLUS            reduce using rule 91 (character_literal -> CCONST .)
    MINUS           reduce using rule 91 (character_literal -> CCONST .)
    CONCAT          reduce using rule 91 (character_literal -> CCONST .)
    AND             reduce using rule 91 (character_literal -> CCONST .)
    OR              reduce using rule 91 (character_literal -> CCONST .)
    EQ              reduce using rule 91 (character_literal -> CCONST .)
    NEQ             reduce using rule 91 (character_literal -> CCONST .)
    GT              reduce using rule 91 (character_literal -> CCONST .)
    GE              reduce using rule 91 (character_literal -> CCONST .)
    LT              reduce using rule 91 (character_literal -> CCONST .)
    LE              reduce using rule 91 (character_literal -> CCONST .)
    IN              reduce using rule 91 (character_literal -> CCONST .)
    SEMI            reduce using rule 91 (character_literal -> CCONST .)
    THEN            reduce using rule 91 (character_literal -> CCONST .)
    RBRACKET        reduce using rule 91 (character_literal -> CCONST .)
    COMMA           reduce using rule 91 (character_literal -> CCONST .)
    RPAREN          reduce using rule 91 (character_literal -> CCONST .)
    COLON           reduce using rule 91 (character_literal -> CCONST .)
    ELSE            reduce using rule 91 (character_literal -> CCONST .)
    ELSIF           reduce using rule 91 (character_literal -> CCONST .)
    DOWN            reduce using rule 91 (character_literal -> CCONST .)
    BY              reduce using rule 91 (character_literal -> CCONST .)
    TO              reduce using rule 91 (character_literal -> CCONST .)
    FI              reduce using rule 91 (character_literal -> CCONST .)
    WHILE           reduce using rule 91 (character_literal -> CCONST .)
    LBRACKET        reduce using rule 91 (character_literal -> CCONST .)


state 137

    (94) value_array_element -> array_primitive_value . LBRACKET expression_list RBRACKET
    (95) value_array_slice -> array_primitive_value . LBRACKET lower_element COLON upper_element RBRACKET

    LBRACKET        shift and go to state 210


state 138

    (139) referenced_location -> ARROW . location
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (17) identifier -> . ID
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (69) string_location -> . identifier
    (76) array_location -> . location
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT

    ID              shift and go to state 36
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    string_element                 shift and go to state 16
    procedure_name                 shift and go to state 29
    dereferenced_reference         shift and go to state 39
    array_slice                    shift and go to state 45
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    location                       shift and go to state 211
    call_action                    shift and go to state 134
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    string_location                shift and go to state 6
    identifier                     shift and go to state 143
    builtin_call                   shift and go to state 28

state 139

    (82) primitive_value -> parenthesized_expression .

    TIMES           reduce using rule 82 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 82 (primitive_value -> parenthesized_expression .)
    MOD             reduce using rule 82 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 82 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 82 (primitive_value -> parenthesized_expression .)
    CONCAT          reduce using rule 82 (primitive_value -> parenthesized_expression .)
    AND             reduce using rule 82 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    EQ              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    NEQ             reduce using rule 82 (primitive_value -> parenthesized_expression .)
    GT              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    GE              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    LT              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    LE              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 82 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 82 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 82 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 82 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 82 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 82 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 82 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 82 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 82 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 82 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 82 (primitive_value -> parenthesized_expression .)
    LBRACKET        reduce using rule 82 (primitive_value -> parenthesized_expression .)


state 140

    (87) literal -> character_string_literal .

    TIMES           reduce using rule 87 (literal -> character_string_literal .)
    DIVIDE          reduce using rule 87 (literal -> character_string_literal .)
    MOD             reduce using rule 87 (literal -> character_string_literal .)
    PLUS            reduce using rule 87 (literal -> character_string_literal .)
    MINUS           reduce using rule 87 (literal -> character_string_literal .)
    CONCAT          reduce using rule 87 (literal -> character_string_literal .)
    AND             reduce using rule 87 (literal -> character_string_literal .)
    OR              reduce using rule 87 (literal -> character_string_literal .)
    EQ              reduce using rule 87 (literal -> character_string_literal .)
    NEQ             reduce using rule 87 (literal -> character_string_literal .)
    GT              reduce using rule 87 (literal -> character_string_literal .)
    GE              reduce using rule 87 (literal -> character_string_literal .)
    LT              reduce using rule 87 (literal -> character_string_literal .)
    LE              reduce using rule 87 (literal -> character_string_literal .)
    IN              reduce using rule 87 (literal -> character_string_literal .)
    SEMI            reduce using rule 87 (literal -> character_string_literal .)
    THEN            reduce using rule 87 (literal -> character_string_literal .)
    RBRACKET        reduce using rule 87 (literal -> character_string_literal .)
    COMMA           reduce using rule 87 (literal -> character_string_literal .)
    RPAREN          reduce using rule 87 (literal -> character_string_literal .)
    COLON           reduce using rule 87 (literal -> character_string_literal .)
    ELSE            reduce using rule 87 (literal -> character_string_literal .)
    ELSIF           reduce using rule 87 (literal -> character_string_literal .)
    DOWN            reduce using rule 87 (literal -> character_string_literal .)
    BY              reduce using rule 87 (literal -> character_string_literal .)
    TO              reduce using rule 87 (literal -> character_string_literal .)
    FI              reduce using rule 87 (literal -> character_string_literal .)
    WHILE           reduce using rule 87 (literal -> character_string_literal .)
    LBRACKET        reduce using rule 87 (literal -> character_string_literal .)


state 141

    (81) primitive_value -> value_array_slice .

    TIMES           reduce using rule 81 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 81 (primitive_value -> value_array_slice .)
    MOD             reduce using rule 81 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 81 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 81 (primitive_value -> value_array_slice .)
    CONCAT          reduce using rule 81 (primitive_value -> value_array_slice .)
    AND             reduce using rule 81 (primitive_value -> value_array_slice .)
    OR              reduce using rule 81 (primitive_value -> value_array_slice .)
    EQ              reduce using rule 81 (primitive_value -> value_array_slice .)
    NEQ             reduce using rule 81 (primitive_value -> value_array_slice .)
    GT              reduce using rule 81 (primitive_value -> value_array_slice .)
    GE              reduce using rule 81 (primitive_value -> value_array_slice .)
    LT              reduce using rule 81 (primitive_value -> value_array_slice .)
    LE              reduce using rule 81 (primitive_value -> value_array_slice .)
    IN              reduce using rule 81 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 81 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 81 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 81 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 81 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 81 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 81 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 81 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 81 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 81 (primitive_value -> value_array_slice .)
    BY              reduce using rule 81 (primitive_value -> value_array_slice .)
    TO              reduce using rule 81 (primitive_value -> value_array_slice .)
    FI              reduce using rule 81 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 81 (primitive_value -> value_array_slice .)
    LBRACKET        reduce using rule 81 (primitive_value -> value_array_slice .)


state 142

    (85) literal -> character_literal .

    TIMES           reduce using rule 85 (literal -> character_literal .)
    DIVIDE          reduce using rule 85 (literal -> character_literal .)
    MOD             reduce using rule 85 (literal -> character_literal .)
    PLUS            reduce using rule 85 (literal -> character_literal .)
    MINUS           reduce using rule 85 (literal -> character_literal .)
    CONCAT          reduce using rule 85 (literal -> character_literal .)
    AND             reduce using rule 85 (literal -> character_literal .)
    OR              reduce using rule 85 (literal -> character_literal .)
    EQ              reduce using rule 85 (literal -> character_literal .)
    NEQ             reduce using rule 85 (literal -> character_literal .)
    GT              reduce using rule 85 (literal -> character_literal .)
    GE              reduce using rule 85 (literal -> character_literal .)
    LT              reduce using rule 85 (literal -> character_literal .)
    LE              reduce using rule 85 (literal -> character_literal .)
    IN              reduce using rule 85 (literal -> character_literal .)
    SEMI            reduce using rule 85 (literal -> character_literal .)
    THEN            reduce using rule 85 (literal -> character_literal .)
    RBRACKET        reduce using rule 85 (literal -> character_literal .)
    COMMA           reduce using rule 85 (literal -> character_literal .)
    RPAREN          reduce using rule 85 (literal -> character_literal .)
    COLON           reduce using rule 85 (literal -> character_literal .)
    ELSE            reduce using rule 85 (literal -> character_literal .)
    ELSIF           reduce using rule 85 (literal -> character_literal .)
    DOWN            reduce using rule 85 (literal -> character_literal .)
    BY              reduce using rule 85 (literal -> character_literal .)
    TO              reduce using rule 85 (literal -> character_literal .)
    FI              reduce using rule 85 (literal -> character_literal .)
    WHILE           reduce using rule 85 (literal -> character_literal .)
    LBRACKET        reduce using rule 85 (literal -> character_literal .)


state 143

    (58) location -> identifier .
    (69) string_location -> identifier .
    (190) procedure_name -> identifier .

  ! reduce/reduce conflict for LBRACKET resolved using rule 58 (location -> identifier .)
    ARROW           reduce using rule 58 (location -> identifier .)
    TIMES           reduce using rule 58 (location -> identifier .)
    DIVIDE          reduce using rule 58 (location -> identifier .)
    MOD             reduce using rule 58 (location -> identifier .)
    PLUS            reduce using rule 58 (location -> identifier .)
    MINUS           reduce using rule 58 (location -> identifier .)
    CONCAT          reduce using rule 58 (location -> identifier .)
    AND             reduce using rule 58 (location -> identifier .)
    OR              reduce using rule 58 (location -> identifier .)
    EQ              reduce using rule 58 (location -> identifier .)
    NEQ             reduce using rule 58 (location -> identifier .)
    GT              reduce using rule 58 (location -> identifier .)
    GE              reduce using rule 58 (location -> identifier .)
    LT              reduce using rule 58 (location -> identifier .)
    LE              reduce using rule 58 (location -> identifier .)
    IN              reduce using rule 58 (location -> identifier .)
    SEMI            reduce using rule 58 (location -> identifier .)
    THEN            reduce using rule 58 (location -> identifier .)
    RBRACKET        reduce using rule 58 (location -> identifier .)
    COMMA           reduce using rule 58 (location -> identifier .)
    RPAREN          reduce using rule 58 (location -> identifier .)
    COLON           reduce using rule 58 (location -> identifier .)
    ELSE            reduce using rule 58 (location -> identifier .)
    ELSIF           reduce using rule 58 (location -> identifier .)
    DOWN            reduce using rule 58 (location -> identifier .)
    BY              reduce using rule 58 (location -> identifier .)
    TO              reduce using rule 58 (location -> identifier .)
    FI              reduce using rule 58 (location -> identifier .)
    WHILE           reduce using rule 58 (location -> identifier .)
    LBRACKET        reduce using rule 58 (location -> identifier .)
    LPAREN          reduce using rule 190 (procedure_name -> identifier .)

  ! LBRACKET        [ reduce using rule 69 (string_location -> identifier .) ]


state 144

    (138) operand4 -> primitive_value .
    (96) array_primitive_value -> primitive_value .

    TIMES           reduce using rule 138 (operand4 -> primitive_value .)
    DIVIDE          reduce using rule 138 (operand4 -> primitive_value .)
    MOD             reduce using rule 138 (operand4 -> primitive_value .)
    PLUS            reduce using rule 138 (operand4 -> primitive_value .)
    MINUS           reduce using rule 138 (operand4 -> primitive_value .)
    CONCAT          reduce using rule 138 (operand4 -> primitive_value .)
    AND             reduce using rule 138 (operand4 -> primitive_value .)
    OR              reduce using rule 138 (operand4 -> primitive_value .)
    EQ              reduce using rule 138 (operand4 -> primitive_value .)
    NEQ             reduce using rule 138 (operand4 -> primitive_value .)
    GT              reduce using rule 138 (operand4 -> primitive_value .)
    GE              reduce using rule 138 (operand4 -> primitive_value .)
    LT              reduce using rule 138 (operand4 -> primitive_value .)
    LE              reduce using rule 138 (operand4 -> primitive_value .)
    IN              reduce using rule 138 (operand4 -> primitive_value .)
    SEMI            reduce using rule 138 (operand4 -> primitive_value .)
    THEN            reduce using rule 138 (operand4 -> primitive_value .)
    RBRACKET        reduce using rule 138 (operand4 -> primitive_value .)
    COMMA           reduce using rule 138 (operand4 -> primitive_value .)
    RPAREN          reduce using rule 138 (operand4 -> primitive_value .)
    COLON           reduce using rule 138 (operand4 -> primitive_value .)
    ELSE            reduce using rule 138 (operand4 -> primitive_value .)
    ELSIF           reduce using rule 138 (operand4 -> primitive_value .)
    DOWN            reduce using rule 138 (operand4 -> primitive_value .)
    BY              reduce using rule 138 (operand4 -> primitive_value .)
    TO              reduce using rule 138 (operand4 -> primitive_value .)
    FI              reduce using rule 138 (operand4 -> primitive_value .)
    WHILE           reduce using rule 138 (operand4 -> primitive_value .)
    LBRACKET        reduce using rule 96 (array_primitive_value -> primitive_value .)


state 145

    (100) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (101) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (103) then_expression -> . THEN expression

    THEN            shift and go to state 212

    then_expression                shift and go to state 213

state 146

    (182) while_control -> WHILE boolean_expression .

    SEMI            reduce using rule 182 (while_control -> WHILE boolean_expression .)


state 147

    (165) do_action -> DO action_statement_list OD .

    SEMI            reduce using rule 165 (do_action -> DO action_statement_list OD .)


state 148

    (212) action_statement_list -> action_statement_list COMMA . action_statement
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    action_statement               shift and go to state 214
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47

state 149

    (164) do_action -> DO control_part SEMI . action_statement_list OD
    (211) action_statement_list -> . action_statement
    (212) action_statement_list -> . action_statement_list COMMA action_statement
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    action_statement_list          shift and go to state 215
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    action_statement               shift and go to state 69
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47

state 150

    (166) control_part -> for_control while_control .

    SEMI            reduce using rule 166 (control_part -> for_control while_control .)


state 151

    (140) action_statement -> label_id COLON . action SEMI
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (17) identifier -> . ID
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    ID              shift and go to state 36
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    location                       shift and go to state 24
    call_action                    shift and go to state 31
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    exit_action                    shift and go to state 34
    dereferenced_reference         shift and go to state 39
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 189
    string_location                shift and go to state 6
    identifier                     shift and go to state 191

state 152

    (170) iteration -> range_enumeration .

    WHILE           reduce using rule 170 (iteration -> range_enumeration .)


state 153

    (171) step_enumeration -> loop_counter . ASSIGN start_value step_value DOWN end_value
    (172) step_enumeration -> loop_counter . ASSIGN start_value DOWN end_value
    (173) step_enumeration -> loop_counter . ASSIGN start_value step_value end_value
    (174) step_enumeration -> loop_counter . ASSIGN start_value end_value
    (180) range_enumeration -> loop_counter . DOWN IN discrete_mode_name
    (181) range_enumeration -> loop_counter . IN discrete_mode_name

    ASSIGN          shift and go to state 218
    DOWN            shift and go to state 216
    IN              shift and go to state 217


state 154

    (168) for_control -> FOR iteration .

    WHILE           reduce using rule 168 (for_control -> FOR iteration .)


state 155

    (169) iteration -> step_enumeration .

    WHILE           reduce using rule 169 (iteration -> step_enumeration .)


state 156

    (175) loop_counter -> identifier .

    ASSIGN          reduce using rule 175 (loop_counter -> identifier .)
    DOWN            reduce using rule 175 (loop_counter -> identifier .)
    IN              reduce using rule 175 (loop_counter -> identifier .)


state 157

    (68) string_slice -> string_location LBRACKET left_element . COLON right_element RBRACKET

    COLON           shift and go to state 219


state 158

    (66) string_element -> string_location LBRACKET start_element . COLON right_element RBRACKET

    COLON           shift and go to state 220


state 159

    (67) start_element -> ICONST .
    (70) left_element -> ICONST .
    (88) integer_literal -> ICONST .

  ! reduce/reduce conflict for COLON resolved using rule 67 (start_element -> ICONST .)
    COLON           reduce using rule 67 (start_element -> ICONST .)
    TIMES           reduce using rule 88 (integer_literal -> ICONST .)
    DIVIDE          reduce using rule 88 (integer_literal -> ICONST .)
    MOD             reduce using rule 88 (integer_literal -> ICONST .)
    PLUS            reduce using rule 88 (integer_literal -> ICONST .)
    MINUS           reduce using rule 88 (integer_literal -> ICONST .)
    CONCAT          reduce using rule 88 (integer_literal -> ICONST .)
    AND             reduce using rule 88 (integer_literal -> ICONST .)
    OR              reduce using rule 88 (integer_literal -> ICONST .)
    EQ              reduce using rule 88 (integer_literal -> ICONST .)
    NEQ             reduce using rule 88 (integer_literal -> ICONST .)
    GT              reduce using rule 88 (integer_literal -> ICONST .)
    GE              reduce using rule 88 (integer_literal -> ICONST .)
    LT              reduce using rule 88 (integer_literal -> ICONST .)
    LE              reduce using rule 88 (integer_literal -> ICONST .)
    IN              reduce using rule 88 (integer_literal -> ICONST .)
    RBRACKET        reduce using rule 88 (integer_literal -> ICONST .)
    COMMA           reduce using rule 88 (integer_literal -> ICONST .)

  ! COLON           [ reduce using rule 70 (left_element -> ICONST .) ]


state 160

    (72) array_element -> string_location LBRACKET expression_list . RBRACKET
    (74) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 222
    COMMA           shift and go to state 221


state 161

    (73) expression_list -> expression .

    RBRACKET        reduce using rule 73 (expression_list -> expression .)
    COMMA           reduce using rule 73 (expression_list -> expression .)


state 162

    (197) builtin_call -> builtin_name LPAREN RPAREN .

    ARROW           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    MOD             reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    CONCAT          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQ              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    NEQ             reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    GT              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    GE              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    LT              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    LE              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    SEMI            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 197 (builtin_call -> builtin_name LPAREN RPAREN .)


state 163

    (187) parameter_list -> parameter .

    RPAREN          reduce using rule 187 (parameter_list -> parameter .)
    COMMA           reduce using rule 187 (parameter_list -> parameter .)


state 164

    (196) builtin_call -> builtin_name LPAREN parameter_list . RPAREN
    (188) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 223
    COMMA           shift and go to state 224


state 165

    (189) parameter -> expression .

    RPAREN          reduce using rule 189 (parameter -> expression .)
    COMMA           reduce using rule 189 (parameter -> expression .)


state 166

    (11) declaration_list -> declaration_list COMMA . declaration
    (12) declaration -> . identifier_list mode initialization
    (13) declaration -> . identifier_list mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    identifier_list                shift and go to state 75
    declaration                    shift and go to state 225
    identifier                     shift and go to state 72

state 167

    (9) declaration_statement -> DCL declaration_list SEMI .

    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRED            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SUCC            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)


state 168

    (33) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> boolean_mode .)
    DCL             reduce using rule 33 (discrete_mode -> boolean_mode .)
    SYN             reduce using rule 33 (discrete_mode -> boolean_mode .)
    TYPE            reduce using rule 33 (discrete_mode -> boolean_mode .)
    ID              reduce using rule 33 (discrete_mode -> boolean_mode .)
    EXIT            reduce using rule 33 (discrete_mode -> boolean_mode .)
    RETURN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    RESULT          reduce using rule 33 (discrete_mode -> boolean_mode .)
    IF              reduce using rule 33 (discrete_mode -> boolean_mode .)
    DO              reduce using rule 33 (discrete_mode -> boolean_mode .)
    NUM             reduce using rule 33 (discrete_mode -> boolean_mode .)
    PRED            reduce using rule 33 (discrete_mode -> boolean_mode .)
    SUCC            reduce using rule 33 (discrete_mode -> boolean_mode .)
    UPPER           reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOWER           reduce using rule 33 (discrete_mode -> boolean_mode .)
    LENGTH          reduce using rule 33 (discrete_mode -> boolean_mode .)
    READ            reduce using rule 33 (discrete_mode -> boolean_mode .)
    PRINT           reduce using rule 33 (discrete_mode -> boolean_mode .)
    $end            reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 33 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> boolean_mode .)


state 169

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    LOC             reduce using rule 38 (character_mode -> CHAR .)
    RPAREN          reduce using rule 38 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 38 (character_mode -> CHAR .)
    SEMI            reduce using rule 38 (character_mode -> CHAR .)
    DCL             reduce using rule 38 (character_mode -> CHAR .)
    SYN             reduce using rule 38 (character_mode -> CHAR .)
    TYPE            reduce using rule 38 (character_mode -> CHAR .)
    ID              reduce using rule 38 (character_mode -> CHAR .)
    EXIT            reduce using rule 38 (character_mode -> CHAR .)
    RETURN          reduce using rule 38 (character_mode -> CHAR .)
    RESULT          reduce using rule 38 (character_mode -> CHAR .)
    IF              reduce using rule 38 (character_mode -> CHAR .)
    DO              reduce using rule 38 (character_mode -> CHAR .)
    NUM             reduce using rule 38 (character_mode -> CHAR .)
    PRED            reduce using rule 38 (character_mode -> CHAR .)
    SUCC            reduce using rule 38 (character_mode -> CHAR .)
    UPPER           reduce using rule 38 (character_mode -> CHAR .)
    LOWER           reduce using rule 38 (character_mode -> CHAR .)
    LENGTH          reduce using rule 38 (character_mode -> CHAR .)
    READ            reduce using rule 38 (character_mode -> CHAR .)
    PRINT           reduce using rule 38 (character_mode -> CHAR .)
    $end            reduce using rule 38 (character_mode -> CHAR .)


state 170

    (30) mode -> reference_mode .

    ASSIGN          reduce using rule 30 (mode -> reference_mode .)
    SEMI            reduce using rule 30 (mode -> reference_mode .)
    COMMA           reduce using rule 30 (mode -> reference_mode .)
    LOC             reduce using rule 30 (mode -> reference_mode .)
    RPAREN          reduce using rule 30 (mode -> reference_mode .)
    DCL             reduce using rule 30 (mode -> reference_mode .)
    SYN             reduce using rule 30 (mode -> reference_mode .)
    TYPE            reduce using rule 30 (mode -> reference_mode .)
    ID              reduce using rule 30 (mode -> reference_mode .)
    EXIT            reduce using rule 30 (mode -> reference_mode .)
    RETURN          reduce using rule 30 (mode -> reference_mode .)
    RESULT          reduce using rule 30 (mode -> reference_mode .)
    IF              reduce using rule 30 (mode -> reference_mode .)
    DO              reduce using rule 30 (mode -> reference_mode .)
    NUM             reduce using rule 30 (mode -> reference_mode .)
    PRED            reduce using rule 30 (mode -> reference_mode .)
    SUCC            reduce using rule 30 (mode -> reference_mode .)
    UPPER           reduce using rule 30 (mode -> reference_mode .)
    LOWER           reduce using rule 30 (mode -> reference_mode .)
    LENGTH          reduce using rule 30 (mode -> reference_mode .)
    READ            reduce using rule 30 (mode -> reference_mode .)
    PRINT           reduce using rule 30 (mode -> reference_mode .)
    $end            reduce using rule 30 (mode -> reference_mode .)


state 171

    (39) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 226


state 172

    (29) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 29 (mode -> discrete_mode .)
    SEMI            reduce using rule 29 (mode -> discrete_mode .)
    COMMA           reduce using rule 29 (mode -> discrete_mode .)
    LOC             reduce using rule 29 (mode -> discrete_mode .)
    RPAREN          reduce using rule 29 (mode -> discrete_mode .)
    DCL             reduce using rule 29 (mode -> discrete_mode .)
    SYN             reduce using rule 29 (mode -> discrete_mode .)
    TYPE            reduce using rule 29 (mode -> discrete_mode .)
    ID              reduce using rule 29 (mode -> discrete_mode .)
    EXIT            reduce using rule 29 (mode -> discrete_mode .)
    RETURN          reduce using rule 29 (mode -> discrete_mode .)
    RESULT          reduce using rule 29 (mode -> discrete_mode .)
    IF              reduce using rule 29 (mode -> discrete_mode .)
    DO              reduce using rule 29 (mode -> discrete_mode .)
    NUM             reduce using rule 29 (mode -> discrete_mode .)
    PRED            reduce using rule 29 (mode -> discrete_mode .)
    SUCC            reduce using rule 29 (mode -> discrete_mode .)
    UPPER           reduce using rule 29 (mode -> discrete_mode .)
    LOWER           reduce using rule 29 (mode -> discrete_mode .)
    LENGTH          reduce using rule 29 (mode -> discrete_mode .)
    READ            reduce using rule 29 (mode -> discrete_mode .)
    PRINT           reduce using rule 29 (mode -> discrete_mode .)
    $end            reduce using rule 29 (mode -> discrete_mode .)
    LPAREN          shift and go to state 227


state 173

    (46) reference_mode -> REF . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (51) array_mode -> . ARRAY LBRACKET index_mode RBRACKET
    (52) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 173
    ID              shift and go to state 36
    ICONST          shift and go to state 179
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    CHARS           shift and go to state 181
    ARRAY           shift and go to state 178

    string_mode                    shift and go to state 175
    array_mode                     shift and go to state 174
    discrete_range_mode            shift and go to state 180
    discrete_mode_name             shift and go to state 171
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    reference_mode                 shift and go to state 170
    composite_mode                 shift and go to state 183
    integer_mode                   shift and go to state 186
    mode                           shift and go to state 228
    discrete_mode                  shift and go to state 172
    identifier                     shift and go to state 187
    mode_name                      shift and go to state 176

state 174

    (48) composite_mode -> array_mode .

    LOC             reduce using rule 48 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 48 (composite_mode -> array_mode .)
    COMMA           reduce using rule 48 (composite_mode -> array_mode .)
    ASSIGN          reduce using rule 48 (composite_mode -> array_mode .)
    SEMI            reduce using rule 48 (composite_mode -> array_mode .)
    DCL             reduce using rule 48 (composite_mode -> array_mode .)
    SYN             reduce using rule 48 (composite_mode -> array_mode .)
    TYPE            reduce using rule 48 (composite_mode -> array_mode .)
    ID              reduce using rule 48 (composite_mode -> array_mode .)
    EXIT            reduce using rule 48 (composite_mode -> array_mode .)
    RETURN          reduce using rule 48 (composite_mode -> array_mode .)
    RESULT          reduce using rule 48 (composite_mode -> array_mode .)
    IF              reduce using rule 48 (composite_mode -> array_mode .)
    DO              reduce using rule 48 (composite_mode -> array_mode .)
    NUM             reduce using rule 48 (composite_mode -> array_mode .)
    PRED            reduce using rule 48 (composite_mode -> array_mode .)
    SUCC            reduce using rule 48 (composite_mode -> array_mode .)
    UPPER           reduce using rule 48 (composite_mode -> array_mode .)
    LOWER           reduce using rule 48 (composite_mode -> array_mode .)
    LENGTH          reduce using rule 48 (composite_mode -> array_mode .)
    READ            reduce using rule 48 (composite_mode -> array_mode .)
    PRINT           reduce using rule 48 (composite_mode -> array_mode .)
    $end            reduce using rule 48 (composite_mode -> array_mode .)


state 175

    (47) composite_mode -> string_mode .

    LOC             reduce using rule 47 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 47 (composite_mode -> string_mode .)
    COMMA           reduce using rule 47 (composite_mode -> string_mode .)
    ASSIGN          reduce using rule 47 (composite_mode -> string_mode .)
    SEMI            reduce using rule 47 (composite_mode -> string_mode .)
    DCL             reduce using rule 47 (composite_mode -> string_mode .)
    SYN             reduce using rule 47 (composite_mode -> string_mode .)
    TYPE            reduce using rule 47 (composite_mode -> string_mode .)
    ID              reduce using rule 47 (composite_mode -> string_mode .)
    EXIT            reduce using rule 47 (composite_mode -> string_mode .)
    RETURN          reduce using rule 47 (composite_mode -> string_mode .)
    RESULT          reduce using rule 47 (composite_mode -> string_mode .)
    IF              reduce using rule 47 (composite_mode -> string_mode .)
    DO              reduce using rule 47 (composite_mode -> string_mode .)
    NUM             reduce using rule 47 (composite_mode -> string_mode .)
    PRED            reduce using rule 47 (composite_mode -> string_mode .)
    SUCC            reduce using rule 47 (composite_mode -> string_mode .)
    UPPER           reduce using rule 47 (composite_mode -> string_mode .)
    LOWER           reduce using rule 47 (composite_mode -> string_mode .)
    LENGTH          reduce using rule 47 (composite_mode -> string_mode .)
    READ            reduce using rule 47 (composite_mode -> string_mode .)
    PRINT           reduce using rule 47 (composite_mode -> string_mode .)
    $end            reduce using rule 47 (composite_mode -> string_mode .)


state 176

    (28) mode -> mode_name .

    ASSIGN          reduce using rule 28 (mode -> mode_name .)
    SEMI            reduce using rule 28 (mode -> mode_name .)
    COMMA           reduce using rule 28 (mode -> mode_name .)
    LOC             reduce using rule 28 (mode -> mode_name .)
    RPAREN          reduce using rule 28 (mode -> mode_name .)
    DCL             reduce using rule 28 (mode -> mode_name .)
    SYN             reduce using rule 28 (mode -> mode_name .)
    TYPE            reduce using rule 28 (mode -> mode_name .)
    ID              reduce using rule 28 (mode -> mode_name .)
    EXIT            reduce using rule 28 (mode -> mode_name .)
    RETURN          reduce using rule 28 (mode -> mode_name .)
    RESULT          reduce using rule 28 (mode -> mode_name .)
    IF              reduce using rule 28 (mode -> mode_name .)
    DO              reduce using rule 28 (mode -> mode_name .)
    NUM             reduce using rule 28 (mode -> mode_name .)
    PRED            reduce using rule 28 (mode -> mode_name .)
    SUCC            reduce using rule 28 (mode -> mode_name .)
    UPPER           reduce using rule 28 (mode -> mode_name .)
    LOWER           reduce using rule 28 (mode -> mode_name .)
    LENGTH          reduce using rule 28 (mode -> mode_name .)
    READ            reduce using rule 28 (mode -> mode_name .)
    PRINT           reduce using rule 28 (mode -> mode_name .)
    $end            reduce using rule 28 (mode -> mode_name .)


state 177

    (16) identifier_list -> identifier_list COMMA . identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    identifier                     shift and go to state 229

state 178

    (51) array_mode -> ARRAY . LBRACKET index_mode RBRACKET
    (52) array_mode -> ARRAY . LBRACKET index_mode COMMA index_mode_list RBRACKET

    LBRACKET        shift and go to state 230


state 179

    (36) integer_mode -> ICONST .

    LPAREN          reduce using rule 36 (integer_mode -> ICONST .)
    RPAREN          reduce using rule 36 (integer_mode -> ICONST .)
    LOC             reduce using rule 36 (integer_mode -> ICONST .)
    ASSIGN          reduce using rule 36 (integer_mode -> ICONST .)
    SEMI            reduce using rule 36 (integer_mode -> ICONST .)
    COMMA           reduce using rule 36 (integer_mode -> ICONST .)
    DCL             reduce using rule 36 (integer_mode -> ICONST .)
    SYN             reduce using rule 36 (integer_mode -> ICONST .)
    TYPE            reduce using rule 36 (integer_mode -> ICONST .)
    ID              reduce using rule 36 (integer_mode -> ICONST .)
    EXIT            reduce using rule 36 (integer_mode -> ICONST .)
    RETURN          reduce using rule 36 (integer_mode -> ICONST .)
    RESULT          reduce using rule 36 (integer_mode -> ICONST .)
    IF              reduce using rule 36 (integer_mode -> ICONST .)
    DO              reduce using rule 36 (integer_mode -> ICONST .)
    NUM             reduce using rule 36 (integer_mode -> ICONST .)
    PRED            reduce using rule 36 (integer_mode -> ICONST .)
    SUCC            reduce using rule 36 (integer_mode -> ICONST .)
    UPPER           reduce using rule 36 (integer_mode -> ICONST .)
    LOWER           reduce using rule 36 (integer_mode -> ICONST .)
    LENGTH          reduce using rule 36 (integer_mode -> ICONST .)
    READ            reduce using rule 36 (integer_mode -> ICONST .)
    PRINT           reduce using rule 36 (integer_mode -> ICONST .)
    $end            reduce using rule 36 (integer_mode -> ICONST .)


state 180

    (35) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    DCL             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SYN             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    TYPE            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    ID              reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    EXIT            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RETURN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RESULT          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    IF              reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    DO              reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    NUM             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    PRED            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SUCC            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    UPPER           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOWER           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LENGTH          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    READ            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    PRINT           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    $end            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 35 (discrete_mode -> discrete_range_mode .)


state 181

    (49) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 231


state 182

    (34) discrete_mode -> character_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 34 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> character_mode .)
    DCL             reduce using rule 34 (discrete_mode -> character_mode .)
    SYN             reduce using rule 34 (discrete_mode -> character_mode .)
    TYPE            reduce using rule 34 (discrete_mode -> character_mode .)
    ID              reduce using rule 34 (discrete_mode -> character_mode .)
    EXIT            reduce using rule 34 (discrete_mode -> character_mode .)
    RETURN          reduce using rule 34 (discrete_mode -> character_mode .)
    RESULT          reduce using rule 34 (discrete_mode -> character_mode .)
    IF              reduce using rule 34 (discrete_mode -> character_mode .)
    DO              reduce using rule 34 (discrete_mode -> character_mode .)
    NUM             reduce using rule 34 (discrete_mode -> character_mode .)
    PRED            reduce using rule 34 (discrete_mode -> character_mode .)
    SUCC            reduce using rule 34 (discrete_mode -> character_mode .)
    UPPER           reduce using rule 34 (discrete_mode -> character_mode .)
    LOWER           reduce using rule 34 (discrete_mode -> character_mode .)
    LENGTH          reduce using rule 34 (discrete_mode -> character_mode .)
    READ            reduce using rule 34 (discrete_mode -> character_mode .)
    PRINT           reduce using rule 34 (discrete_mode -> character_mode .)
    $end            reduce using rule 34 (discrete_mode -> character_mode .)
    LOC             reduce using rule 34 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 34 (discrete_mode -> character_mode .)


state 183

    (31) mode -> composite_mode .

    ASSIGN          reduce using rule 31 (mode -> composite_mode .)
    SEMI            reduce using rule 31 (mode -> composite_mode .)
    COMMA           reduce using rule 31 (mode -> composite_mode .)
    LOC             reduce using rule 31 (mode -> composite_mode .)
    RPAREN          reduce using rule 31 (mode -> composite_mode .)
    DCL             reduce using rule 31 (mode -> composite_mode .)
    SYN             reduce using rule 31 (mode -> composite_mode .)
    TYPE            reduce using rule 31 (mode -> composite_mode .)
    ID              reduce using rule 31 (mode -> composite_mode .)
    EXIT            reduce using rule 31 (mode -> composite_mode .)
    RETURN          reduce using rule 31 (mode -> composite_mode .)
    RESULT          reduce using rule 31 (mode -> composite_mode .)
    IF              reduce using rule 31 (mode -> composite_mode .)
    DO              reduce using rule 31 (mode -> composite_mode .)
    NUM             reduce using rule 31 (mode -> composite_mode .)
    PRED            reduce using rule 31 (mode -> composite_mode .)
    SUCC            reduce using rule 31 (mode -> composite_mode .)
    UPPER           reduce using rule 31 (mode -> composite_mode .)
    LOWER           reduce using rule 31 (mode -> composite_mode .)
    LENGTH          reduce using rule 31 (mode -> composite_mode .)
    READ            reduce using rule 31 (mode -> composite_mode .)
    PRINT           reduce using rule 31 (mode -> composite_mode .)
    $end            reduce using rule 31 (mode -> composite_mode .)


state 184

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 37 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 37 (boolean_mode -> BOOL .)
    DCL             reduce using rule 37 (boolean_mode -> BOOL .)
    SYN             reduce using rule 37 (boolean_mode -> BOOL .)
    TYPE            reduce using rule 37 (boolean_mode -> BOOL .)
    ID              reduce using rule 37 (boolean_mode -> BOOL .)
    EXIT            reduce using rule 37 (boolean_mode -> BOOL .)
    RETURN          reduce using rule 37 (boolean_mode -> BOOL .)
    RESULT          reduce using rule 37 (boolean_mode -> BOOL .)
    IF              reduce using rule 37 (boolean_mode -> BOOL .)
    DO              reduce using rule 37 (boolean_mode -> BOOL .)
    NUM             reduce using rule 37 (boolean_mode -> BOOL .)
    PRED            reduce using rule 37 (boolean_mode -> BOOL .)
    SUCC            reduce using rule 37 (boolean_mode -> BOOL .)
    UPPER           reduce using rule 37 (boolean_mode -> BOOL .)
    LOWER           reduce using rule 37 (boolean_mode -> BOOL .)
    LENGTH          reduce using rule 37 (boolean_mode -> BOOL .)
    READ            reduce using rule 37 (boolean_mode -> BOOL .)
    PRINT           reduce using rule 37 (boolean_mode -> BOOL .)
    $end            reduce using rule 37 (boolean_mode -> BOOL .)
    LOC             reduce using rule 37 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 37 (boolean_mode -> BOOL .)


state 185

    (12) declaration -> identifier_list mode . initialization
    (13) declaration -> identifier_list mode .
    (14) initialization -> . ASSIGN expression

    SEMI            reduce using rule 13 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 13 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 233

    initialization                 shift and go to state 232

state 186

    (32) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> integer_mode .)
    DCL             reduce using rule 32 (discrete_mode -> integer_mode .)
    SYN             reduce using rule 32 (discrete_mode -> integer_mode .)
    TYPE            reduce using rule 32 (discrete_mode -> integer_mode .)
    ID              reduce using rule 32 (discrete_mode -> integer_mode .)
    EXIT            reduce using rule 32 (discrete_mode -> integer_mode .)
    RETURN          reduce using rule 32 (discrete_mode -> integer_mode .)
    RESULT          reduce using rule 32 (discrete_mode -> integer_mode .)
    IF              reduce using rule 32 (discrete_mode -> integer_mode .)
    DO              reduce using rule 32 (discrete_mode -> integer_mode .)
    NUM             reduce using rule 32 (discrete_mode -> integer_mode .)
    PRED            reduce using rule 32 (discrete_mode -> integer_mode .)
    SUCC            reduce using rule 32 (discrete_mode -> integer_mode .)
    UPPER           reduce using rule 32 (discrete_mode -> integer_mode .)
    LOWER           reduce using rule 32 (discrete_mode -> integer_mode .)
    LENGTH          reduce using rule 32 (discrete_mode -> integer_mode .)
    READ            reduce using rule 32 (discrete_mode -> integer_mode .)
    PRINT           reduce using rule 32 (discrete_mode -> integer_mode .)
    $end            reduce using rule 32 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 32 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> integer_mode .)


state 187

    (41) mode_name -> identifier .
    (42) discrete_mode_name -> identifier .

    ASSIGN          reduce using rule 41 (mode_name -> identifier .)
    SEMI            reduce using rule 41 (mode_name -> identifier .)
    COMMA           reduce using rule 41 (mode_name -> identifier .)
    LOC             reduce using rule 41 (mode_name -> identifier .)
    RPAREN          reduce using rule 41 (mode_name -> identifier .)
    DCL             reduce using rule 41 (mode_name -> identifier .)
    SYN             reduce using rule 41 (mode_name -> identifier .)
    TYPE            reduce using rule 41 (mode_name -> identifier .)
    ID              reduce using rule 41 (mode_name -> identifier .)
    EXIT            reduce using rule 41 (mode_name -> identifier .)
    RETURN          reduce using rule 41 (mode_name -> identifier .)
    RESULT          reduce using rule 41 (mode_name -> identifier .)
    IF              reduce using rule 41 (mode_name -> identifier .)
    DO              reduce using rule 41 (mode_name -> identifier .)
    NUM             reduce using rule 41 (mode_name -> identifier .)
    PRED            reduce using rule 41 (mode_name -> identifier .)
    SUCC            reduce using rule 41 (mode_name -> identifier .)
    UPPER           reduce using rule 41 (mode_name -> identifier .)
    LOWER           reduce using rule 41 (mode_name -> identifier .)
    LENGTH          reduce using rule 41 (mode_name -> identifier .)
    READ            reduce using rule 41 (mode_name -> identifier .)
    PRINT           reduce using rule 41 (mode_name -> identifier .)
    $end            reduce using rule 41 (mode_name -> identifier .)
    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 188

    (207) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement action_statement_list END
    (208) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement END
    (209) procedure_definition -> PROC . LPAREN RPAREN SEMI action_statement action_statement_list END
    (210) procedure_definition -> PROC . LPAREN RPAREN SEMI action_statement END

    LPAREN          shift and go to state 234


state 189

    (140) action_statement -> label_id COLON action . SEMI

    SEMI            shift and go to state 235


state 190

    (206) procedure_statement -> label_id COLON procedure_definition . SEMI

    SEMI            shift and go to state 236


state 191

    (58) location -> identifier .
    (190) procedure_name -> identifier .
    (69) string_location -> identifier .

  ! reduce/reduce conflict for LBRACKET resolved using rule 58 (location -> identifier .)
    ARROW           reduce using rule 58 (location -> identifier .)
    ASSIGN          reduce using rule 58 (location -> identifier .)
    PLUS            reduce using rule 58 (location -> identifier .)
    MINUS           reduce using rule 58 (location -> identifier .)
    TIMES           reduce using rule 58 (location -> identifier .)
    DIVIDE          reduce using rule 58 (location -> identifier .)
    MOD             reduce using rule 58 (location -> identifier .)
    CONCAT          reduce using rule 58 (location -> identifier .)
    LBRACKET        reduce using rule 58 (location -> identifier .)
    LPAREN          reduce using rule 190 (procedure_name -> identifier .)

  ! LBRACKET        [ reduce using rule 69 (string_location -> identifier .) ]


state 192

    (151) assignment_action -> location assigning_operator expression .

    SEMI            reduce using rule 151 (assignment_action -> location assigning_operator expression .)


state 193

    (152) assigning_operator -> closed_dyadic_operator assignment_symbol .

    IF              reduce using rule 152 (assigning_operator -> closed_dyadic_operator assignment_symbol .)
    MINUS           reduce using rule 152 (assigning_operator -> closed_dyadic_operator assignment_symbol .)
    NOT             reduce using rule 152 (assigning_operator -> closed_dyadic_operator assignment_symbol .)
    ICONST          reduce using rule 152 (assigning_operator -> closed_dyadic_operator assignment_symbol .)


state 194

    (186) procedure_call -> procedure_name LPAREN RPAREN .

    SEMI            reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    ARROW           reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    PLUS            reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    MINUS           reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    TIMES           reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    MOD             reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    CONCAT          reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    LBRACKET        reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    AND             reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    OR              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    EQ              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    NEQ             reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    GT              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    GE              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    LT              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    LE              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    IN              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    THEN            reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    COMMA           reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    RPAREN          reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    COLON           reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    ELSE            reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    ELSIF           reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    DOWN            reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    BY              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    TO              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    FI              reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)
    WHILE           reduce using rule 186 (procedure_call -> procedure_name LPAREN RPAREN .)


state 195

    (185) procedure_call -> procedure_name LPAREN parameter_list . RPAREN
    (188) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 237
    COMMA           shift and go to state 224


state 196

    (160) then_clause -> THEN . action_statement_list
    (211) action_statement_list -> . action_statement
    (212) action_statement_list -> . action_statement_list COMMA action_statement
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    action_statement_list          shift and go to state 238
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    action_statement               shift and go to state 69
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47

state 197

    (158) if_action -> IF boolean_expression then_clause . else_clause FI
    (159) if_action -> IF boolean_expression then_clause . FI
    (161) else_clause -> . ELSE action_statement_list
    (162) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (163) else_clause -> . ELSIF boolean_expression then_clause

    FI              shift and go to state 242
    ELSE            shift and go to state 240
    ELSIF           shift and go to state 239

    else_clause                    shift and go to state 241

state 198

    (26) newmode_list -> newmode_list COMMA . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    mode_definition                shift and go to state 243
    identifier_list                shift and go to state 98
    identifier                     shift and go to state 72

state 199

    (27) mode_definition -> identifier_list ASSIGN . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (51) array_mode -> . ARRAY LBRACKET index_mode RBRACKET
    (52) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 173
    ID              shift and go to state 36
    ICONST          shift and go to state 179
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    CHARS           shift and go to state 181
    ARRAY           shift and go to state 178

    string_mode                    shift and go to state 175
    identifier                     shift and go to state 187
    array_mode                     shift and go to state 174
    discrete_range_mode            shift and go to state 180
    discrete_mode_name             shift and go to state 171
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    reference_mode                 shift and go to state 170
    composite_mode                 shift and go to state 183
    integer_mode                   shift and go to state 186
    mode                           shift and go to state 244
    discrete_mode                  shift and go to state 172
    mode_name                      shift and go to state 176

state 200

    (20) synonym_list -> synonym_list COMMA . synonym_definition
    (21) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (22) synonym_definition -> . identifier_list ASSIGN constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    synonym_definition             shift and go to state 245
    identifier_list                shift and go to state 101
    identifier                     shift and go to state 72

state 201

    (18) synonym_statement -> SYN synonym_list SEMI .

    DCL             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    PRED            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    SUCC            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)


state 202

    (22) synonym_definition -> identifier_list ASSIGN . constant_expression
    (23) constant_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 247
    integer_literal                shift and go to state 57
    constant_expression            shift and go to state 246

state 203

    (21) synonym_definition -> identifier_list mode . ASSIGN constant_expression

    ASSIGN          shift and go to state 248


state 204

    (75) array_slice -> array_location LBRACKET lower_element . COLON upper_element RBRACKET

    COLON           shift and go to state 249


state 205

    (77) lower_element -> expression .

    COLON           reduce using rule 77 (lower_element -> expression .)


state 206

    (121) operand1 -> operand1 operator2 operand2 .
    (128) operand2 -> operand2 . arithmetic_multiplicative_operator operand3
    (129) arithmetic_multiplicative_operator -> . TIMES
    (130) arithmetic_multiplicative_operator -> . DIVIDE
    (131) arithmetic_multiplicative_operator -> . MOD

    PLUS            reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    MINUS           reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    CONCAT          reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    AND             reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    OR              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    EQ              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    NEQ             reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    GT              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    GE              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    LT              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    LE              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    IN              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    RBRACKET        reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    COMMA           reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    SEMI            reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    FI              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    RPAREN          reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    THEN            reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    COLON           reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    ELSE            reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    ELSIF           reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    DOWN            reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    BY              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    TO              reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    WHILE           reduce using rule 121 (operand1 -> operand1 operator2 operand2 .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 78
    MOD             shift and go to state 90

    arithmetic_multiplicative_operator shift and go to state 121

state 207

    (108) operand0 -> operand0 operator1 operand1 .
    (121) operand1 -> operand1 . operator2 operand2
    (122) operator2 -> . arithmetic_additive_operator
    (123) operator2 -> . string_concatenation_operator
    (124) arithmetic_additive_operator -> . PLUS
    (125) arithmetic_additive_operator -> . MINUS
    (126) string_concatenation_operator -> . CONCAT

    AND             reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    OR              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    EQ              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    NEQ             reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    GT              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    GE              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    LT              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    LE              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    IN              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    SEMI            reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    RBRACKET        reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    COMMA           reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    FI              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    DOWN            reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    BY              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    TO              reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    COLON           reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    RPAREN          reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    THEN            reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    ELSE            reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    ELSIF           reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    WHILE           reduce using rule 108 (operand0 -> operand0 operator1 operand1 .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 84
    CONCAT          shift and go to state 79

    arithmetic_additive_operator   shift and go to state 106
    operator2                      shift and go to state 108
    string_concatenation_operator  shift and go to state 107

state 208

    (128) operand2 -> operand2 arithmetic_multiplicative_operator operand3 .

    TIMES           reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DIVIDE          reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MOD             reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    PLUS            reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    MINUS           reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    CONCAT          reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    AND             reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    OR              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    EQ              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    NEQ             reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GT              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    GE              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LT              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    LE              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    IN              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RPAREN          reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COMMA           reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    SEMI            reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    RBRACKET        reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    WHILE           reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    COLON           reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    THEN            reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSE            reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    ELSIF           reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    DOWN            reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    BY              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    TO              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)
    FI              reduce using rule 128 (operand2 -> operand2 arithmetic_multiplicative_operator operand3 .)


state 209

    (97) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 250


state 210

    (94) value_array_element -> array_primitive_value LBRACKET . expression_list RBRACKET
    (95) value_array_slice -> array_primitive_value LBRACKET . lower_element COLON upper_element RBRACKET
    (73) expression_list -> . expression
    (74) expression_list -> . expression_list COMMA expression
    (77) lower_element -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    monadic_operator               shift and go to state 55
    operand2                       shift and go to state 54
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    expression_list                shift and go to state 251
    lower_element                  shift and go to state 252
    conditional_expression         shift and go to state 59
    operand1                       shift and go to state 51
    integer_literal                shift and go to state 57
    expression                     shift and go to state 253

state 211

    (139) referenced_location -> ARROW location .
    (65) dereferenced_reference -> location . ARROW
    (76) array_location -> location .

    TIMES           reduce using rule 139 (referenced_location -> ARROW location .)
    DIVIDE          reduce using rule 139 (referenced_location -> ARROW location .)
    MOD             reduce using rule 139 (referenced_location -> ARROW location .)
    PLUS            reduce using rule 139 (referenced_location -> ARROW location .)
    MINUS           reduce using rule 139 (referenced_location -> ARROW location .)
    CONCAT          reduce using rule 139 (referenced_location -> ARROW location .)
    AND             reduce using rule 139 (referenced_location -> ARROW location .)
    OR              reduce using rule 139 (referenced_location -> ARROW location .)
    EQ              reduce using rule 139 (referenced_location -> ARROW location .)
    NEQ             reduce using rule 139 (referenced_location -> ARROW location .)
    GT              reduce using rule 139 (referenced_location -> ARROW location .)
    GE              reduce using rule 139 (referenced_location -> ARROW location .)
    LT              reduce using rule 139 (referenced_location -> ARROW location .)
    LE              reduce using rule 139 (referenced_location -> ARROW location .)
    IN              reduce using rule 139 (referenced_location -> ARROW location .)
    SEMI            reduce using rule 139 (referenced_location -> ARROW location .)
    THEN            reduce using rule 139 (referenced_location -> ARROW location .)
    RBRACKET        reduce using rule 139 (referenced_location -> ARROW location .)
    COMMA           reduce using rule 139 (referenced_location -> ARROW location .)
    RPAREN          reduce using rule 139 (referenced_location -> ARROW location .)
    COLON           reduce using rule 139 (referenced_location -> ARROW location .)
    ELSE            reduce using rule 139 (referenced_location -> ARROW location .)
    ELSIF           reduce using rule 139 (referenced_location -> ARROW location .)
    DOWN            reduce using rule 139 (referenced_location -> ARROW location .)
    BY              reduce using rule 139 (referenced_location -> ARROW location .)
    TO              reduce using rule 139 (referenced_location -> ARROW location .)
    FI              reduce using rule 139 (referenced_location -> ARROW location .)
    WHILE           reduce using rule 139 (referenced_location -> ARROW location .)
    ARROW           shift and go to state 86
    LBRACKET        reduce using rule 76 (array_location -> location .)


state 212

    (103) then_expression -> THEN . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 254
    integer_literal                shift and go to state 57

state 213

    (100) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (101) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (104) else_expression -> . ELSE expression
    (105) elsif_expression -> . ELSIF boolean_expression then_expression
    (106) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression

    ELSE            shift and go to state 255
    ELSIF           shift and go to state 257

    elsif_expression               shift and go to state 256
    else_expression                shift and go to state 258

state 214

    (212) action_statement_list -> action_statement_list COMMA action_statement .

    COMMA           reduce using rule 212 (action_statement_list -> action_statement_list COMMA action_statement .)
    FI              reduce using rule 212 (action_statement_list -> action_statement_list COMMA action_statement .)
    END             reduce using rule 212 (action_statement_list -> action_statement_list COMMA action_statement .)
    ELSE            reduce using rule 212 (action_statement_list -> action_statement_list COMMA action_statement .)
    ELSIF           reduce using rule 212 (action_statement_list -> action_statement_list COMMA action_statement .)
    OD              reduce using rule 212 (action_statement_list -> action_statement_list COMMA action_statement .)


state 215

    (164) do_action -> DO control_part SEMI action_statement_list . OD
    (212) action_statement_list -> action_statement_list . COMMA action_statement

    OD              shift and go to state 259
    COMMA           shift and go to state 148


state 216

    (180) range_enumeration -> loop_counter DOWN . IN discrete_mode_name

    IN              shift and go to state 260


state 217

    (181) range_enumeration -> loop_counter IN . discrete_mode_name
    (42) discrete_mode_name -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    discrete_mode_name             shift and go to state 261
    identifier                     shift and go to state 262

state 218

    (171) step_enumeration -> loop_counter ASSIGN . start_value step_value DOWN end_value
    (172) step_enumeration -> loop_counter ASSIGN . start_value DOWN end_value
    (173) step_enumeration -> loop_counter ASSIGN . start_value step_value end_value
    (174) step_enumeration -> loop_counter ASSIGN . start_value end_value
    (176) start_value -> . discrete_expression
    (179) discrete_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    monadic_operator               shift and go to state 55
    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    discrete_expression            shift and go to state 263
    integer_literal                shift and go to state 57
    conditional_expression         shift and go to state 59
    start_value                    shift and go to state 264
    expression                     shift and go to state 265

state 219

    (68) string_slice -> string_location LBRACKET left_element COLON . right_element RBRACKET
    (71) right_element -> . ICONST

    ICONST          shift and go to state 266

    right_element                  shift and go to state 267

state 220

    (66) string_element -> string_location LBRACKET start_element COLON . right_element RBRACKET
    (71) right_element -> . ICONST

    ICONST          shift and go to state 266

    right_element                  shift and go to state 268

state 221

    (74) expression_list -> expression_list COMMA . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    integer_literal                shift and go to state 57
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 269

state 222

    (72) array_element -> string_location LBRACKET expression_list RBRACKET .

    ARROW           reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    NEQ             reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    GE              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    LE              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 72 (array_element -> string_location LBRACKET expression_list RBRACKET .)


state 223

    (196) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    ARROW           reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GT              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GE              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LT              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LE              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 196 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 224

    (188) parameter_list -> parameter_list COMMA . parameter
    (189) parameter -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    parameter                      shift and go to state 270
    operand3                       shift and go to state 53
    integer_literal                shift and go to state 57
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 165

state 225

    (11) declaration_list -> declaration_list COMMA declaration .

    SEMI            reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)


state 226

    (39) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (44) lower_bound -> . integer_literal
    (88) integer_literal -> . ICONST

    ICONST          shift and go to state 56

    lower_bound                    shift and go to state 271
    literal_range                  shift and go to state 272
    integer_literal                shift and go to state 273

state 227

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (44) lower_bound -> . integer_literal
    (88) integer_literal -> . ICONST

    ICONST          shift and go to state 56

    lower_bound                    shift and go to state 271
    literal_range                  shift and go to state 274
    integer_literal                shift and go to state 273

state 228

    (46) reference_mode -> REF mode .

    RPAREN          reduce using rule 46 (reference_mode -> REF mode .)
    LOC             reduce using rule 46 (reference_mode -> REF mode .)
    ASSIGN          reduce using rule 46 (reference_mode -> REF mode .)
    SEMI            reduce using rule 46 (reference_mode -> REF mode .)
    COMMA           reduce using rule 46 (reference_mode -> REF mode .)
    DCL             reduce using rule 46 (reference_mode -> REF mode .)
    SYN             reduce using rule 46 (reference_mode -> REF mode .)
    TYPE            reduce using rule 46 (reference_mode -> REF mode .)
    ID              reduce using rule 46 (reference_mode -> REF mode .)
    EXIT            reduce using rule 46 (reference_mode -> REF mode .)
    RETURN          reduce using rule 46 (reference_mode -> REF mode .)
    RESULT          reduce using rule 46 (reference_mode -> REF mode .)
    IF              reduce using rule 46 (reference_mode -> REF mode .)
    DO              reduce using rule 46 (reference_mode -> REF mode .)
    NUM             reduce using rule 46 (reference_mode -> REF mode .)
    PRED            reduce using rule 46 (reference_mode -> REF mode .)
    SUCC            reduce using rule 46 (reference_mode -> REF mode .)
    UPPER           reduce using rule 46 (reference_mode -> REF mode .)
    LOWER           reduce using rule 46 (reference_mode -> REF mode .)
    LENGTH          reduce using rule 46 (reference_mode -> REF mode .)
    READ            reduce using rule 46 (reference_mode -> REF mode .)
    PRINT           reduce using rule 46 (reference_mode -> REF mode .)
    $end            reduce using rule 46 (reference_mode -> REF mode .)


state 229

    (16) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ICONST          reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ASSIGN          reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)


state 230

    (51) array_mode -> ARRAY LBRACKET . index_mode RBRACKET
    (52) array_mode -> ARRAY LBRACKET . index_mode COMMA index_mode_list RBRACKET
    (55) index_mode -> . discrete_mode
    (56) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . integer_literal
    (42) discrete_mode_name -> . identifier
    (88) integer_literal -> . ICONST
    (17) identifier -> . ID

    ICONST          shift and go to state 276
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    ID              shift and go to state 36

    discrete_range_mode            shift and go to state 180
    lower_bound                    shift and go to state 271
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    discrete_mode                  shift and go to state 275
    discrete_mode_name             shift and go to state 171
    integer_mode                   shift and go to state 186
    index_mode                     shift and go to state 277
    literal_range                  shift and go to state 278
    identifier                     shift and go to state 262
    integer_literal                shift and go to state 273

state 231

    (49) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (50) string_length -> . integer_literal
    (88) integer_literal -> . ICONST

    ICONST          shift and go to state 56

    integer_literal                shift and go to state 279
    string_length                  shift and go to state 280

state 232

    (12) declaration -> identifier_list mode initialization .

    SEMI            reduce using rule 12 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 12 (declaration -> identifier_list mode initialization .)


state 233

    (14) initialization -> ASSIGN . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 281
    integer_literal                shift and go to state 57

state 234

    (207) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI action_statement action_statement_list END
    (208) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI action_statement END
    (209) procedure_definition -> PROC LPAREN . RPAREN SEMI action_statement action_statement_list END
    (210) procedure_definition -> PROC LPAREN . RPAREN SEMI action_statement END
    (213) formal_parameter_list -> . formal_parameter
    (214) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (215) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    RPAREN          shift and go to state 283
    ID              shift and go to state 36

    formal_parameter_list          shift and go to state 282
    identifier                     shift and go to state 72
    formal_parameter               shift and go to state 284
    identifier_list                shift and go to state 285

state 235

    (140) action_statement -> label_id COLON action SEMI .

    END             reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    ID              reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    EXIT            reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    RETURN          reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    RESULT          reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    IF              reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    DO              reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    NUM             reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    PRED            reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    SUCC            reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    UPPER           reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    LOWER           reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    LENGTH          reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    READ            reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    PRINT           reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    OD              reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    COMMA           reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    FI              reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    ELSE            reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    ELSIF           reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    DCL             reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    SYN             reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    TYPE            reduce using rule 140 (action_statement -> label_id COLON action SEMI .)
    $end            reduce using rule 140 (action_statement -> label_id COLON action SEMI .)


state 236

    (206) procedure_statement -> label_id COLON procedure_definition SEMI .

    DCL             reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    SYN             reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    TYPE            reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ID              reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    EXIT            reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RETURN          reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RESULT          reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    IF              reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    DO              reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    NUM             reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    PRED            reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    SUCC            reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    UPPER           reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LOWER           reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LENGTH          reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    READ            reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    PRINT           reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    $end            reduce using rule 206 (procedure_statement -> label_id COLON procedure_definition SEMI .)


state 237

    (185) procedure_call -> procedure_name LPAREN parameter_list RPAREN .

    SEMI            reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    ARROW           reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    GT              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    GE              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    LT              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    LE              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 185 (procedure_call -> procedure_name LPAREN parameter_list RPAREN .)


state 238

    (160) then_clause -> THEN action_statement_list .
    (212) action_statement_list -> action_statement_list . COMMA action_statement

    ELSE            reduce using rule 160 (then_clause -> THEN action_statement_list .)
    ELSIF           reduce using rule 160 (then_clause -> THEN action_statement_list .)
    FI              reduce using rule 160 (then_clause -> THEN action_statement_list .)
    COMMA           shift and go to state 148


state 239

    (162) else_clause -> ELSIF . boolean_expression then_clause else_clause
    (163) else_clause -> ELSIF . boolean_expression then_clause
    (102) boolean_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    boolean_expression             shift and go to state 286
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 95
    integer_literal                shift and go to state 57

state 240

    (161) else_clause -> ELSE . action_statement_list
    (211) action_statement_list -> . action_statement
    (212) action_statement_list -> . action_statement_list COMMA action_statement
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    action_statement_list          shift and go to state 287
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    action_statement               shift and go to state 69
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47

state 241

    (158) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 288


state 242

    (159) if_action -> IF boolean_expression then_clause FI .

    SEMI            reduce using rule 159 (if_action -> IF boolean_expression then_clause FI .)


state 243

    (26) newmode_list -> newmode_list COMMA mode_definition .

    COMMA           reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    DCL             reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    SYN             reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    TYPE            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    ID              reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    EXIT            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    RETURN          reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    RESULT          reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    IF              reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    DO              reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    NUM             reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    PRED            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    SUCC            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    UPPER           reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    LOWER           reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    LENGTH          reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    READ            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    PRINT           reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    $end            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)


state 244

    (27) mode_definition -> identifier_list ASSIGN mode .

    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    DCL             reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    SYN             reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    TYPE            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    ID              reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    EXIT            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    RETURN          reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    RESULT          reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    IF              reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    DO              reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    NUM             reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    PRED            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    SUCC            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    UPPER           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    LOWER           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    LENGTH          reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    READ            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    PRINT           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    $end            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 245

    (20) synonym_list -> synonym_list COMMA synonym_definition .

    SEMI            reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)


state 246

    (22) synonym_definition -> identifier_list ASSIGN constant_expression .

    SEMI            reduce using rule 22 (synonym_definition -> identifier_list ASSIGN constant_expression .)
    COMMA           reduce using rule 22 (synonym_definition -> identifier_list ASSIGN constant_expression .)


state 247

    (23) constant_expression -> expression .

    SEMI            reduce using rule 23 (constant_expression -> expression .)
    COMMA           reduce using rule 23 (constant_expression -> expression .)


state 248

    (21) synonym_definition -> identifier_list mode ASSIGN . constant_expression
    (23) constant_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 247
    integer_literal                shift and go to state 57
    constant_expression            shift and go to state 289

state 249

    (75) array_slice -> array_location LBRACKET lower_element COLON . upper_element RBRACKET
    (78) upper_element -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    upper_element                  shift and go to state 290
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    operand1                       shift and go to state 51
    integer_literal                shift and go to state 57
    expression                     shift and go to state 291
    monadic_operator               shift and go to state 55

state 250

    (97) parenthesized_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONCAT          reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 97 (parenthesized_expression -> LPAREN expression RPAREN .)


state 251

    (94) value_array_element -> array_primitive_value LBRACKET expression_list . RBRACKET
    (74) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 292
    COMMA           shift and go to state 221


state 252

    (95) value_array_slice -> array_primitive_value LBRACKET lower_element . COLON upper_element RBRACKET

    COLON           shift and go to state 293


state 253

    (73) expression_list -> expression .
    (77) lower_element -> expression .

    RBRACKET        reduce using rule 73 (expression_list -> expression .)
    COMMA           reduce using rule 73 (expression_list -> expression .)
    COLON           reduce using rule 77 (lower_element -> expression .)


state 254

    (103) then_expression -> THEN expression .

    ELSIF           reduce using rule 103 (then_expression -> THEN expression .)
    ELSE            reduce using rule 103 (then_expression -> THEN expression .)


state 255

    (104) else_expression -> ELSE . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 294
    integer_literal                shift and go to state 57

state 256

    (101) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (106) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (104) else_expression -> . ELSE expression

    ELSIF           shift and go to state 295
    ELSE            shift and go to state 255

    else_expression                shift and go to state 296

state 257

    (105) elsif_expression -> ELSIF . boolean_expression then_expression
    (102) boolean_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    boolean_expression             shift and go to state 297
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 95
    integer_literal                shift and go to state 57

state 258

    (100) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 298


state 259

    (164) do_action -> DO control_part SEMI action_statement_list OD .

    SEMI            reduce using rule 164 (do_action -> DO control_part SEMI action_statement_list OD .)


state 260

    (180) range_enumeration -> loop_counter DOWN IN . discrete_mode_name
    (42) discrete_mode_name -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    discrete_mode_name             shift and go to state 299
    identifier                     shift and go to state 262

state 261

    (181) range_enumeration -> loop_counter IN discrete_mode_name .

    WHILE           reduce using rule 181 (range_enumeration -> loop_counter IN discrete_mode_name .)


state 262

    (42) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)
    WHILE           reduce using rule 42 (discrete_mode_name -> identifier .)


state 263

    (176) start_value -> discrete_expression .

    DOWN            reduce using rule 176 (start_value -> discrete_expression .)
    BY              reduce using rule 176 (start_value -> discrete_expression .)
    TO              reduce using rule 176 (start_value -> discrete_expression .)


state 264

    (171) step_enumeration -> loop_counter ASSIGN start_value . step_value DOWN end_value
    (172) step_enumeration -> loop_counter ASSIGN start_value . DOWN end_value
    (173) step_enumeration -> loop_counter ASSIGN start_value . step_value end_value
    (174) step_enumeration -> loop_counter ASSIGN start_value . end_value
    (177) step_value -> . BY ICONST
    (178) end_value -> . TO discrete_expression

    DOWN            shift and go to state 303
    BY              shift and go to state 302
    TO              shift and go to state 304

    end_value                      shift and go to state 300
    step_value                     shift and go to state 301

state 265

    (179) discrete_expression -> expression .

    DOWN            reduce using rule 179 (discrete_expression -> expression .)
    BY              reduce using rule 179 (discrete_expression -> expression .)
    TO              reduce using rule 179 (discrete_expression -> expression .)
    WHILE           reduce using rule 179 (discrete_expression -> expression .)


state 266

    (71) right_element -> ICONST .

    RBRACKET        reduce using rule 71 (right_element -> ICONST .)


state 267

    (68) string_slice -> string_location LBRACKET left_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 305


state 268

    (66) string_element -> string_location LBRACKET start_element COLON right_element . RBRACKET

    RBRACKET        shift and go to state 306


state 269

    (74) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 74 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 74 (expression_list -> expression_list COMMA expression .)


state 270

    (188) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 188 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 188 (parameter_list -> parameter_list COMMA parameter .)


state 271

    (43) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 307


state 272

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 308


state 273

    (44) lower_bound -> integer_literal .

    COLON           reduce using rule 44 (lower_bound -> integer_literal .)


state 274

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 309


state 275

    (55) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACKET        reduce using rule 55 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 55 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 227


state 276

    (36) integer_mode -> ICONST .
    (88) integer_literal -> ICONST .

    LPAREN          reduce using rule 36 (integer_mode -> ICONST .)
    RBRACKET        reduce using rule 36 (integer_mode -> ICONST .)
    COMMA           reduce using rule 36 (integer_mode -> ICONST .)
    COLON           reduce using rule 88 (integer_literal -> ICONST .)


state 277

    (51) array_mode -> ARRAY LBRACKET index_mode . RBRACKET
    (52) array_mode -> ARRAY LBRACKET index_mode . COMMA index_mode_list RBRACKET

    RBRACKET        shift and go to state 311
    COMMA           shift and go to state 310


state 278

    (56) index_mode -> literal_range .

    RBRACKET        reduce using rule 56 (index_mode -> literal_range .)
    COMMA           reduce using rule 56 (index_mode -> literal_range .)


state 279

    (50) string_length -> integer_literal .

    RBRACKET        reduce using rule 50 (string_length -> integer_literal .)


state 280

    (49) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 312


state 281

    (14) initialization -> ASSIGN expression .

    SEMI            reduce using rule 14 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 14 (initialization -> ASSIGN expression .)


state 282

    (207) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI action_statement action_statement_list END
    (208) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI action_statement END
    (214) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 313
    COMMA           shift and go to state 314


state 283

    (209) procedure_definition -> PROC LPAREN RPAREN . SEMI action_statement action_statement_list END
    (210) procedure_definition -> PROC LPAREN RPAREN . SEMI action_statement END

    SEMI            shift and go to state 315


state 284

    (213) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 213 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 213 (formal_parameter_list -> formal_parameter .)


state 285

    (215) formal_parameter -> identifier_list . parameter_spec
    (16) identifier_list -> identifier_list . COMMA identifier
    (216) parameter_spec -> . mode attribute
    (217) parameter_spec -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (51) array_mode -> . ARRAY LBRACKET index_mode RBRACKET
    (52) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 177
    REF             shift and go to state 173
    ID              shift and go to state 36
    ICONST          shift and go to state 179
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    CHARS           shift and go to state 181
    ARRAY           shift and go to state 178

    string_mode                    shift and go to state 175
    identifier                     shift and go to state 187
    array_mode                     shift and go to state 174
    discrete_range_mode            shift and go to state 180
    discrete_mode_name             shift and go to state 171
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    reference_mode                 shift and go to state 170
    composite_mode                 shift and go to state 183
    integer_mode                   shift and go to state 186
    mode                           shift and go to state 317
    parameter_spec                 shift and go to state 316
    discrete_mode                  shift and go to state 172
    mode_name                      shift and go to state 176

state 286

    (162) else_clause -> ELSIF boolean_expression . then_clause else_clause
    (163) else_clause -> ELSIF boolean_expression . then_clause
    (160) then_clause -> . THEN action_statement_list

    THEN            shift and go to state 196

    then_clause                    shift and go to state 318

state 287

    (161) else_clause -> ELSE action_statement_list .
    (212) action_statement_list -> action_statement_list . COMMA action_statement

    FI              reduce using rule 161 (else_clause -> ELSE action_statement_list .)
    COMMA           shift and go to state 148


state 288

    (158) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMI            reduce using rule 158 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 289

    (21) synonym_definition -> identifier_list mode ASSIGN constant_expression .

    SEMI            reduce using rule 21 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)
    COMMA           reduce using rule 21 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)


state 290

    (75) array_slice -> array_location LBRACKET lower_element COLON upper_element . RBRACKET

    RBRACKET        shift and go to state 319


state 291

    (78) upper_element -> expression .

    RBRACKET        reduce using rule 78 (upper_element -> expression .)


state 292

    (94) value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .

    TIMES           reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    NEQ             reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    GE              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LE              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 94 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)


state 293

    (95) value_array_slice -> array_primitive_value LBRACKET lower_element COLON . upper_element RBRACKET
    (78) upper_element -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    upper_element                  shift and go to state 320
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    conditional_expression         shift and go to state 59
    operand1                       shift and go to state 51
    integer_literal                shift and go to state 57
    expression                     shift and go to state 291
    monadic_operator               shift and go to state 55

state 294

    (104) else_expression -> ELSE expression .

    FI              reduce using rule 104 (else_expression -> ELSE expression .)


state 295

    (106) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (102) boolean_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    boolean_expression             shift and go to state 321
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 95
    integer_literal                shift and go to state 57

state 296

    (101) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 322


state 297

    (105) elsif_expression -> ELSIF boolean_expression . then_expression
    (103) then_expression -> . THEN expression

    THEN            shift and go to state 212

    then_expression                shift and go to state 323

state 298

    (100) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    ELSE            reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    THEN            reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COLON           reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    SEMI            reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    WHILE           reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DOWN            reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    BY              reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TO              reduce using rule 100 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 299

    (180) range_enumeration -> loop_counter DOWN IN discrete_mode_name .

    WHILE           reduce using rule 180 (range_enumeration -> loop_counter DOWN IN discrete_mode_name .)


state 300

    (174) step_enumeration -> loop_counter ASSIGN start_value end_value .

    WHILE           reduce using rule 174 (step_enumeration -> loop_counter ASSIGN start_value end_value .)


state 301

    (171) step_enumeration -> loop_counter ASSIGN start_value step_value . DOWN end_value
    (173) step_enumeration -> loop_counter ASSIGN start_value step_value . end_value
    (178) end_value -> . TO discrete_expression

    DOWN            shift and go to state 325
    TO              shift and go to state 304

    end_value                      shift and go to state 324

state 302

    (177) step_value -> BY . ICONST

    ICONST          shift and go to state 326


state 303

    (172) step_enumeration -> loop_counter ASSIGN start_value DOWN . end_value
    (178) end_value -> . TO discrete_expression

    TO              shift and go to state 304

    end_value                      shift and go to state 327

state 304

    (178) end_value -> TO . discrete_expression
    (179) discrete_expression -> . expression
    (98) expression -> . operand0
    (99) expression -> . conditional_expression
    (107) operand0 -> . operand1
    (108) operand0 -> . operand0 operator1 operand1
    (100) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (101) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (120) operand1 -> . operand2
    (121) operand1 -> . operand1 operator2 operand2
    (127) operand2 -> . operand3
    (128) operand2 -> . operand2 arithmetic_multiplicative_operator operand3
    (132) operand3 -> . monadic_operator operand4
    (133) operand3 -> . integer_literal
    (134) monadic_operator -> . MINUS
    (135) monadic_operator -> . NOT
    (88) integer_literal -> . ICONST

    IF              shift and go to state 58
    MINUS           shift and go to state 50
    NOT             shift and go to state 60
    ICONST          shift and go to state 56

    operand2                       shift and go to state 54
    operand1                       shift and go to state 51
    operand0                       shift and go to state 52
    operand3                       shift and go to state 53
    discrete_expression            shift and go to state 328
    integer_literal                shift and go to state 57
    conditional_expression         shift and go to state 59
    monadic_operator               shift and go to state 55
    expression                     shift and go to state 265

state 305

    (68) string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .

    ARROW           reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    ASSIGN          reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    MOD             reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    CONCAT          reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    AND             reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    OR              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    EQ              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    NEQ             reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    GT              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    GE              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    LT              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    LE              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    IN              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    THEN            reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    COLON           reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    DOWN            reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    BY              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    TO              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    FI              reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)
    WHILE           reduce using rule 68 (string_slice -> string_location LBRACKET left_element COLON right_element RBRACKET .)


state 306

    (66) string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .

    ARROW           reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    ASSIGN          reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    PLUS            reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    MINUS           reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    TIMES           reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    DIVIDE          reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    MOD             reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    CONCAT          reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    LBRACKET        reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    AND             reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    OR              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    EQ              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    NEQ             reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    GT              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    GE              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    LT              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    LE              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    IN              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    SEMI            reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    THEN            reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    RBRACKET        reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    COMMA           reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    RPAREN          reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    COLON           reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    ELSE            reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    ELSIF           reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    DOWN            reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    BY              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    TO              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    FI              reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)
    WHILE           reduce using rule 66 (string_element -> string_location LBRACKET start_element COLON right_element RBRACKET .)


state 307

    (43) literal_range -> lower_bound COLON . upper_bound
    (45) upper_bound -> . integer_literal
    (88) integer_literal -> . ICONST

    ICONST          shift and go to state 56

    integer_literal                shift and go to state 329
    upper_bound                    shift and go to state 330

state 308

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    DCL             reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SYN             reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    TYPE            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ID              reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    EXIT            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RETURN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RESULT          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    IF              reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    DO              reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    NUM             reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    PRED            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SUCC            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    UPPER           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOWER           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LENGTH          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    READ            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    PRINT           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    $end            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 309

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    DCL             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SYN             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    TYPE            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ID              reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    EXIT            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RETURN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RESULT          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    IF              reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    DO              reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    NUM             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    PRED            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SUCC            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    UPPER           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOWER           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LENGTH          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    READ            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    PRINT           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    $end            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 310

    (52) array_mode -> ARRAY LBRACKET index_mode COMMA . index_mode_list RBRACKET
    (53) index_mode_list -> . index_mode
    (54) index_mode_list -> . index_mode_list COMMA index_mode
    (55) index_mode -> . discrete_mode
    (56) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . integer_literal
    (42) discrete_mode_name -> . identifier
    (88) integer_literal -> . ICONST
    (17) identifier -> . ID

    ICONST          shift and go to state 276
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    ID              shift and go to state 36

    discrete_range_mode            shift and go to state 180
    lower_bound                    shift and go to state 271
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    discrete_mode                  shift and go to state 275
    discrete_mode_name             shift and go to state 171
    integer_mode                   shift and go to state 186
    index_mode                     shift and go to state 331
    literal_range                  shift and go to state 278
    identifier                     shift and go to state 262
    integer_literal                shift and go to state 273
    index_mode_list                shift and go to state 332

state 311

    (51) array_mode -> ARRAY LBRACKET index_mode RBRACKET .

    RPAREN          reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    LOC             reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    ASSIGN          reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    SEMI            reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    COMMA           reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    DCL             reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    SYN             reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    TYPE            reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    ID              reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    EXIT            reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    RETURN          reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    RESULT          reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    IF              reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    DO              reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    NUM             reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    PRED            reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    SUCC            reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    UPPER           reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    LOWER           reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    LENGTH          reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    READ            reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    PRINT           reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)
    $end            reduce using rule 51 (array_mode -> ARRAY LBRACKET index_mode RBRACKET .)


state 312

    (49) string_mode -> CHARS LBRACKET string_length RBRACKET .

    ASSIGN          reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    LOC             reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    DCL             reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SYN             reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    TYPE            reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    ID              reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    EXIT            reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RETURN          reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RESULT          reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    IF              reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    DO              reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    NUM             reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    PRED            reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SUCC            reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    UPPER           reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    LOWER           reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    LENGTH          reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    READ            reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    PRINT           reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    $end            reduce using rule 49 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 313

    (207) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI action_statement action_statement_list END
    (208) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI action_statement END
    (218) result_spec -> . RETURNS LPAREN mode attribute RPAREN
    (219) result_spec -> . RETURNS LPAREN mode RPAREN

    RETURNS         shift and go to state 333

    result_spec                    shift and go to state 334

state 314

    (214) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (215) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 36

    identifier_list                shift and go to state 285
    identifier                     shift and go to state 72
    formal_parameter               shift and go to state 335

state 315

    (209) procedure_definition -> PROC LPAREN RPAREN SEMI . action_statement action_statement_list END
    (210) procedure_definition -> PROC LPAREN RPAREN SEMI . action_statement END
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    action_statement               shift and go to state 336
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47

state 316

    (215) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 215 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 215 (formal_parameter -> identifier_list parameter_spec .)


state 317

    (216) parameter_spec -> mode . attribute
    (217) parameter_spec -> mode .
    (220) attribute -> . LOC

    RPAREN          reduce using rule 217 (parameter_spec -> mode .)
    COMMA           reduce using rule 217 (parameter_spec -> mode .)
    LOC             shift and go to state 338

    attribute                      shift and go to state 337

state 318

    (162) else_clause -> ELSIF boolean_expression then_clause . else_clause
    (163) else_clause -> ELSIF boolean_expression then_clause .
    (161) else_clause -> . ELSE action_statement_list
    (162) else_clause -> . ELSIF boolean_expression then_clause else_clause
    (163) else_clause -> . ELSIF boolean_expression then_clause

    FI              reduce using rule 163 (else_clause -> ELSIF boolean_expression then_clause .)
    ELSE            shift and go to state 240
    ELSIF           shift and go to state 239

    else_clause                    shift and go to state 339

state 319

    (75) array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .

    ARROW           reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    ASSIGN          reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    PLUS            reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    MINUS           reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    TIMES           reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    DIVIDE          reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    MOD             reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    CONCAT          reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    LBRACKET        reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    AND             reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    OR              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    EQ              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    NEQ             reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    GT              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    GE              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    LT              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    LE              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    IN              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    SEMI            reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    THEN            reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    RBRACKET        reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    COMMA           reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    RPAREN          reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    COLON           reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    ELSE            reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    ELSIF           reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    DOWN            reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    BY              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    TO              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    FI              reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)
    WHILE           reduce using rule 75 (array_slice -> array_location LBRACKET lower_element COLON upper_element RBRACKET .)


state 320

    (95) value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element . RBRACKET

    RBRACKET        shift and go to state 340


state 321

    (106) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (103) then_expression -> . THEN expression

    THEN            shift and go to state 212

    then_expression                shift and go to state 341

state 322

    (101) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    ELSE            reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COLON           reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    WHILE           reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 101 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 323

    (105) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 105 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 105 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 324

    (173) step_enumeration -> loop_counter ASSIGN start_value step_value end_value .

    WHILE           reduce using rule 173 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)


state 325

    (171) step_enumeration -> loop_counter ASSIGN start_value step_value DOWN . end_value
    (178) end_value -> . TO discrete_expression

    TO              shift and go to state 304

    end_value                      shift and go to state 342

state 326

    (177) step_value -> BY ICONST .

    DOWN            reduce using rule 177 (step_value -> BY ICONST .)
    TO              reduce using rule 177 (step_value -> BY ICONST .)


state 327

    (172) step_enumeration -> loop_counter ASSIGN start_value DOWN end_value .

    WHILE           reduce using rule 172 (step_enumeration -> loop_counter ASSIGN start_value DOWN end_value .)


state 328

    (178) end_value -> TO discrete_expression .

    WHILE           reduce using rule 178 (end_value -> TO discrete_expression .)


state 329

    (45) upper_bound -> integer_literal .

    RPAREN          reduce using rule 45 (upper_bound -> integer_literal .)
    RBRACKET        reduce using rule 45 (upper_bound -> integer_literal .)
    COMMA           reduce using rule 45 (upper_bound -> integer_literal .)


state 330

    (43) literal_range -> lower_bound COLON upper_bound .

    RBRACKET        reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)


state 331

    (53) index_mode_list -> index_mode .

    RBRACKET        reduce using rule 53 (index_mode_list -> index_mode .)
    COMMA           reduce using rule 53 (index_mode_list -> index_mode .)


state 332

    (52) array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list . RBRACKET
    (54) index_mode_list -> index_mode_list . COMMA index_mode

    RBRACKET        shift and go to state 344
    COMMA           shift and go to state 343


state 333

    (218) result_spec -> RETURNS . LPAREN mode attribute RPAREN
    (219) result_spec -> RETURNS . LPAREN mode RPAREN

    LPAREN          shift and go to state 345


state 334

    (207) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI action_statement action_statement_list END
    (208) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI action_statement END

    SEMI            shift and go to state 346


state 335

    (214) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 214 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 214 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 336

    (209) procedure_definition -> PROC LPAREN RPAREN SEMI action_statement . action_statement_list END
    (210) procedure_definition -> PROC LPAREN RPAREN SEMI action_statement . END
    (211) action_statement_list -> . action_statement
    (212) action_statement_list -> . action_statement_list COMMA action_statement
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    END             shift and go to state 348
    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    action_statement_list          shift and go to state 347
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    procedure_name                 shift and go to state 29
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    action_statement               shift and go to state 69
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47

state 337

    (216) parameter_spec -> mode attribute .

    RPAREN          reduce using rule 216 (parameter_spec -> mode attribute .)
    COMMA           reduce using rule 216 (parameter_spec -> mode attribute .)


state 338

    (220) attribute -> LOC .

    RPAREN          reduce using rule 220 (attribute -> LOC .)
    COMMA           reduce using rule 220 (attribute -> LOC .)


state 339

    (162) else_clause -> ELSIF boolean_expression then_clause else_clause .

    FI              reduce using rule 162 (else_clause -> ELSIF boolean_expression then_clause else_clause .)


state 340

    (95) value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .

    TIMES           reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    DIVIDE          reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    MOD             reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    PLUS            reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    MINUS           reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    CONCAT          reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    AND             reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    OR              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    EQ              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    NEQ             reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    GT              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    GE              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    LT              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    LE              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    IN              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    SEMI            reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    THEN            reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    RBRACKET        reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    COMMA           reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    RPAREN          reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    COLON           reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    ELSE            reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    ELSIF           reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    DOWN            reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    BY              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    TO              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    FI              reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    WHILE           reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)
    LBRACKET        reduce using rule 95 (value_array_slice -> array_primitive_value LBRACKET lower_element COLON upper_element RBRACKET .)


state 341

    (106) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 106 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 106 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 342

    (171) step_enumeration -> loop_counter ASSIGN start_value step_value DOWN end_value .

    WHILE           reduce using rule 171 (step_enumeration -> loop_counter ASSIGN start_value step_value DOWN end_value .)


state 343

    (54) index_mode_list -> index_mode_list COMMA . index_mode
    (55) index_mode -> . discrete_mode
    (56) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (44) lower_bound -> . integer_literal
    (42) discrete_mode_name -> . identifier
    (88) integer_literal -> . ICONST
    (17) identifier -> . ID

    ICONST          shift and go to state 276
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    ID              shift and go to state 36

    discrete_range_mode            shift and go to state 180
    lower_bound                    shift and go to state 271
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    discrete_mode                  shift and go to state 275
    discrete_mode_name             shift and go to state 171
    integer_mode                   shift and go to state 186
    index_mode                     shift and go to state 349
    literal_range                  shift and go to state 278
    identifier                     shift and go to state 262
    integer_literal                shift and go to state 273

state 344

    (52) array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .

    RPAREN          reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    LOC             reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    ASSIGN          reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    SEMI            reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    COMMA           reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    DCL             reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    SYN             reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    TYPE            reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    ID              reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    EXIT            reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    RETURN          reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    RESULT          reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    IF              reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    DO              reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    NUM             reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    PRED            reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    SUCC            reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    UPPER           reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    LOWER           reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    LENGTH          reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    READ            reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    PRINT           reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)
    $end            reduce using rule 52 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET .)


state 345

    (218) result_spec -> RETURNS LPAREN . mode attribute RPAREN
    (219) result_spec -> RETURNS LPAREN . mode RPAREN
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (46) reference_mode -> . REF mode
    (47) composite_mode -> . string_mode
    (48) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . ICONST
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (49) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (51) array_mode -> . ARRAY LBRACKET index_mode RBRACKET
    (52) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 173
    ID              shift and go to state 36
    ICONST          shift and go to state 179
    BOOL            shift and go to state 184
    CHAR            shift and go to state 169
    CHARS           shift and go to state 181
    ARRAY           shift and go to state 178

    string_mode                    shift and go to state 175
    array_mode                     shift and go to state 174
    discrete_range_mode            shift and go to state 180
    discrete_mode_name             shift and go to state 171
    boolean_mode                   shift and go to state 168
    character_mode                 shift and go to state 182
    reference_mode                 shift and go to state 170
    composite_mode                 shift and go to state 183
    integer_mode                   shift and go to state 186
    mode                           shift and go to state 350
    discrete_mode                  shift and go to state 172
    identifier                     shift and go to state 187
    mode_name                      shift and go to state 176

state 346

    (207) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . action_statement action_statement_list END
    (208) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . action_statement END
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    procedure_name                 shift and go to state 29
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    action_statement               shift and go to state 351
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47

state 347

    (209) procedure_definition -> PROC LPAREN RPAREN SEMI action_statement action_statement_list . END
    (212) action_statement_list -> action_statement_list . COMMA action_statement

    END             shift and go to state 352
    COMMA           shift and go to state 148


state 348

    (210) procedure_definition -> PROC LPAREN RPAREN SEMI action_statement END .

    SEMI            reduce using rule 210 (procedure_definition -> PROC LPAREN RPAREN SEMI action_statement END .)


state 349

    (54) index_mode_list -> index_mode_list COMMA index_mode .

    RBRACKET        reduce using rule 54 (index_mode_list -> index_mode_list COMMA index_mode .)
    COMMA           reduce using rule 54 (index_mode_list -> index_mode_list COMMA index_mode .)


state 350

    (218) result_spec -> RETURNS LPAREN mode . attribute RPAREN
    (219) result_spec -> RETURNS LPAREN mode . RPAREN
    (220) attribute -> . LOC

    RPAREN          shift and go to state 353
    LOC             shift and go to state 338

    attribute                      shift and go to state 354

state 351

    (207) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement . action_statement_list END
    (208) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement . END
    (211) action_statement_list -> . action_statement
    (212) action_statement_list -> . action_statement_list COMMA action_statement
    (140) action_statement -> . label_id COLON action SEMI
    (141) action_statement -> . action SEMI
    (142) label_id -> . identifier
    (143) action -> . bracketed_action
    (144) action -> . assignment_action
    (145) action -> . call_action
    (146) action -> . exit_action
    (147) action -> . return_action
    (148) action -> . result_action
    (17) identifier -> . ID
    (149) bracketed_action -> . if_action
    (150) bracketed_action -> . do_action
    (151) assignment_action -> . location assigning_operator expression
    (183) call_action -> . procedure_call
    (184) call_action -> . builtin_call
    (191) exit_action -> . EXIT label_id
    (192) return_action -> . RETURN result
    (193) return_action -> . RETURN
    (194) result_action -> . RESULT result
    (158) if_action -> . IF boolean_expression then_clause else_clause FI
    (159) if_action -> . IF boolean_expression then_clause FI
    (164) do_action -> . DO control_part SEMI action_statement_list OD
    (165) do_action -> . DO action_statement_list OD
    (58) location -> . identifier
    (59) location -> . dereferenced_reference
    (60) location -> . string_element
    (61) location -> . string_slice
    (62) location -> . array_element
    (63) location -> . array_slice
    (64) location -> . call_action
    (185) procedure_call -> . procedure_name LPAREN parameter_list RPAREN
    (186) procedure_call -> . procedure_name LPAREN RPAREN
    (196) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (197) builtin_call -> . builtin_name LPAREN RPAREN
    (65) dereferenced_reference -> . location ARROW
    (66) string_element -> . string_location LBRACKET start_element COLON right_element RBRACKET
    (68) string_slice -> . string_location LBRACKET left_element COLON right_element RBRACKET
    (72) array_element -> . string_location LBRACKET expression_list RBRACKET
    (75) array_slice -> . array_location LBRACKET lower_element COLON upper_element RBRACKET
    (190) procedure_name -> . identifier
    (198) builtin_name -> . NUM
    (199) builtin_name -> . PRED
    (200) builtin_name -> . SUCC
    (201) builtin_name -> . UPPER
    (202) builtin_name -> . LOWER
    (203) builtin_name -> . LENGTH
    (204) builtin_name -> . READ
    (205) builtin_name -> . PRINT
    (69) string_location -> . identifier
    (76) array_location -> . location

    END             shift and go to state 356
    ID              shift and go to state 36
    EXIT            shift and go to state 44
    RETURN          shift and go to state 2
    RESULT          shift and go to state 33
    IF              shift and go to state 37
    DO              shift and go to state 4
    NUM             shift and go to state 30
    PRED            shift and go to state 10
    SUCC            shift and go to state 11
    UPPER           shift and go to state 38
    LOWER           shift and go to state 18
    LENGTH          shift and go to state 19
    READ            shift and go to state 21
    PRINT           shift and go to state 26

    assignment_action              shift and go to state 1
    bracketed_action               shift and go to state 3
    procedure_name                 shift and go to state 29
    result_action                  shift and go to state 8
    array_element                  shift and go to state 7
    procedure_call                 shift and go to state 13
    do_action                      shift and go to state 14
    action_statement_list          shift and go to state 355
    if_action                      shift and go to state 15
    string_element                 shift and go to state 16
    return_action                  shift and go to state 12
    label_id                       shift and go to state 66
    location                       shift and go to state 24
    exit_action                    shift and go to state 34
    builtin_call                   shift and go to state 28
    call_action                    shift and go to state 31
    dereferenced_reference         shift and go to state 39
    action_statement               shift and go to state 69
    builtin_name                   shift and go to state 9
    array_location                 shift and go to state 42
    string_slice                   shift and go to state 27
    array_slice                    shift and go to state 45
    action                         shift and go to state 46
    string_location                shift and go to state 6
    identifier                     shift and go to state 47

state 352

    (209) procedure_definition -> PROC LPAREN RPAREN SEMI action_statement action_statement_list END .

    SEMI            reduce using rule 209 (procedure_definition -> PROC LPAREN RPAREN SEMI action_statement action_statement_list END .)


state 353

    (219) result_spec -> RETURNS LPAREN mode RPAREN .

    SEMI            reduce using rule 219 (result_spec -> RETURNS LPAREN mode RPAREN .)


state 354

    (218) result_spec -> RETURNS LPAREN mode attribute . RPAREN

    RPAREN          shift and go to state 357


state 355

    (207) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement action_statement_list . END
    (212) action_statement_list -> action_statement_list . COMMA action_statement

    END             shift and go to state 358
    COMMA           shift and go to state 148


state 356

    (208) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement END .

    SEMI            reduce using rule 208 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement END .)


state 357

    (218) result_spec -> RETURNS LPAREN mode attribute RPAREN .

    SEMI            reduce using rule 218 (result_spec -> RETURNS LPAREN mode attribute RPAREN .)


state 358

    (207) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement action_statement_list END .

    SEMI            reduce using rule 207 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI action_statement action_statement_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 47 resolved using rule (location -> identifier)
WARNING: rejected rule (string_location -> identifier) in state 47
WARNING: reduce/reduce conflict in state 143 resolved using rule (location -> identifier)
WARNING: rejected rule (string_location -> identifier) in state 143
WARNING: reduce/reduce conflict in state 159 resolved using rule (start_element -> ICONST)
WARNING: rejected rule (left_element -> ICONST) in state 159
WARNING: reduce/reduce conflict in state 191 resolved using rule (location -> identifier)
WARNING: rejected rule (string_location -> identifier) in state 191
WARNING: Rule (string_location -> identifier) is never reduced
WARNING: Rule (left_element -> ICONST) is never reduced
