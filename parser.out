Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> synonym_statement
Rule 6     statement -> newmode_statement
Rule 7     statement -> procedure_statement
Rule 8     statement -> action_statement
Rule 9     declaration_statement -> DCL declaration_list SEMI
Rule 10    declaration_list -> declaration
Rule 11    declaration_list -> declaration_list COMMA declaration
Rule 12    declaration -> identifier_list mode initialization
Rule 13    declaration -> identifier_list mode
Rule 14    initialization -> ASSIGN expression
Rule 15    identifier_list -> identifier
Rule 16    identifier_list -> identifier_list COMMA identifier
Rule 17    identifier -> ID
Rule 18    synonym_statement -> SYN synonym_list SEMI
Rule 19    synonym_list -> synonym_definition
Rule 20    synonym_list -> synonym_list COMMA synonym_definition
Rule 21    synonym_definition -> identifier_list mode ASSIGN constant_expression
Rule 22    synonym_definition -> identifier_list ASSIGN constant_expression
Rule 23    constant_expression -> expression
Rule 24    newmode_statement -> TYPE newmode_list SEMI
Rule 25    newmode_list -> mode_definition
Rule 26    newmode_list -> newmode_list COMMA mode_definition
Rule 27    mode_definition -> identifier_list ASSIGN mode
Rule 28    mode -> mode_name
Rule 29    mode -> discrete_mode
Rule 30    mode -> reference_mode
Rule 31    mode -> composite_mode
Rule 32    discrete_mode -> integer_mode
Rule 33    discrete_mode -> boolean_mode
Rule 34    discrete_mode -> character_mode
Rule 35    discrete_mode -> discrete_range_mode
Rule 36    integer_mode -> INT
Rule 37    boolean_mode -> BOOL
Rule 38    character_mode -> CHAR
Rule 39    discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN
Rule 40    discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN
Rule 41    mode_name -> identifier
Rule 42    discrete_mode_name -> identifier
Rule 43    literal_range -> lower_bound COLON upper_bound
Rule 44    reference_mode -> REF mode
Rule 45    composite_mode -> string_mode
Rule 46    composite_mode -> array_mode
Rule 47    string_mode -> CHARS LBRACKET string_length RBRACKET
Rule 48    string_length -> ICONST
Rule 49    array_mode -> ARRAY LBRACKET index_mode RBRACKET element_mode
Rule 50    array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
Rule 51    index_mode_list -> index_mode
Rule 52    index_mode_list -> index_mode_list COMMA index_mode
Rule 53    index_mode -> discrete_mode
Rule 54    index_mode -> literal_range
Rule 55    element_mode -> mode
Rule 56    location -> identifier
Rule 57    location -> location LBRACKET lower_bound COLON upper_bound RBRACKET
Rule 58    location -> location ARROW
Rule 59    location -> location LBRACKET expression_list RBRACKET
Rule 60    location -> call_action
Rule 61    lower_bound -> expression
Rule 62    upper_bound -> expression
Rule 63    expression_list -> expression
Rule 64    expression_list -> expression_list COMMA expression
Rule 65    primitive_value -> literal
Rule 66    primitive_value -> value_array_element
Rule 67    primitive_value -> value_array_slice
Rule 68    primitive_value -> parenthesized_expression
Rule 69    literal -> ICONST
Rule 70    literal -> FALSE
Rule 71    literal -> TRUE
Rule 72    literal -> CCONST
Rule 73    literal -> NULL
Rule 74    literal -> SCONST
Rule 75    value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET
Rule 76    value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET
Rule 77    array_primitive_value -> primitive_value
Rule 78    parenthesized_expression -> LPAREN expression RPAREN
Rule 79    expression -> binop
Rule 80    expression -> conditional_expression
Rule 81    conditional_expression -> IF boolean_expression then_expression else_expression FI
Rule 82    conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI
Rule 83    boolean_expression -> expression
Rule 84    then_expression -> THEN expression
Rule 85    else_expression -> ELSE expression
Rule 86    elsif_expression -> ELSIF boolean_expression then_expression
Rule 87    elsif_expression -> elsif_expression ELSIF boolean_expression then_expression
Rule 88    binop -> operand
Rule 89    binop -> binop AND binop
Rule 90    binop -> binop OR binop
Rule 91    binop -> binop EQ binop
Rule 92    binop -> binop NEQ binop
Rule 93    binop -> binop GT binop
Rule 94    binop -> binop GE binop
Rule 95    binop -> binop LT binop
Rule 96    binop -> binop LE binop
Rule 97    binop -> binop PLUS binop
Rule 98    binop -> binop MINUS binop
Rule 99    binop -> binop TIMES binop
Rule 100   binop -> binop DIVIDE binop
Rule 101   binop -> binop MOD binop
Rule 102   binop -> binop NOT binop
Rule 103   binop -> binop IN binop
Rule 104   binop -> binop CONCAT binop
Rule 105   operand -> MINUS operand1
Rule 106   operand -> NOT operand1
Rule 107   operand -> operand1
Rule 108   operand1 -> location
Rule 109   operand1 -> referenced_location
Rule 110   operand1 -> primitive_value
Rule 111   referenced_location -> ARROW location
Rule 112   action_statement -> label_id COLON action SEMI
Rule 113   action_statement -> action SEMI
Rule 114   label_id -> identifier
Rule 115   action_statement_list -> action_statement
Rule 116   action_statement_list -> action_statement_list action_statement
Rule 117   action -> if_action
Rule 118   action -> do_action
Rule 119   action -> assignment_action
Rule 120   action -> call_action
Rule 121   action -> exit_action
Rule 122   action -> return_action
Rule 123   action -> result_action
Rule 124   assignment_action -> location assigning_operator expression
Rule 125   assigning_operator -> PLUS ASSIGN
Rule 126   assigning_operator -> MINUS ASSIGN
Rule 127   assigning_operator -> TIMES ASSIGN
Rule 128   assigning_operator -> DIVIDE ASSIGN
Rule 129   assigning_operator -> MOD ASSIGN
Rule 130   assigning_operator -> CONCAT ASSIGN
Rule 131   assigning_operator -> ASSIGN
Rule 132   if_action -> IF boolean_expression then_clause else_clause FI
Rule 133   if_action -> IF boolean_expression then_clause FI
Rule 134   then_clause -> THEN action_statement_list
Rule 135   then_clause -> THEN
Rule 136   else_clause -> ELSE action_statement_list
Rule 137   else_clause -> ELSE
Rule 138   do_action -> DO control_part SEMI action_statement_list OD
Rule 139   do_action -> DO control_part SEMI OD
Rule 140   do_action -> DO action_statement_list OD
Rule 141   control_part -> for_control while_control
Rule 142   control_part -> for_control
Rule 143   control_part -> while_control
Rule 144   for_control -> FOR iteration
Rule 145   iteration -> step_enumeration
Rule 146   iteration -> range_enumeration
Rule 147   step_enumeration -> loop_counter ASSIGN start_value step_value DOWN end_value
Rule 148   step_enumeration -> loop_counter ASSIGN start_value DOWN end_value
Rule 149   step_enumeration -> loop_counter ASSIGN start_value step_value end_value
Rule 150   step_enumeration -> loop_counter ASSIGN start_value end_value
Rule 151   loop_counter -> identifier
Rule 152   start_value -> discrete_expression
Rule 153   step_value -> BY ICONST
Rule 154   end_value -> TO discrete_expression
Rule 155   discrete_expression -> expression
Rule 156   range_enumeration -> loop_counter DOWN IN discrete_mode
Rule 157   range_enumeration -> loop_counter IN discrete_mode
Rule 158   while_control -> WHILE boolean_expression
Rule 159   call_action -> procedure_call
Rule 160   call_action -> builtin_call
Rule 161   procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN
Rule 162   procedure_call -> discrete_mode_name LPAREN RPAREN
Rule 163   parameter_list -> expression
Rule 164   parameter_list -> parameter_list COMMA expression
Rule 165   exit_action -> EXIT identifier
Rule 166   return_action -> RETURN expression
Rule 167   return_action -> RETURN
Rule 168   result_action -> RESULT expression
Rule 169   builtin_call -> builtin_name LPAREN parameter_list RPAREN
Rule 170   builtin_call -> builtin_name LPAREN RPAREN
Rule 171   builtin_name -> NUM
Rule 172   builtin_name -> PRED
Rule 173   builtin_name -> SUCC
Rule 174   builtin_name -> UPPER
Rule 175   builtin_name -> LOWER
Rule 176   builtin_name -> LENGTH
Rule 177   builtin_name -> READ
Rule 178   builtin_name -> PRINT
Rule 179   procedure_statement -> label_id COLON procedure_definition SEMI
Rule 180   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END
Rule 181   procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END
Rule 182   procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END
Rule 183   procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END
Rule 184   formal_parameter_list -> formal_parameter
Rule 185   formal_parameter_list -> formal_parameter_list COMMA formal_parameter
Rule 186   formal_parameter -> identifier_list parameter_spec
Rule 187   result_spec -> RETURNS LPAREN parameter_spec RPAREN
Rule 188   parameter_spec -> mode LOC
Rule 189   parameter_spec -> mode

Terminals, with rules where they appear

AND                  : 89
ARRAY                : 49 50
ARROW                : 58 111
ASSIGN               : 14 21 22 27 125 126 127 128 129 130 131 147 148 149 150
BOOL                 : 37
BY                   : 153
CCONST               : 72
CHAR                 : 38
CHARS                : 47
COLON                : 43 57 76 112 179
COMMA                : 11 16 20 26 50 52 64 164 185
CONCAT               : 104 130
DCL                  : 9
DIVIDE               : 100 128
DO                   : 138 139 140
DOWN                 : 147 148 156
ELSE                 : 85 136 137
ELSIF                : 86 87
END                  : 180 181 182 183
EQ                   : 91
EXIT                 : 165
FALSE                : 70
FI                   : 81 82 132 133
FOR                  : 144
GE                   : 94
GT                   : 93
ICONST               : 48 69 153
ID                   : 17
IF                   : 81 82 132 133
IN                   : 103 156 157
INT                  : 36
LBRACKET             : 47 49 50 57 59 75 76
LE                   : 96
LENGTH               : 176
LOC                  : 188
LOWER                : 175
LPAREN               : 39 40 78 161 162 169 170 180 181 182 183 187
LT                   : 95
MINUS                : 98 105 126
MOD                  : 101 129
NEQ                  : 92
NOT                  : 102 106
NULL                 : 73
NUM                  : 171
OD                   : 138 139 140
OR                   : 90
PLUS                 : 97 125
PRED                 : 172
PRINT                : 178
PROC                 : 180 181 182 183
RBRACKET             : 47 49 50 57 59 75 76
READ                 : 177
REF                  : 44
RESULT               : 168
RETURN               : 166 167
RETURNS              : 187
RPAREN               : 39 40 78 161 162 169 170 180 181 182 183 187
SCONST               : 74
SEMI                 : 9 18 24 112 113 138 139 179 180 181 182 183
SUCC                 : 173
SYN                  : 18
THEN                 : 84 134 135
TIMES                : 99 127
TO                   : 154
TRUE                 : 71
TYPE                 : 24
UPPER                : 174
WHILE                : 158
error                : 

Nonterminals, with rules where they appear

action               : 112 113
action_statement     : 8 115 116
action_statement_list : 116 134 136 138 140
array_mode           : 46
array_primitive_value : 75 76
assigning_operator   : 124
assignment_action    : 119
binop                : 79 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104
boolean_expression   : 81 82 86 87 132 133 158
boolean_mode         : 33
builtin_call         : 160
builtin_name         : 169 170
call_action          : 60 120
character_mode       : 34
composite_mode       : 31
conditional_expression : 80
constant_expression  : 21 22
control_part         : 138 139
declaration          : 10 11
declaration_list     : 9 11
declaration_statement : 4
discrete_expression  : 152 154
discrete_mode        : 29 40 53 156 157
discrete_mode_name   : 39 161 162
discrete_range_mode  : 35
do_action            : 118
element_mode         : 49 50
else_clause          : 132
else_expression      : 81 82
elsif_expression     : 82 87
end_value            : 147 148 149 150
exit_action          : 121
expression           : 14 23 61 62 63 64 76 76 78 83 84 85 124 155 163 164 166 168
expression_list      : 59 64 75
for_control          : 141 142
formal_parameter     : 184 185
formal_parameter_list : 180 181 185
identifier           : 15 16 41 42 56 114 151 165
identifier_list      : 12 13 16 21 22 27 186
if_action            : 117
index_mode           : 49 50 51 52
index_mode_list      : 50 52
initialization       : 12
integer_mode         : 32
iteration            : 144
label_id             : 112 179
literal              : 65
literal_range        : 39 40 54
location             : 57 58 59 108 111 124
loop_counter         : 147 148 149 150 156 157
lower_bound          : 43 57
mode                 : 12 13 21 27 44 55 188 189
mode_definition      : 25 26
mode_name            : 28
newmode_list         : 24 26
newmode_statement    : 6
operand              : 88
operand1             : 105 106 107
parameter_list       : 161 164 169
parameter_spec       : 186 187
parenthesized_expression : 68
primitive_value      : 77 110
procedure_call       : 159
procedure_definition : 179
procedure_statement  : 7
program              : 0
range_enumeration    : 146
reference_mode       : 30
referenced_location  : 109
result_action        : 123
result_spec          : 180 182
return_action        : 122
start_value          : 147 148 149 150
statement            : 2 3
statement_list       : 1 3 180 181 182 183
step_enumeration     : 145
step_value           : 147 149
string_length        : 47
string_mode          : 45
synonym_definition   : 19 20
synonym_list         : 18 20
synonym_statement    : 5
then_clause          : 132 133
then_expression      : 81 82 86 87
upper_bound          : 43 57
value_array_element  : 66
value_array_slice    : 67
while_control        : 141 143

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    location                       shift and go to state 12
    program                        shift and go to state 20
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    if_action                      shift and go to state 13
    synonym_statement              shift and go to state 23
    statement_list                 shift and go to state 5
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    statement                      shift and go to state 21
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 1

    (165) exit_action -> EXIT . identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    identifier                     shift and go to state 41

state 2

    (123) action -> result_action .

    SEMI            reduce using rule 123 (action -> result_action .)


state 3

    (18) synonym_statement -> SYN . synonym_list SEMI
    (19) synonym_list -> . synonym_definition
    (20) synonym_list -> . synonym_list COMMA synonym_definition
    (21) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (22) synonym_definition -> . identifier_list ASSIGN constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    identifier_list                shift and go to state 42
    synonym_definition             shift and go to state 43
    identifier                     shift and go to state 44
    synonym_list                   shift and go to state 45

state 4

    (161) procedure_call -> discrete_mode_name . LPAREN parameter_list RPAREN
    (162) procedure_call -> discrete_mode_name . LPAREN RPAREN

    LPAREN          shift and go to state 46


state 5

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    $end            reduce using rule 1 (program -> statement_list .)
    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 47
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 6

    (121) action -> exit_action .

    SEMI            reduce using rule 121 (action -> exit_action .)


state 7

    (17) identifier -> ID .

    LBRACKET        reduce using rule 17 (identifier -> ID .)
    ARROW           reduce using rule 17 (identifier -> ID .)
    AND             reduce using rule 17 (identifier -> ID .)
    OR              reduce using rule 17 (identifier -> ID .)
    EQ              reduce using rule 17 (identifier -> ID .)
    NEQ             reduce using rule 17 (identifier -> ID .)
    GT              reduce using rule 17 (identifier -> ID .)
    GE              reduce using rule 17 (identifier -> ID .)
    LT              reduce using rule 17 (identifier -> ID .)
    LE              reduce using rule 17 (identifier -> ID .)
    PLUS            reduce using rule 17 (identifier -> ID .)
    MINUS           reduce using rule 17 (identifier -> ID .)
    TIMES           reduce using rule 17 (identifier -> ID .)
    DIVIDE          reduce using rule 17 (identifier -> ID .)
    MOD             reduce using rule 17 (identifier -> ID .)
    NOT             reduce using rule 17 (identifier -> ID .)
    IN              reduce using rule 17 (identifier -> ID .)
    CONCAT          reduce using rule 17 (identifier -> ID .)
    SEMI            reduce using rule 17 (identifier -> ID .)
    THEN            reduce using rule 17 (identifier -> ID .)
    RPAREN          reduce using rule 17 (identifier -> ID .)
    COMMA           reduce using rule 17 (identifier -> ID .)
    COLON           reduce using rule 17 (identifier -> ID .)
    RBRACKET        reduce using rule 17 (identifier -> ID .)
    DOWN            reduce using rule 17 (identifier -> ID .)
    BY              reduce using rule 17 (identifier -> ID .)
    TO              reduce using rule 17 (identifier -> ID .)
    ELSE            reduce using rule 17 (identifier -> ID .)
    ELSIF           reduce using rule 17 (identifier -> ID .)
    FI              reduce using rule 17 (identifier -> ID .)
    WHILE           reduce using rule 17 (identifier -> ID .)
    LPAREN          reduce using rule 17 (identifier -> ID .)
    ASSIGN          reduce using rule 17 (identifier -> ID .)
    LOC             reduce using rule 17 (identifier -> ID .)
    REF             reduce using rule 17 (identifier -> ID .)
    ID              reduce using rule 17 (identifier -> ID .)
    INT             reduce using rule 17 (identifier -> ID .)
    BOOL            reduce using rule 17 (identifier -> ID .)
    CHAR            reduce using rule 17 (identifier -> ID .)
    CHARS           reduce using rule 17 (identifier -> ID .)
    ARRAY           reduce using rule 17 (identifier -> ID .)


state 8

    (172) builtin_name -> PRED .

    LPAREN          reduce using rule 172 (builtin_name -> PRED .)


state 9

    (169) builtin_call -> builtin_name . LPAREN parameter_list RPAREN
    (170) builtin_call -> builtin_name . LPAREN RPAREN

    LPAREN          shift and go to state 48


state 10

    (114) label_id -> identifier .
    (56) location -> identifier .
    (42) discrete_mode_name -> identifier .

    COLON           reduce using rule 114 (label_id -> identifier .)
    LBRACKET        reduce using rule 56 (location -> identifier .)
    ARROW           reduce using rule 56 (location -> identifier .)
    PLUS            reduce using rule 56 (location -> identifier .)
    MINUS           reduce using rule 56 (location -> identifier .)
    TIMES           reduce using rule 56 (location -> identifier .)
    DIVIDE          reduce using rule 56 (location -> identifier .)
    MOD             reduce using rule 56 (location -> identifier .)
    CONCAT          reduce using rule 56 (location -> identifier .)
    ASSIGN          reduce using rule 56 (location -> identifier .)
    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 11

    (113) action_statement -> action . SEMI

    SEMI            shift and go to state 49


state 12

    (124) assignment_action -> location . assigning_operator expression
    (57) location -> location . LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> location . ARROW
    (59) location -> location . LBRACKET expression_list RBRACKET
    (125) assigning_operator -> . PLUS ASSIGN
    (126) assigning_operator -> . MINUS ASSIGN
    (127) assigning_operator -> . TIMES ASSIGN
    (128) assigning_operator -> . DIVIDE ASSIGN
    (129) assigning_operator -> . MOD ASSIGN
    (130) assigning_operator -> . CONCAT ASSIGN
    (131) assigning_operator -> . ASSIGN

    LBRACKET        shift and go to state 52
    ARROW           shift and go to state 50
    PLUS            shift and go to state 57
    MINUS           shift and go to state 58
    TIMES           shift and go to state 51
    DIVIDE          shift and go to state 53
    MOD             shift and go to state 56
    CONCAT          shift and go to state 54
    ASSIGN          shift and go to state 59

    assigning_operator             shift and go to state 55

state 13

    (117) action -> if_action .

    SEMI            reduce using rule 117 (action -> if_action .)


state 14

    (6) statement -> newmode_statement .

    END             reduce using rule 6 (statement -> newmode_statement .)
    DCL             reduce using rule 6 (statement -> newmode_statement .)
    SYN             reduce using rule 6 (statement -> newmode_statement .)
    TYPE            reduce using rule 6 (statement -> newmode_statement .)
    ID              reduce using rule 6 (statement -> newmode_statement .)
    IF              reduce using rule 6 (statement -> newmode_statement .)
    DO              reduce using rule 6 (statement -> newmode_statement .)
    EXIT            reduce using rule 6 (statement -> newmode_statement .)
    RETURN          reduce using rule 6 (statement -> newmode_statement .)
    RESULT          reduce using rule 6 (statement -> newmode_statement .)
    NUM             reduce using rule 6 (statement -> newmode_statement .)
    PRED            reduce using rule 6 (statement -> newmode_statement .)
    SUCC            reduce using rule 6 (statement -> newmode_statement .)
    UPPER           reduce using rule 6 (statement -> newmode_statement .)
    LOWER           reduce using rule 6 (statement -> newmode_statement .)
    LENGTH          reduce using rule 6 (statement -> newmode_statement .)
    READ            reduce using rule 6 (statement -> newmode_statement .)
    PRINT           reduce using rule 6 (statement -> newmode_statement .)
    $end            reduce using rule 6 (statement -> newmode_statement .)


state 15

    (174) builtin_name -> UPPER .

    LPAREN          reduce using rule 174 (builtin_name -> UPPER .)


state 16

    (120) action -> call_action .
    (60) location -> call_action .

    SEMI            reduce using rule 120 (action -> call_action .)
    LBRACKET        reduce using rule 60 (location -> call_action .)
    ARROW           reduce using rule 60 (location -> call_action .)
    PLUS            reduce using rule 60 (location -> call_action .)
    MINUS           reduce using rule 60 (location -> call_action .)
    TIMES           reduce using rule 60 (location -> call_action .)
    DIVIDE          reduce using rule 60 (location -> call_action .)
    MOD             reduce using rule 60 (location -> call_action .)
    CONCAT          reduce using rule 60 (location -> call_action .)
    ASSIGN          reduce using rule 60 (location -> call_action .)


state 17

    (173) builtin_name -> SUCC .

    LPAREN          reduce using rule 173 (builtin_name -> SUCC .)


state 18

    (4) statement -> declaration_statement .

    END             reduce using rule 4 (statement -> declaration_statement .)
    DCL             reduce using rule 4 (statement -> declaration_statement .)
    SYN             reduce using rule 4 (statement -> declaration_statement .)
    TYPE            reduce using rule 4 (statement -> declaration_statement .)
    ID              reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    DO              reduce using rule 4 (statement -> declaration_statement .)
    EXIT            reduce using rule 4 (statement -> declaration_statement .)
    RETURN          reduce using rule 4 (statement -> declaration_statement .)
    RESULT          reduce using rule 4 (statement -> declaration_statement .)
    NUM             reduce using rule 4 (statement -> declaration_statement .)
    PRED            reduce using rule 4 (statement -> declaration_statement .)
    SUCC            reduce using rule 4 (statement -> declaration_statement .)
    UPPER           reduce using rule 4 (statement -> declaration_statement .)
    LOWER           reduce using rule 4 (statement -> declaration_statement .)
    LENGTH          reduce using rule 4 (statement -> declaration_statement .)
    READ            reduce using rule 4 (statement -> declaration_statement .)
    PRINT           reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)


state 19

    (160) call_action -> builtin_call .

    LBRACKET        reduce using rule 160 (call_action -> builtin_call .)
    ARROW           reduce using rule 160 (call_action -> builtin_call .)
    AND             reduce using rule 160 (call_action -> builtin_call .)
    OR              reduce using rule 160 (call_action -> builtin_call .)
    EQ              reduce using rule 160 (call_action -> builtin_call .)
    NEQ             reduce using rule 160 (call_action -> builtin_call .)
    GT              reduce using rule 160 (call_action -> builtin_call .)
    GE              reduce using rule 160 (call_action -> builtin_call .)
    LT              reduce using rule 160 (call_action -> builtin_call .)
    LE              reduce using rule 160 (call_action -> builtin_call .)
    PLUS            reduce using rule 160 (call_action -> builtin_call .)
    MINUS           reduce using rule 160 (call_action -> builtin_call .)
    TIMES           reduce using rule 160 (call_action -> builtin_call .)
    DIVIDE          reduce using rule 160 (call_action -> builtin_call .)
    MOD             reduce using rule 160 (call_action -> builtin_call .)
    NOT             reduce using rule 160 (call_action -> builtin_call .)
    IN              reduce using rule 160 (call_action -> builtin_call .)
    CONCAT          reduce using rule 160 (call_action -> builtin_call .)
    SEMI            reduce using rule 160 (call_action -> builtin_call .)
    THEN            reduce using rule 160 (call_action -> builtin_call .)
    RPAREN          reduce using rule 160 (call_action -> builtin_call .)
    COMMA           reduce using rule 160 (call_action -> builtin_call .)
    COLON           reduce using rule 160 (call_action -> builtin_call .)
    RBRACKET        reduce using rule 160 (call_action -> builtin_call .)
    DOWN            reduce using rule 160 (call_action -> builtin_call .)
    BY              reduce using rule 160 (call_action -> builtin_call .)
    TO              reduce using rule 160 (call_action -> builtin_call .)
    ELSE            reduce using rule 160 (call_action -> builtin_call .)
    ELSIF           reduce using rule 160 (call_action -> builtin_call .)
    FI              reduce using rule 160 (call_action -> builtin_call .)
    WHILE           reduce using rule 160 (call_action -> builtin_call .)
    ASSIGN          reduce using rule 160 (call_action -> builtin_call .)


state 20

    (0) S' -> program .



state 21

    (2) statement_list -> statement .

    END             reduce using rule 2 (statement_list -> statement .)
    DCL             reduce using rule 2 (statement_list -> statement .)
    SYN             reduce using rule 2 (statement_list -> statement .)
    TYPE            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    DO              reduce using rule 2 (statement_list -> statement .)
    EXIT            reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    RESULT          reduce using rule 2 (statement_list -> statement .)
    NUM             reduce using rule 2 (statement_list -> statement .)
    PRED            reduce using rule 2 (statement_list -> statement .)
    SUCC            reduce using rule 2 (statement_list -> statement .)
    UPPER           reduce using rule 2 (statement_list -> statement .)
    LOWER           reduce using rule 2 (statement_list -> statement .)
    LENGTH          reduce using rule 2 (statement_list -> statement .)
    READ            reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 22

    (159) call_action -> procedure_call .

    LBRACKET        reduce using rule 159 (call_action -> procedure_call .)
    ARROW           reduce using rule 159 (call_action -> procedure_call .)
    AND             reduce using rule 159 (call_action -> procedure_call .)
    OR              reduce using rule 159 (call_action -> procedure_call .)
    EQ              reduce using rule 159 (call_action -> procedure_call .)
    NEQ             reduce using rule 159 (call_action -> procedure_call .)
    GT              reduce using rule 159 (call_action -> procedure_call .)
    GE              reduce using rule 159 (call_action -> procedure_call .)
    LT              reduce using rule 159 (call_action -> procedure_call .)
    LE              reduce using rule 159 (call_action -> procedure_call .)
    PLUS            reduce using rule 159 (call_action -> procedure_call .)
    MINUS           reduce using rule 159 (call_action -> procedure_call .)
    TIMES           reduce using rule 159 (call_action -> procedure_call .)
    DIVIDE          reduce using rule 159 (call_action -> procedure_call .)
    MOD             reduce using rule 159 (call_action -> procedure_call .)
    NOT             reduce using rule 159 (call_action -> procedure_call .)
    IN              reduce using rule 159 (call_action -> procedure_call .)
    CONCAT          reduce using rule 159 (call_action -> procedure_call .)
    SEMI            reduce using rule 159 (call_action -> procedure_call .)
    THEN            reduce using rule 159 (call_action -> procedure_call .)
    RPAREN          reduce using rule 159 (call_action -> procedure_call .)
    COMMA           reduce using rule 159 (call_action -> procedure_call .)
    COLON           reduce using rule 159 (call_action -> procedure_call .)
    RBRACKET        reduce using rule 159 (call_action -> procedure_call .)
    DOWN            reduce using rule 159 (call_action -> procedure_call .)
    BY              reduce using rule 159 (call_action -> procedure_call .)
    TO              reduce using rule 159 (call_action -> procedure_call .)
    ELSE            reduce using rule 159 (call_action -> procedure_call .)
    ELSIF           reduce using rule 159 (call_action -> procedure_call .)
    FI              reduce using rule 159 (call_action -> procedure_call .)
    WHILE           reduce using rule 159 (call_action -> procedure_call .)
    ASSIGN          reduce using rule 159 (call_action -> procedure_call .)


state 23

    (5) statement -> synonym_statement .

    END             reduce using rule 5 (statement -> synonym_statement .)
    DCL             reduce using rule 5 (statement -> synonym_statement .)
    SYN             reduce using rule 5 (statement -> synonym_statement .)
    TYPE            reduce using rule 5 (statement -> synonym_statement .)
    ID              reduce using rule 5 (statement -> synonym_statement .)
    IF              reduce using rule 5 (statement -> synonym_statement .)
    DO              reduce using rule 5 (statement -> synonym_statement .)
    EXIT            reduce using rule 5 (statement -> synonym_statement .)
    RETURN          reduce using rule 5 (statement -> synonym_statement .)
    RESULT          reduce using rule 5 (statement -> synonym_statement .)
    NUM             reduce using rule 5 (statement -> synonym_statement .)
    PRED            reduce using rule 5 (statement -> synonym_statement .)
    SUCC            reduce using rule 5 (statement -> synonym_statement .)
    UPPER           reduce using rule 5 (statement -> synonym_statement .)
    LOWER           reduce using rule 5 (statement -> synonym_statement .)
    LENGTH          reduce using rule 5 (statement -> synonym_statement .)
    READ            reduce using rule 5 (statement -> synonym_statement .)
    PRINT           reduce using rule 5 (statement -> synonym_statement .)
    $end            reduce using rule 5 (statement -> synonym_statement .)


state 24

    (176) builtin_name -> LENGTH .

    LPAREN          reduce using rule 176 (builtin_name -> LENGTH .)


state 25

    (179) procedure_statement -> label_id . COLON procedure_definition SEMI
    (112) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 60


state 26

    (138) do_action -> DO . control_part SEMI action_statement_list OD
    (139) do_action -> DO . control_part SEMI OD
    (140) do_action -> DO . action_statement_list OD
    (141) control_part -> . for_control while_control
    (142) control_part -> . for_control
    (143) control_part -> . while_control
    (115) action_statement_list -> . action_statement
    (116) action_statement_list -> . action_statement_list action_statement
    (144) for_control -> . FOR iteration
    (158) while_control -> . WHILE boolean_expression
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    FOR             shift and go to state 62
    WHILE           shift and go to state 66
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    while_control                  shift and go to state 65
    result_action                  shift and go to state 2
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    if_action                      shift and go to state 13
    label_id                       shift and go to state 67
    control_part                   shift and go to state 61
    action_statement               shift and go to state 68
    call_action                    shift and go to state 16
    action_statement_list          shift and go to state 64
    for_control                    shift and go to state 63
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 27

    (171) builtin_name -> NUM .

    LPAREN          reduce using rule 171 (builtin_name -> NUM .)


state 28

    (168) result_action -> RESULT . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 70
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 29

    (9) declaration_statement -> DCL . declaration_list SEMI
    (10) declaration_list -> . declaration
    (11) declaration_list -> . declaration_list COMMA declaration
    (12) declaration -> . identifier_list mode initialization
    (13) declaration -> . identifier_list mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    identifier_list                shift and go to state 95
    identifier                     shift and go to state 44
    declaration                    shift and go to state 96
    declaration_list               shift and go to state 97

state 30

    (7) statement -> procedure_statement .

    END             reduce using rule 7 (statement -> procedure_statement .)
    DCL             reduce using rule 7 (statement -> procedure_statement .)
    SYN             reduce using rule 7 (statement -> procedure_statement .)
    TYPE            reduce using rule 7 (statement -> procedure_statement .)
    ID              reduce using rule 7 (statement -> procedure_statement .)
    IF              reduce using rule 7 (statement -> procedure_statement .)
    DO              reduce using rule 7 (statement -> procedure_statement .)
    EXIT            reduce using rule 7 (statement -> procedure_statement .)
    RETURN          reduce using rule 7 (statement -> procedure_statement .)
    RESULT          reduce using rule 7 (statement -> procedure_statement .)
    NUM             reduce using rule 7 (statement -> procedure_statement .)
    PRED            reduce using rule 7 (statement -> procedure_statement .)
    SUCC            reduce using rule 7 (statement -> procedure_statement .)
    UPPER           reduce using rule 7 (statement -> procedure_statement .)
    LOWER           reduce using rule 7 (statement -> procedure_statement .)
    LENGTH          reduce using rule 7 (statement -> procedure_statement .)
    READ            reduce using rule 7 (statement -> procedure_statement .)
    PRINT           reduce using rule 7 (statement -> procedure_statement .)
    $end            reduce using rule 7 (statement -> procedure_statement .)


state 31

    (177) builtin_name -> READ .

    LPAREN          reduce using rule 177 (builtin_name -> READ .)


state 32

    (8) statement -> action_statement .

    END             reduce using rule 8 (statement -> action_statement .)
    DCL             reduce using rule 8 (statement -> action_statement .)
    SYN             reduce using rule 8 (statement -> action_statement .)
    TYPE            reduce using rule 8 (statement -> action_statement .)
    ID              reduce using rule 8 (statement -> action_statement .)
    IF              reduce using rule 8 (statement -> action_statement .)
    DO              reduce using rule 8 (statement -> action_statement .)
    EXIT            reduce using rule 8 (statement -> action_statement .)
    RETURN          reduce using rule 8 (statement -> action_statement .)
    RESULT          reduce using rule 8 (statement -> action_statement .)
    NUM             reduce using rule 8 (statement -> action_statement .)
    PRED            reduce using rule 8 (statement -> action_statement .)
    SUCC            reduce using rule 8 (statement -> action_statement .)
    UPPER           reduce using rule 8 (statement -> action_statement .)
    LOWER           reduce using rule 8 (statement -> action_statement .)
    LENGTH          reduce using rule 8 (statement -> action_statement .)
    READ            reduce using rule 8 (statement -> action_statement .)
    PRINT           reduce using rule 8 (statement -> action_statement .)
    $end            reduce using rule 8 (statement -> action_statement .)


state 33

    (132) if_action -> IF . boolean_expression then_clause else_clause FI
    (133) if_action -> IF . boolean_expression then_clause FI
    (83) boolean_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    boolean_expression             shift and go to state 99
    expression                     shift and go to state 98
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    operand                        shift and go to state 74
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 34

    (24) newmode_statement -> TYPE . newmode_list SEMI
    (25) newmode_list -> . mode_definition
    (26) newmode_list -> . newmode_list COMMA mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    identifier_list                shift and go to state 100
    mode_definition                shift and go to state 101
    identifier                     shift and go to state 44
    newmode_list                   shift and go to state 102

state 35

    (178) builtin_name -> PRINT .

    LPAREN          reduce using rule 178 (builtin_name -> PRINT .)


state 36

    (166) return_action -> RETURN . expression
    (167) return_action -> RETURN .
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    SEMI            reduce using rule 167 (return_action -> RETURN .)
    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 103
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 37

    (119) action -> assignment_action .

    SEMI            reduce using rule 119 (action -> assignment_action .)


state 38

    (118) action -> do_action .

    SEMI            reduce using rule 118 (action -> do_action .)


state 39

    (122) action -> return_action .

    SEMI            reduce using rule 122 (action -> return_action .)


state 40

    (175) builtin_name -> LOWER .

    LPAREN          reduce using rule 175 (builtin_name -> LOWER .)


state 41

    (165) exit_action -> EXIT identifier .

    SEMI            reduce using rule 165 (exit_action -> EXIT identifier .)


state 42

    (21) synonym_definition -> identifier_list . mode ASSIGN constant_expression
    (22) synonym_definition -> identifier_list . ASSIGN constant_expression
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . identifier

    ASSIGN          shift and go to state 105
    COMMA           shift and go to state 122
    REF             shift and go to state 114
    ID              shift and go to state 7
    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    CHARS           shift and go to state 119
    ARRAY           shift and go to state 106

    discrete_range_mode            shift and go to state 104
    boolean_mode                   shift and go to state 108
    composite_mode                 shift and go to state 120
    mode                           shift and go to state 115
    discrete_mode_name             shift and go to state 107
    integer_mode                   shift and go to state 121
    character_mode                 shift and go to state 118
    array_mode                     shift and go to state 109
    reference_mode                 shift and go to state 111
    string_mode                    shift and go to state 123
    discrete_mode                  shift and go to state 124
    mode_name                      shift and go to state 116
    identifier                     shift and go to state 117

state 43

    (19) synonym_list -> synonym_definition .

    SEMI            reduce using rule 19 (synonym_list -> synonym_definition .)
    COMMA           reduce using rule 19 (synonym_list -> synonym_definition .)


state 44

    (15) identifier_list -> identifier .

    COMMA           reduce using rule 15 (identifier_list -> identifier .)
    REF             reduce using rule 15 (identifier_list -> identifier .)
    ID              reduce using rule 15 (identifier_list -> identifier .)
    INT             reduce using rule 15 (identifier_list -> identifier .)
    BOOL            reduce using rule 15 (identifier_list -> identifier .)
    CHAR            reduce using rule 15 (identifier_list -> identifier .)
    CHARS           reduce using rule 15 (identifier_list -> identifier .)
    ARRAY           reduce using rule 15 (identifier_list -> identifier .)
    ASSIGN          reduce using rule 15 (identifier_list -> identifier .)


state 45

    (18) synonym_statement -> SYN synonym_list . SEMI
    (20) synonym_list -> synonym_list . COMMA synonym_definition

    SEMI            shift and go to state 126
    COMMA           shift and go to state 125


state 46

    (161) procedure_call -> discrete_mode_name LPAREN . parameter_list RPAREN
    (162) procedure_call -> discrete_mode_name LPAREN . RPAREN
    (163) parameter_list -> . expression
    (164) parameter_list -> . parameter_list COMMA expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    RPAREN          shift and go to state 128
    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 127
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    parameter_list                 shift and go to state 129
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 47

    (3) statement_list -> statement_list statement .

    END             reduce using rule 3 (statement_list -> statement_list statement .)
    DCL             reduce using rule 3 (statement_list -> statement_list statement .)
    SYN             reduce using rule 3 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    DO              reduce using rule 3 (statement_list -> statement_list statement .)
    EXIT            reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    RESULT          reduce using rule 3 (statement_list -> statement_list statement .)
    NUM             reduce using rule 3 (statement_list -> statement_list statement .)
    PRED            reduce using rule 3 (statement_list -> statement_list statement .)
    SUCC            reduce using rule 3 (statement_list -> statement_list statement .)
    UPPER           reduce using rule 3 (statement_list -> statement_list statement .)
    LOWER           reduce using rule 3 (statement_list -> statement_list statement .)
    LENGTH          reduce using rule 3 (statement_list -> statement_list statement .)
    READ            reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 48

    (169) builtin_call -> builtin_name LPAREN . parameter_list RPAREN
    (170) builtin_call -> builtin_name LPAREN . RPAREN
    (163) parameter_list -> . expression
    (164) parameter_list -> . parameter_list COMMA expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    RPAREN          shift and go to state 130
    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 127
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    parameter_list                 shift and go to state 131
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 49

    (113) action_statement -> action SEMI .

    END             reduce using rule 113 (action_statement -> action SEMI .)
    DCL             reduce using rule 113 (action_statement -> action SEMI .)
    SYN             reduce using rule 113 (action_statement -> action SEMI .)
    TYPE            reduce using rule 113 (action_statement -> action SEMI .)
    ID              reduce using rule 113 (action_statement -> action SEMI .)
    IF              reduce using rule 113 (action_statement -> action SEMI .)
    DO              reduce using rule 113 (action_statement -> action SEMI .)
    EXIT            reduce using rule 113 (action_statement -> action SEMI .)
    RETURN          reduce using rule 113 (action_statement -> action SEMI .)
    RESULT          reduce using rule 113 (action_statement -> action SEMI .)
    NUM             reduce using rule 113 (action_statement -> action SEMI .)
    PRED            reduce using rule 113 (action_statement -> action SEMI .)
    SUCC            reduce using rule 113 (action_statement -> action SEMI .)
    UPPER           reduce using rule 113 (action_statement -> action SEMI .)
    LOWER           reduce using rule 113 (action_statement -> action SEMI .)
    LENGTH          reduce using rule 113 (action_statement -> action SEMI .)
    READ            reduce using rule 113 (action_statement -> action SEMI .)
    PRINT           reduce using rule 113 (action_statement -> action SEMI .)
    $end            reduce using rule 113 (action_statement -> action SEMI .)
    OD              reduce using rule 113 (action_statement -> action SEMI .)
    FI              reduce using rule 113 (action_statement -> action SEMI .)
    ELSE            reduce using rule 113 (action_statement -> action SEMI .)


state 50

    (58) location -> location ARROW .

    LBRACKET        reduce using rule 58 (location -> location ARROW .)
    ARROW           reduce using rule 58 (location -> location ARROW .)
    PLUS            reduce using rule 58 (location -> location ARROW .)
    MINUS           reduce using rule 58 (location -> location ARROW .)
    TIMES           reduce using rule 58 (location -> location ARROW .)
    DIVIDE          reduce using rule 58 (location -> location ARROW .)
    MOD             reduce using rule 58 (location -> location ARROW .)
    CONCAT          reduce using rule 58 (location -> location ARROW .)
    ASSIGN          reduce using rule 58 (location -> location ARROW .)
    AND             reduce using rule 58 (location -> location ARROW .)
    OR              reduce using rule 58 (location -> location ARROW .)
    EQ              reduce using rule 58 (location -> location ARROW .)
    NEQ             reduce using rule 58 (location -> location ARROW .)
    GT              reduce using rule 58 (location -> location ARROW .)
    GE              reduce using rule 58 (location -> location ARROW .)
    LT              reduce using rule 58 (location -> location ARROW .)
    LE              reduce using rule 58 (location -> location ARROW .)
    NOT             reduce using rule 58 (location -> location ARROW .)
    IN              reduce using rule 58 (location -> location ARROW .)
    DOWN            reduce using rule 58 (location -> location ARROW .)
    BY              reduce using rule 58 (location -> location ARROW .)
    TO              reduce using rule 58 (location -> location ARROW .)
    SEMI            reduce using rule 58 (location -> location ARROW .)
    THEN            reduce using rule 58 (location -> location ARROW .)
    RPAREN          reduce using rule 58 (location -> location ARROW .)
    COMMA           reduce using rule 58 (location -> location ARROW .)
    COLON           reduce using rule 58 (location -> location ARROW .)
    RBRACKET        reduce using rule 58 (location -> location ARROW .)
    ELSE            reduce using rule 58 (location -> location ARROW .)
    ELSIF           reduce using rule 58 (location -> location ARROW .)
    FI              reduce using rule 58 (location -> location ARROW .)
    WHILE           reduce using rule 58 (location -> location ARROW .)


state 51

    (127) assigning_operator -> TIMES . ASSIGN

    ASSIGN          shift and go to state 132


state 52

    (57) location -> location LBRACKET . lower_bound COLON upper_bound RBRACKET
    (59) location -> location LBRACKET . expression_list RBRACKET
    (61) lower_bound -> . expression
    (63) expression_list -> . expression
    (64) expression_list -> . expression_list COMMA expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    lower_bound                    shift and go to state 135
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 133
    builtin_call                   shift and go to state 19
    expression_list                shift and go to state 134
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 53

    (128) assigning_operator -> DIVIDE . ASSIGN

    ASSIGN          shift and go to state 136


state 54

    (130) assigning_operator -> CONCAT . ASSIGN

    ASSIGN          shift and go to state 137


state 55

    (124) assignment_action -> location assigning_operator . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 138
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 56

    (129) assigning_operator -> MOD . ASSIGN

    ASSIGN          shift and go to state 139


state 57

    (125) assigning_operator -> PLUS . ASSIGN

    ASSIGN          shift and go to state 140


state 58

    (126) assigning_operator -> MINUS . ASSIGN

    ASSIGN          shift and go to state 141


state 59

    (131) assigning_operator -> ASSIGN .

    IF              reduce using rule 131 (assigning_operator -> ASSIGN .)
    MINUS           reduce using rule 131 (assigning_operator -> ASSIGN .)
    NOT             reduce using rule 131 (assigning_operator -> ASSIGN .)
    ARROW           reduce using rule 131 (assigning_operator -> ASSIGN .)
    ID              reduce using rule 131 (assigning_operator -> ASSIGN .)
    ICONST          reduce using rule 131 (assigning_operator -> ASSIGN .)
    FALSE           reduce using rule 131 (assigning_operator -> ASSIGN .)
    TRUE            reduce using rule 131 (assigning_operator -> ASSIGN .)
    CCONST          reduce using rule 131 (assigning_operator -> ASSIGN .)
    NULL            reduce using rule 131 (assigning_operator -> ASSIGN .)
    SCONST          reduce using rule 131 (assigning_operator -> ASSIGN .)
    LPAREN          reduce using rule 131 (assigning_operator -> ASSIGN .)
    NUM             reduce using rule 131 (assigning_operator -> ASSIGN .)
    PRED            reduce using rule 131 (assigning_operator -> ASSIGN .)
    SUCC            reduce using rule 131 (assigning_operator -> ASSIGN .)
    UPPER           reduce using rule 131 (assigning_operator -> ASSIGN .)
    LOWER           reduce using rule 131 (assigning_operator -> ASSIGN .)
    LENGTH          reduce using rule 131 (assigning_operator -> ASSIGN .)
    READ            reduce using rule 131 (assigning_operator -> ASSIGN .)
    PRINT           reduce using rule 131 (assigning_operator -> ASSIGN .)


state 60

    (179) procedure_statement -> label_id COLON . procedure_definition SEMI
    (112) action_statement -> label_id COLON . action SEMI
    (180) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END
    (181) procedure_definition -> . PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END
    (182) procedure_definition -> . PROC LPAREN RPAREN result_spec SEMI statement_list END
    (183) procedure_definition -> . PROC LPAREN RPAREN SEMI statement_list END
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (17) identifier -> . ID
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    PROC            shift and go to state 142
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    ID              shift and go to state 7
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    result_action                  shift and go to state 2
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 80
    action                         shift and go to state 143
    if_action                      shift and go to state 13
    procedure_definition           shift and go to state 144
    call_action                    shift and go to state 16
    return_action                  shift and go to state 39
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38

state 61

    (138) do_action -> DO control_part . SEMI action_statement_list OD
    (139) do_action -> DO control_part . SEMI OD

    SEMI            shift and go to state 145


state 62

    (144) for_control -> FOR . iteration
    (145) iteration -> . step_enumeration
    (146) iteration -> . range_enumeration
    (147) step_enumeration -> . loop_counter ASSIGN start_value step_value DOWN end_value
    (148) step_enumeration -> . loop_counter ASSIGN start_value DOWN end_value
    (149) step_enumeration -> . loop_counter ASSIGN start_value step_value end_value
    (150) step_enumeration -> . loop_counter ASSIGN start_value end_value
    (156) range_enumeration -> . loop_counter DOWN IN discrete_mode
    (157) range_enumeration -> . loop_counter IN discrete_mode
    (151) loop_counter -> . identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    loop_counter                   shift and go to state 146
    iteration                      shift and go to state 147
    range_enumeration              shift and go to state 148
    step_enumeration               shift and go to state 149
    identifier                     shift and go to state 150

state 63

    (141) control_part -> for_control . while_control
    (142) control_part -> for_control .
    (158) while_control -> . WHILE boolean_expression

    SEMI            reduce using rule 142 (control_part -> for_control .)
    WHILE           shift and go to state 66

    while_control                  shift and go to state 151

state 64

    (140) do_action -> DO action_statement_list . OD
    (116) action_statement_list -> action_statement_list . action_statement
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    OD              shift and go to state 152
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    result_action                  shift and go to state 2
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    builtin_call                   shift and go to state 19
    if_action                      shift and go to state 13
    label_id                       shift and go to state 67
    action_statement               shift and go to state 153
    call_action                    shift and go to state 16
    return_action                  shift and go to state 39
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38

state 65

    (143) control_part -> while_control .

    SEMI            reduce using rule 143 (control_part -> while_control .)


state 66

    (158) while_control -> WHILE . boolean_expression
    (83) boolean_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    boolean_expression             shift and go to state 154
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 98
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 67

    (112) action_statement -> label_id . COLON action SEMI

    COLON           shift and go to state 155


state 68

    (115) action_statement_list -> action_statement .

    ID              reduce using rule 115 (action_statement_list -> action_statement .)
    IF              reduce using rule 115 (action_statement_list -> action_statement .)
    DO              reduce using rule 115 (action_statement_list -> action_statement .)
    EXIT            reduce using rule 115 (action_statement_list -> action_statement .)
    RETURN          reduce using rule 115 (action_statement_list -> action_statement .)
    RESULT          reduce using rule 115 (action_statement_list -> action_statement .)
    NUM             reduce using rule 115 (action_statement_list -> action_statement .)
    PRED            reduce using rule 115 (action_statement_list -> action_statement .)
    SUCC            reduce using rule 115 (action_statement_list -> action_statement .)
    UPPER           reduce using rule 115 (action_statement_list -> action_statement .)
    LOWER           reduce using rule 115 (action_statement_list -> action_statement .)
    LENGTH          reduce using rule 115 (action_statement_list -> action_statement .)
    READ            reduce using rule 115 (action_statement_list -> action_statement .)
    PRINT           reduce using rule 115 (action_statement_list -> action_statement .)
    FI              reduce using rule 115 (action_statement_list -> action_statement .)
    OD              reduce using rule 115 (action_statement_list -> action_statement .)
    ELSE            reduce using rule 115 (action_statement_list -> action_statement .)


state 69

    (111) referenced_location -> ARROW . location
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    ID              shift and go to state 7
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    call_action                    shift and go to state 79
    builtin_name                   shift and go to state 9
    builtin_call                   shift and go to state 19
    location                       shift and go to state 156
    discrete_mode_name             shift and go to state 4
    procedure_call                 shift and go to state 22
    identifier                     shift and go to state 80

state 70

    (168) result_action -> RESULT expression .

    SEMI            reduce using rule 168 (result_action -> RESULT expression .)


state 71

    (78) parenthesized_expression -> LPAREN . expression RPAREN
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 157
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 72

    (80) expression -> conditional_expression .

    SEMI            reduce using rule 80 (expression -> conditional_expression .)
    COLON           reduce using rule 80 (expression -> conditional_expression .)
    RBRACKET        reduce using rule 80 (expression -> conditional_expression .)
    COMMA           reduce using rule 80 (expression -> conditional_expression .)
    THEN            reduce using rule 80 (expression -> conditional_expression .)
    RPAREN          reduce using rule 80 (expression -> conditional_expression .)
    ELSE            reduce using rule 80 (expression -> conditional_expression .)
    ELSIF           reduce using rule 80 (expression -> conditional_expression .)
    WHILE           reduce using rule 80 (expression -> conditional_expression .)
    FI              reduce using rule 80 (expression -> conditional_expression .)
    DOWN            reduce using rule 80 (expression -> conditional_expression .)
    BY              reduce using rule 80 (expression -> conditional_expression .)
    TO              reduce using rule 80 (expression -> conditional_expression .)


state 73

    (72) literal -> CCONST .

    AND             reduce using rule 72 (literal -> CCONST .)
    OR              reduce using rule 72 (literal -> CCONST .)
    EQ              reduce using rule 72 (literal -> CCONST .)
    NEQ             reduce using rule 72 (literal -> CCONST .)
    GT              reduce using rule 72 (literal -> CCONST .)
    GE              reduce using rule 72 (literal -> CCONST .)
    LT              reduce using rule 72 (literal -> CCONST .)
    LE              reduce using rule 72 (literal -> CCONST .)
    PLUS            reduce using rule 72 (literal -> CCONST .)
    MINUS           reduce using rule 72 (literal -> CCONST .)
    TIMES           reduce using rule 72 (literal -> CCONST .)
    DIVIDE          reduce using rule 72 (literal -> CCONST .)
    MOD             reduce using rule 72 (literal -> CCONST .)
    NOT             reduce using rule 72 (literal -> CCONST .)
    IN              reduce using rule 72 (literal -> CCONST .)
    CONCAT          reduce using rule 72 (literal -> CCONST .)
    SEMI            reduce using rule 72 (literal -> CCONST .)
    THEN            reduce using rule 72 (literal -> CCONST .)
    RPAREN          reduce using rule 72 (literal -> CCONST .)
    COMMA           reduce using rule 72 (literal -> CCONST .)
    COLON           reduce using rule 72 (literal -> CCONST .)
    RBRACKET        reduce using rule 72 (literal -> CCONST .)
    DOWN            reduce using rule 72 (literal -> CCONST .)
    BY              reduce using rule 72 (literal -> CCONST .)
    TO              reduce using rule 72 (literal -> CCONST .)
    ELSE            reduce using rule 72 (literal -> CCONST .)
    ELSIF           reduce using rule 72 (literal -> CCONST .)
    FI              reduce using rule 72 (literal -> CCONST .)
    WHILE           reduce using rule 72 (literal -> CCONST .)
    LBRACKET        reduce using rule 72 (literal -> CCONST .)


state 74

    (88) binop -> operand .

    AND             reduce using rule 88 (binop -> operand .)
    OR              reduce using rule 88 (binop -> operand .)
    EQ              reduce using rule 88 (binop -> operand .)
    NEQ             reduce using rule 88 (binop -> operand .)
    GT              reduce using rule 88 (binop -> operand .)
    GE              reduce using rule 88 (binop -> operand .)
    LT              reduce using rule 88 (binop -> operand .)
    LE              reduce using rule 88 (binop -> operand .)
    PLUS            reduce using rule 88 (binop -> operand .)
    MINUS           reduce using rule 88 (binop -> operand .)
    TIMES           reduce using rule 88 (binop -> operand .)
    DIVIDE          reduce using rule 88 (binop -> operand .)
    MOD             reduce using rule 88 (binop -> operand .)
    NOT             reduce using rule 88 (binop -> operand .)
    IN              reduce using rule 88 (binop -> operand .)
    CONCAT          reduce using rule 88 (binop -> operand .)
    SEMI            reduce using rule 88 (binop -> operand .)
    THEN            reduce using rule 88 (binop -> operand .)
    RPAREN          reduce using rule 88 (binop -> operand .)
    COMMA           reduce using rule 88 (binop -> operand .)
    COLON           reduce using rule 88 (binop -> operand .)
    RBRACKET        reduce using rule 88 (binop -> operand .)
    DOWN            reduce using rule 88 (binop -> operand .)
    BY              reduce using rule 88 (binop -> operand .)
    TO              reduce using rule 88 (binop -> operand .)
    ELSE            reduce using rule 88 (binop -> operand .)
    ELSIF           reduce using rule 88 (binop -> operand .)
    FI              reduce using rule 88 (binop -> operand .)
    WHILE           reduce using rule 88 (binop -> operand .)


state 75

    (105) operand -> MINUS . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 158
    referenced_location            shift and go to state 94
    array_primitive_value          shift and go to state 92
    builtin_call                   shift and go to state 19
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    value_array_slice              shift and go to state 77
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    builtin_name                   shift and go to state 9
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 90
    literal                        shift and go to state 83
    identifier                     shift and go to state 80

state 76

    (73) literal -> NULL .

    AND             reduce using rule 73 (literal -> NULL .)
    OR              reduce using rule 73 (literal -> NULL .)
    EQ              reduce using rule 73 (literal -> NULL .)
    NEQ             reduce using rule 73 (literal -> NULL .)
    GT              reduce using rule 73 (literal -> NULL .)
    GE              reduce using rule 73 (literal -> NULL .)
    LT              reduce using rule 73 (literal -> NULL .)
    LE              reduce using rule 73 (literal -> NULL .)
    PLUS            reduce using rule 73 (literal -> NULL .)
    MINUS           reduce using rule 73 (literal -> NULL .)
    TIMES           reduce using rule 73 (literal -> NULL .)
    DIVIDE          reduce using rule 73 (literal -> NULL .)
    MOD             reduce using rule 73 (literal -> NULL .)
    NOT             reduce using rule 73 (literal -> NULL .)
    IN              reduce using rule 73 (literal -> NULL .)
    CONCAT          reduce using rule 73 (literal -> NULL .)
    SEMI            reduce using rule 73 (literal -> NULL .)
    THEN            reduce using rule 73 (literal -> NULL .)
    RPAREN          reduce using rule 73 (literal -> NULL .)
    COMMA           reduce using rule 73 (literal -> NULL .)
    COLON           reduce using rule 73 (literal -> NULL .)
    RBRACKET        reduce using rule 73 (literal -> NULL .)
    DOWN            reduce using rule 73 (literal -> NULL .)
    BY              reduce using rule 73 (literal -> NULL .)
    TO              reduce using rule 73 (literal -> NULL .)
    ELSE            reduce using rule 73 (literal -> NULL .)
    ELSIF           reduce using rule 73 (literal -> NULL .)
    FI              reduce using rule 73 (literal -> NULL .)
    WHILE           reduce using rule 73 (literal -> NULL .)
    LBRACKET        reduce using rule 73 (literal -> NULL .)


state 77

    (67) primitive_value -> value_array_slice .

    AND             reduce using rule 67 (primitive_value -> value_array_slice .)
    OR              reduce using rule 67 (primitive_value -> value_array_slice .)
    EQ              reduce using rule 67 (primitive_value -> value_array_slice .)
    NEQ             reduce using rule 67 (primitive_value -> value_array_slice .)
    GT              reduce using rule 67 (primitive_value -> value_array_slice .)
    GE              reduce using rule 67 (primitive_value -> value_array_slice .)
    LT              reduce using rule 67 (primitive_value -> value_array_slice .)
    LE              reduce using rule 67 (primitive_value -> value_array_slice .)
    PLUS            reduce using rule 67 (primitive_value -> value_array_slice .)
    MINUS           reduce using rule 67 (primitive_value -> value_array_slice .)
    TIMES           reduce using rule 67 (primitive_value -> value_array_slice .)
    DIVIDE          reduce using rule 67 (primitive_value -> value_array_slice .)
    MOD             reduce using rule 67 (primitive_value -> value_array_slice .)
    NOT             reduce using rule 67 (primitive_value -> value_array_slice .)
    IN              reduce using rule 67 (primitive_value -> value_array_slice .)
    CONCAT          reduce using rule 67 (primitive_value -> value_array_slice .)
    SEMI            reduce using rule 67 (primitive_value -> value_array_slice .)
    THEN            reduce using rule 67 (primitive_value -> value_array_slice .)
    RPAREN          reduce using rule 67 (primitive_value -> value_array_slice .)
    COMMA           reduce using rule 67 (primitive_value -> value_array_slice .)
    COLON           reduce using rule 67 (primitive_value -> value_array_slice .)
    RBRACKET        reduce using rule 67 (primitive_value -> value_array_slice .)
    DOWN            reduce using rule 67 (primitive_value -> value_array_slice .)
    BY              reduce using rule 67 (primitive_value -> value_array_slice .)
    TO              reduce using rule 67 (primitive_value -> value_array_slice .)
    ELSE            reduce using rule 67 (primitive_value -> value_array_slice .)
    ELSIF           reduce using rule 67 (primitive_value -> value_array_slice .)
    FI              reduce using rule 67 (primitive_value -> value_array_slice .)
    WHILE           reduce using rule 67 (primitive_value -> value_array_slice .)
    LBRACKET        reduce using rule 67 (primitive_value -> value_array_slice .)


state 78

    (110) operand1 -> primitive_value .
    (77) array_primitive_value -> primitive_value .

    AND             reduce using rule 110 (operand1 -> primitive_value .)
    OR              reduce using rule 110 (operand1 -> primitive_value .)
    EQ              reduce using rule 110 (operand1 -> primitive_value .)
    NEQ             reduce using rule 110 (operand1 -> primitive_value .)
    GT              reduce using rule 110 (operand1 -> primitive_value .)
    GE              reduce using rule 110 (operand1 -> primitive_value .)
    LT              reduce using rule 110 (operand1 -> primitive_value .)
    LE              reduce using rule 110 (operand1 -> primitive_value .)
    PLUS            reduce using rule 110 (operand1 -> primitive_value .)
    MINUS           reduce using rule 110 (operand1 -> primitive_value .)
    TIMES           reduce using rule 110 (operand1 -> primitive_value .)
    DIVIDE          reduce using rule 110 (operand1 -> primitive_value .)
    MOD             reduce using rule 110 (operand1 -> primitive_value .)
    NOT             reduce using rule 110 (operand1 -> primitive_value .)
    IN              reduce using rule 110 (operand1 -> primitive_value .)
    CONCAT          reduce using rule 110 (operand1 -> primitive_value .)
    COLON           reduce using rule 110 (operand1 -> primitive_value .)
    RBRACKET        reduce using rule 110 (operand1 -> primitive_value .)
    COMMA           reduce using rule 110 (operand1 -> primitive_value .)
    SEMI            reduce using rule 110 (operand1 -> primitive_value .)
    THEN            reduce using rule 110 (operand1 -> primitive_value .)
    RPAREN          reduce using rule 110 (operand1 -> primitive_value .)
    DOWN            reduce using rule 110 (operand1 -> primitive_value .)
    BY              reduce using rule 110 (operand1 -> primitive_value .)
    TO              reduce using rule 110 (operand1 -> primitive_value .)
    ELSE            reduce using rule 110 (operand1 -> primitive_value .)
    ELSIF           reduce using rule 110 (operand1 -> primitive_value .)
    FI              reduce using rule 110 (operand1 -> primitive_value .)
    WHILE           reduce using rule 110 (operand1 -> primitive_value .)
    LBRACKET        reduce using rule 77 (array_primitive_value -> primitive_value .)


state 79

    (60) location -> call_action .

    LBRACKET        reduce using rule 60 (location -> call_action .)
    ARROW           reduce using rule 60 (location -> call_action .)
    AND             reduce using rule 60 (location -> call_action .)
    OR              reduce using rule 60 (location -> call_action .)
    EQ              reduce using rule 60 (location -> call_action .)
    NEQ             reduce using rule 60 (location -> call_action .)
    GT              reduce using rule 60 (location -> call_action .)
    GE              reduce using rule 60 (location -> call_action .)
    LT              reduce using rule 60 (location -> call_action .)
    LE              reduce using rule 60 (location -> call_action .)
    PLUS            reduce using rule 60 (location -> call_action .)
    MINUS           reduce using rule 60 (location -> call_action .)
    TIMES           reduce using rule 60 (location -> call_action .)
    DIVIDE          reduce using rule 60 (location -> call_action .)
    MOD             reduce using rule 60 (location -> call_action .)
    NOT             reduce using rule 60 (location -> call_action .)
    IN              reduce using rule 60 (location -> call_action .)
    CONCAT          reduce using rule 60 (location -> call_action .)
    DOWN            reduce using rule 60 (location -> call_action .)
    BY              reduce using rule 60 (location -> call_action .)
    TO              reduce using rule 60 (location -> call_action .)
    SEMI            reduce using rule 60 (location -> call_action .)
    THEN            reduce using rule 60 (location -> call_action .)
    RPAREN          reduce using rule 60 (location -> call_action .)
    COMMA           reduce using rule 60 (location -> call_action .)
    COLON           reduce using rule 60 (location -> call_action .)
    RBRACKET        reduce using rule 60 (location -> call_action .)
    ELSE            reduce using rule 60 (location -> call_action .)
    ELSIF           reduce using rule 60 (location -> call_action .)
    FI              reduce using rule 60 (location -> call_action .)
    WHILE           reduce using rule 60 (location -> call_action .)


state 80

    (56) location -> identifier .
    (42) discrete_mode_name -> identifier .

    LBRACKET        reduce using rule 56 (location -> identifier .)
    ARROW           reduce using rule 56 (location -> identifier .)
    AND             reduce using rule 56 (location -> identifier .)
    OR              reduce using rule 56 (location -> identifier .)
    EQ              reduce using rule 56 (location -> identifier .)
    NEQ             reduce using rule 56 (location -> identifier .)
    GT              reduce using rule 56 (location -> identifier .)
    GE              reduce using rule 56 (location -> identifier .)
    LT              reduce using rule 56 (location -> identifier .)
    LE              reduce using rule 56 (location -> identifier .)
    PLUS            reduce using rule 56 (location -> identifier .)
    MINUS           reduce using rule 56 (location -> identifier .)
    TIMES           reduce using rule 56 (location -> identifier .)
    DIVIDE          reduce using rule 56 (location -> identifier .)
    MOD             reduce using rule 56 (location -> identifier .)
    NOT             reduce using rule 56 (location -> identifier .)
    IN              reduce using rule 56 (location -> identifier .)
    CONCAT          reduce using rule 56 (location -> identifier .)
    DOWN            reduce using rule 56 (location -> identifier .)
    BY              reduce using rule 56 (location -> identifier .)
    TO              reduce using rule 56 (location -> identifier .)
    SEMI            reduce using rule 56 (location -> identifier .)
    THEN            reduce using rule 56 (location -> identifier .)
    RPAREN          reduce using rule 56 (location -> identifier .)
    COMMA           reduce using rule 56 (location -> identifier .)
    COLON           reduce using rule 56 (location -> identifier .)
    RBRACKET        reduce using rule 56 (location -> identifier .)
    ELSE            reduce using rule 56 (location -> identifier .)
    ELSIF           reduce using rule 56 (location -> identifier .)
    FI              reduce using rule 56 (location -> identifier .)
    WHILE           reduce using rule 56 (location -> identifier .)
    ASSIGN          reduce using rule 56 (location -> identifier .)
    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 81

    (106) operand -> NOT . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 159
    referenced_location            shift and go to state 94
    array_primitive_value          shift and go to state 92
    builtin_call                   shift and go to state 19
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    value_array_slice              shift and go to state 77
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    builtin_name                   shift and go to state 9
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 90
    literal                        shift and go to state 83
    identifier                     shift and go to state 80

state 82

    (79) expression -> binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    SEMI            reduce using rule 79 (expression -> binop .)
    COLON           reduce using rule 79 (expression -> binop .)
    RBRACKET        reduce using rule 79 (expression -> binop .)
    COMMA           reduce using rule 79 (expression -> binop .)
    THEN            reduce using rule 79 (expression -> binop .)
    RPAREN          reduce using rule 79 (expression -> binop .)
    ELSE            reduce using rule 79 (expression -> binop .)
    ELSIF           reduce using rule 79 (expression -> binop .)
    WHILE           reduce using rule 79 (expression -> binop .)
    FI              reduce using rule 79 (expression -> binop .)
    DOWN            reduce using rule 79 (expression -> binop .)
    BY              reduce using rule 79 (expression -> binop .)
    TO              reduce using rule 79 (expression -> binop .)
    AND             shift and go to state 175
    OR              shift and go to state 168
    EQ              shift and go to state 167
    NEQ             shift and go to state 163
    GT              shift and go to state 165
    GE              shift and go to state 169
    LT              shift and go to state 171
    LE              shift and go to state 164
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174
    NOT             shift and go to state 172
    IN              shift and go to state 170
    CONCAT          shift and go to state 161


state 83

    (65) primitive_value -> literal .

    AND             reduce using rule 65 (primitive_value -> literal .)
    OR              reduce using rule 65 (primitive_value -> literal .)
    EQ              reduce using rule 65 (primitive_value -> literal .)
    NEQ             reduce using rule 65 (primitive_value -> literal .)
    GT              reduce using rule 65 (primitive_value -> literal .)
    GE              reduce using rule 65 (primitive_value -> literal .)
    LT              reduce using rule 65 (primitive_value -> literal .)
    LE              reduce using rule 65 (primitive_value -> literal .)
    PLUS            reduce using rule 65 (primitive_value -> literal .)
    MINUS           reduce using rule 65 (primitive_value -> literal .)
    TIMES           reduce using rule 65 (primitive_value -> literal .)
    DIVIDE          reduce using rule 65 (primitive_value -> literal .)
    MOD             reduce using rule 65 (primitive_value -> literal .)
    NOT             reduce using rule 65 (primitive_value -> literal .)
    IN              reduce using rule 65 (primitive_value -> literal .)
    CONCAT          reduce using rule 65 (primitive_value -> literal .)
    SEMI            reduce using rule 65 (primitive_value -> literal .)
    THEN            reduce using rule 65 (primitive_value -> literal .)
    RPAREN          reduce using rule 65 (primitive_value -> literal .)
    COMMA           reduce using rule 65 (primitive_value -> literal .)
    COLON           reduce using rule 65 (primitive_value -> literal .)
    RBRACKET        reduce using rule 65 (primitive_value -> literal .)
    DOWN            reduce using rule 65 (primitive_value -> literal .)
    BY              reduce using rule 65 (primitive_value -> literal .)
    TO              reduce using rule 65 (primitive_value -> literal .)
    ELSE            reduce using rule 65 (primitive_value -> literal .)
    ELSIF           reduce using rule 65 (primitive_value -> literal .)
    FI              reduce using rule 65 (primitive_value -> literal .)
    WHILE           reduce using rule 65 (primitive_value -> literal .)
    LBRACKET        reduce using rule 65 (primitive_value -> literal .)


state 84

    (107) operand -> operand1 .

    AND             reduce using rule 107 (operand -> operand1 .)
    OR              reduce using rule 107 (operand -> operand1 .)
    EQ              reduce using rule 107 (operand -> operand1 .)
    NEQ             reduce using rule 107 (operand -> operand1 .)
    GT              reduce using rule 107 (operand -> operand1 .)
    GE              reduce using rule 107 (operand -> operand1 .)
    LT              reduce using rule 107 (operand -> operand1 .)
    LE              reduce using rule 107 (operand -> operand1 .)
    PLUS            reduce using rule 107 (operand -> operand1 .)
    MINUS           reduce using rule 107 (operand -> operand1 .)
    TIMES           reduce using rule 107 (operand -> operand1 .)
    DIVIDE          reduce using rule 107 (operand -> operand1 .)
    MOD             reduce using rule 107 (operand -> operand1 .)
    NOT             reduce using rule 107 (operand -> operand1 .)
    IN              reduce using rule 107 (operand -> operand1 .)
    CONCAT          reduce using rule 107 (operand -> operand1 .)
    RBRACKET        reduce using rule 107 (operand -> operand1 .)
    COMMA           reduce using rule 107 (operand -> operand1 .)
    RPAREN          reduce using rule 107 (operand -> operand1 .)
    COLON           reduce using rule 107 (operand -> operand1 .)
    SEMI            reduce using rule 107 (operand -> operand1 .)
    THEN            reduce using rule 107 (operand -> operand1 .)
    FI              reduce using rule 107 (operand -> operand1 .)
    ELSE            reduce using rule 107 (operand -> operand1 .)
    ELSIF           reduce using rule 107 (operand -> operand1 .)
    DOWN            reduce using rule 107 (operand -> operand1 .)
    BY              reduce using rule 107 (operand -> operand1 .)
    TO              reduce using rule 107 (operand -> operand1 .)
    WHILE           reduce using rule 107 (operand -> operand1 .)


state 85

    (68) primitive_value -> parenthesized_expression .

    AND             reduce using rule 68 (primitive_value -> parenthesized_expression .)
    OR              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    EQ              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    NEQ             reduce using rule 68 (primitive_value -> parenthesized_expression .)
    GT              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    GE              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    LT              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    LE              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    PLUS            reduce using rule 68 (primitive_value -> parenthesized_expression .)
    MINUS           reduce using rule 68 (primitive_value -> parenthesized_expression .)
    TIMES           reduce using rule 68 (primitive_value -> parenthesized_expression .)
    DIVIDE          reduce using rule 68 (primitive_value -> parenthesized_expression .)
    MOD             reduce using rule 68 (primitive_value -> parenthesized_expression .)
    NOT             reduce using rule 68 (primitive_value -> parenthesized_expression .)
    IN              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    CONCAT          reduce using rule 68 (primitive_value -> parenthesized_expression .)
    SEMI            reduce using rule 68 (primitive_value -> parenthesized_expression .)
    THEN            reduce using rule 68 (primitive_value -> parenthesized_expression .)
    RPAREN          reduce using rule 68 (primitive_value -> parenthesized_expression .)
    COMMA           reduce using rule 68 (primitive_value -> parenthesized_expression .)
    COLON           reduce using rule 68 (primitive_value -> parenthesized_expression .)
    RBRACKET        reduce using rule 68 (primitive_value -> parenthesized_expression .)
    DOWN            reduce using rule 68 (primitive_value -> parenthesized_expression .)
    BY              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    TO              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    ELSE            reduce using rule 68 (primitive_value -> parenthesized_expression .)
    ELSIF           reduce using rule 68 (primitive_value -> parenthesized_expression .)
    FI              reduce using rule 68 (primitive_value -> parenthesized_expression .)
    WHILE           reduce using rule 68 (primitive_value -> parenthesized_expression .)
    LBRACKET        reduce using rule 68 (primitive_value -> parenthesized_expression .)


state 86

    (66) primitive_value -> value_array_element .

    AND             reduce using rule 66 (primitive_value -> value_array_element .)
    OR              reduce using rule 66 (primitive_value -> value_array_element .)
    EQ              reduce using rule 66 (primitive_value -> value_array_element .)
    NEQ             reduce using rule 66 (primitive_value -> value_array_element .)
    GT              reduce using rule 66 (primitive_value -> value_array_element .)
    GE              reduce using rule 66 (primitive_value -> value_array_element .)
    LT              reduce using rule 66 (primitive_value -> value_array_element .)
    LE              reduce using rule 66 (primitive_value -> value_array_element .)
    PLUS            reduce using rule 66 (primitive_value -> value_array_element .)
    MINUS           reduce using rule 66 (primitive_value -> value_array_element .)
    TIMES           reduce using rule 66 (primitive_value -> value_array_element .)
    DIVIDE          reduce using rule 66 (primitive_value -> value_array_element .)
    MOD             reduce using rule 66 (primitive_value -> value_array_element .)
    NOT             reduce using rule 66 (primitive_value -> value_array_element .)
    IN              reduce using rule 66 (primitive_value -> value_array_element .)
    CONCAT          reduce using rule 66 (primitive_value -> value_array_element .)
    SEMI            reduce using rule 66 (primitive_value -> value_array_element .)
    THEN            reduce using rule 66 (primitive_value -> value_array_element .)
    RPAREN          reduce using rule 66 (primitive_value -> value_array_element .)
    COMMA           reduce using rule 66 (primitive_value -> value_array_element .)
    COLON           reduce using rule 66 (primitive_value -> value_array_element .)
    RBRACKET        reduce using rule 66 (primitive_value -> value_array_element .)
    DOWN            reduce using rule 66 (primitive_value -> value_array_element .)
    BY              reduce using rule 66 (primitive_value -> value_array_element .)
    TO              reduce using rule 66 (primitive_value -> value_array_element .)
    ELSE            reduce using rule 66 (primitive_value -> value_array_element .)
    ELSIF           reduce using rule 66 (primitive_value -> value_array_element .)
    FI              reduce using rule 66 (primitive_value -> value_array_element .)
    WHILE           reduce using rule 66 (primitive_value -> value_array_element .)
    LBRACKET        reduce using rule 66 (primitive_value -> value_array_element .)


state 87

    (70) literal -> FALSE .

    AND             reduce using rule 70 (literal -> FALSE .)
    OR              reduce using rule 70 (literal -> FALSE .)
    EQ              reduce using rule 70 (literal -> FALSE .)
    NEQ             reduce using rule 70 (literal -> FALSE .)
    GT              reduce using rule 70 (literal -> FALSE .)
    GE              reduce using rule 70 (literal -> FALSE .)
    LT              reduce using rule 70 (literal -> FALSE .)
    LE              reduce using rule 70 (literal -> FALSE .)
    PLUS            reduce using rule 70 (literal -> FALSE .)
    MINUS           reduce using rule 70 (literal -> FALSE .)
    TIMES           reduce using rule 70 (literal -> FALSE .)
    DIVIDE          reduce using rule 70 (literal -> FALSE .)
    MOD             reduce using rule 70 (literal -> FALSE .)
    NOT             reduce using rule 70 (literal -> FALSE .)
    IN              reduce using rule 70 (literal -> FALSE .)
    CONCAT          reduce using rule 70 (literal -> FALSE .)
    SEMI            reduce using rule 70 (literal -> FALSE .)
    THEN            reduce using rule 70 (literal -> FALSE .)
    RPAREN          reduce using rule 70 (literal -> FALSE .)
    COMMA           reduce using rule 70 (literal -> FALSE .)
    COLON           reduce using rule 70 (literal -> FALSE .)
    RBRACKET        reduce using rule 70 (literal -> FALSE .)
    DOWN            reduce using rule 70 (literal -> FALSE .)
    BY              reduce using rule 70 (literal -> FALSE .)
    TO              reduce using rule 70 (literal -> FALSE .)
    ELSE            reduce using rule 70 (literal -> FALSE .)
    ELSIF           reduce using rule 70 (literal -> FALSE .)
    FI              reduce using rule 70 (literal -> FALSE .)
    WHILE           reduce using rule 70 (literal -> FALSE .)
    LBRACKET        reduce using rule 70 (literal -> FALSE .)


state 88

    (74) literal -> SCONST .

    AND             reduce using rule 74 (literal -> SCONST .)
    OR              reduce using rule 74 (literal -> SCONST .)
    EQ              reduce using rule 74 (literal -> SCONST .)
    NEQ             reduce using rule 74 (literal -> SCONST .)
    GT              reduce using rule 74 (literal -> SCONST .)
    GE              reduce using rule 74 (literal -> SCONST .)
    LT              reduce using rule 74 (literal -> SCONST .)
    LE              reduce using rule 74 (literal -> SCONST .)
    PLUS            reduce using rule 74 (literal -> SCONST .)
    MINUS           reduce using rule 74 (literal -> SCONST .)
    TIMES           reduce using rule 74 (literal -> SCONST .)
    DIVIDE          reduce using rule 74 (literal -> SCONST .)
    MOD             reduce using rule 74 (literal -> SCONST .)
    NOT             reduce using rule 74 (literal -> SCONST .)
    IN              reduce using rule 74 (literal -> SCONST .)
    CONCAT          reduce using rule 74 (literal -> SCONST .)
    SEMI            reduce using rule 74 (literal -> SCONST .)
    THEN            reduce using rule 74 (literal -> SCONST .)
    RPAREN          reduce using rule 74 (literal -> SCONST .)
    COMMA           reduce using rule 74 (literal -> SCONST .)
    COLON           reduce using rule 74 (literal -> SCONST .)
    RBRACKET        reduce using rule 74 (literal -> SCONST .)
    DOWN            reduce using rule 74 (literal -> SCONST .)
    BY              reduce using rule 74 (literal -> SCONST .)
    TO              reduce using rule 74 (literal -> SCONST .)
    ELSE            reduce using rule 74 (literal -> SCONST .)
    ELSIF           reduce using rule 74 (literal -> SCONST .)
    FI              reduce using rule 74 (literal -> SCONST .)
    WHILE           reduce using rule 74 (literal -> SCONST .)
    LBRACKET        reduce using rule 74 (literal -> SCONST .)


state 89

    (71) literal -> TRUE .

    AND             reduce using rule 71 (literal -> TRUE .)
    OR              reduce using rule 71 (literal -> TRUE .)
    EQ              reduce using rule 71 (literal -> TRUE .)
    NEQ             reduce using rule 71 (literal -> TRUE .)
    GT              reduce using rule 71 (literal -> TRUE .)
    GE              reduce using rule 71 (literal -> TRUE .)
    LT              reduce using rule 71 (literal -> TRUE .)
    LE              reduce using rule 71 (literal -> TRUE .)
    PLUS            reduce using rule 71 (literal -> TRUE .)
    MINUS           reduce using rule 71 (literal -> TRUE .)
    TIMES           reduce using rule 71 (literal -> TRUE .)
    DIVIDE          reduce using rule 71 (literal -> TRUE .)
    MOD             reduce using rule 71 (literal -> TRUE .)
    NOT             reduce using rule 71 (literal -> TRUE .)
    IN              reduce using rule 71 (literal -> TRUE .)
    CONCAT          reduce using rule 71 (literal -> TRUE .)
    SEMI            reduce using rule 71 (literal -> TRUE .)
    THEN            reduce using rule 71 (literal -> TRUE .)
    RPAREN          reduce using rule 71 (literal -> TRUE .)
    COMMA           reduce using rule 71 (literal -> TRUE .)
    COLON           reduce using rule 71 (literal -> TRUE .)
    RBRACKET        reduce using rule 71 (literal -> TRUE .)
    DOWN            reduce using rule 71 (literal -> TRUE .)
    BY              reduce using rule 71 (literal -> TRUE .)
    TO              reduce using rule 71 (literal -> TRUE .)
    ELSE            reduce using rule 71 (literal -> TRUE .)
    ELSIF           reduce using rule 71 (literal -> TRUE .)
    FI              reduce using rule 71 (literal -> TRUE .)
    WHILE           reduce using rule 71 (literal -> TRUE .)
    LBRACKET        reduce using rule 71 (literal -> TRUE .)


state 90

    (108) operand1 -> location .
    (57) location -> location . LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> location . ARROW
    (59) location -> location . LBRACKET expression_list RBRACKET

    AND             reduce using rule 108 (operand1 -> location .)
    OR              reduce using rule 108 (operand1 -> location .)
    EQ              reduce using rule 108 (operand1 -> location .)
    NEQ             reduce using rule 108 (operand1 -> location .)
    GT              reduce using rule 108 (operand1 -> location .)
    GE              reduce using rule 108 (operand1 -> location .)
    LT              reduce using rule 108 (operand1 -> location .)
    LE              reduce using rule 108 (operand1 -> location .)
    PLUS            reduce using rule 108 (operand1 -> location .)
    MINUS           reduce using rule 108 (operand1 -> location .)
    TIMES           reduce using rule 108 (operand1 -> location .)
    DIVIDE          reduce using rule 108 (operand1 -> location .)
    MOD             reduce using rule 108 (operand1 -> location .)
    NOT             reduce using rule 108 (operand1 -> location .)
    IN              reduce using rule 108 (operand1 -> location .)
    CONCAT          reduce using rule 108 (operand1 -> location .)
    COLON           reduce using rule 108 (operand1 -> location .)
    RBRACKET        reduce using rule 108 (operand1 -> location .)
    COMMA           reduce using rule 108 (operand1 -> location .)
    SEMI            reduce using rule 108 (operand1 -> location .)
    THEN            reduce using rule 108 (operand1 -> location .)
    RPAREN          reduce using rule 108 (operand1 -> location .)
    DOWN            reduce using rule 108 (operand1 -> location .)
    BY              reduce using rule 108 (operand1 -> location .)
    TO              reduce using rule 108 (operand1 -> location .)
    ELSE            reduce using rule 108 (operand1 -> location .)
    ELSIF           reduce using rule 108 (operand1 -> location .)
    FI              reduce using rule 108 (operand1 -> location .)
    WHILE           reduce using rule 108 (operand1 -> location .)
    LBRACKET        shift and go to state 52
    ARROW           shift and go to state 50


state 91

    (69) literal -> ICONST .

    AND             reduce using rule 69 (literal -> ICONST .)
    OR              reduce using rule 69 (literal -> ICONST .)
    EQ              reduce using rule 69 (literal -> ICONST .)
    NEQ             reduce using rule 69 (literal -> ICONST .)
    GT              reduce using rule 69 (literal -> ICONST .)
    GE              reduce using rule 69 (literal -> ICONST .)
    LT              reduce using rule 69 (literal -> ICONST .)
    LE              reduce using rule 69 (literal -> ICONST .)
    PLUS            reduce using rule 69 (literal -> ICONST .)
    MINUS           reduce using rule 69 (literal -> ICONST .)
    TIMES           reduce using rule 69 (literal -> ICONST .)
    DIVIDE          reduce using rule 69 (literal -> ICONST .)
    MOD             reduce using rule 69 (literal -> ICONST .)
    NOT             reduce using rule 69 (literal -> ICONST .)
    IN              reduce using rule 69 (literal -> ICONST .)
    CONCAT          reduce using rule 69 (literal -> ICONST .)
    SEMI            reduce using rule 69 (literal -> ICONST .)
    THEN            reduce using rule 69 (literal -> ICONST .)
    RPAREN          reduce using rule 69 (literal -> ICONST .)
    COMMA           reduce using rule 69 (literal -> ICONST .)
    COLON           reduce using rule 69 (literal -> ICONST .)
    RBRACKET        reduce using rule 69 (literal -> ICONST .)
    DOWN            reduce using rule 69 (literal -> ICONST .)
    BY              reduce using rule 69 (literal -> ICONST .)
    TO              reduce using rule 69 (literal -> ICONST .)
    ELSE            reduce using rule 69 (literal -> ICONST .)
    ELSIF           reduce using rule 69 (literal -> ICONST .)
    FI              reduce using rule 69 (literal -> ICONST .)
    WHILE           reduce using rule 69 (literal -> ICONST .)
    LBRACKET        reduce using rule 69 (literal -> ICONST .)


state 92

    (75) value_array_element -> array_primitive_value . LBRACKET expression_list RBRACKET
    (76) value_array_slice -> array_primitive_value . LBRACKET expression COLON expression RBRACKET

    LBRACKET        shift and go to state 176


state 93

    (81) conditional_expression -> IF . boolean_expression then_expression else_expression FI
    (82) conditional_expression -> IF . boolean_expression then_expression elsif_expression else_expression FI
    (83) boolean_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    boolean_expression             shift and go to state 177
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 98
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 94

    (109) operand1 -> referenced_location .

    AND             reduce using rule 109 (operand1 -> referenced_location .)
    OR              reduce using rule 109 (operand1 -> referenced_location .)
    EQ              reduce using rule 109 (operand1 -> referenced_location .)
    NEQ             reduce using rule 109 (operand1 -> referenced_location .)
    GT              reduce using rule 109 (operand1 -> referenced_location .)
    GE              reduce using rule 109 (operand1 -> referenced_location .)
    LT              reduce using rule 109 (operand1 -> referenced_location .)
    LE              reduce using rule 109 (operand1 -> referenced_location .)
    PLUS            reduce using rule 109 (operand1 -> referenced_location .)
    MINUS           reduce using rule 109 (operand1 -> referenced_location .)
    TIMES           reduce using rule 109 (operand1 -> referenced_location .)
    DIVIDE          reduce using rule 109 (operand1 -> referenced_location .)
    MOD             reduce using rule 109 (operand1 -> referenced_location .)
    NOT             reduce using rule 109 (operand1 -> referenced_location .)
    IN              reduce using rule 109 (operand1 -> referenced_location .)
    CONCAT          reduce using rule 109 (operand1 -> referenced_location .)
    COLON           reduce using rule 109 (operand1 -> referenced_location .)
    RBRACKET        reduce using rule 109 (operand1 -> referenced_location .)
    COMMA           reduce using rule 109 (operand1 -> referenced_location .)
    SEMI            reduce using rule 109 (operand1 -> referenced_location .)
    THEN            reduce using rule 109 (operand1 -> referenced_location .)
    RPAREN          reduce using rule 109 (operand1 -> referenced_location .)
    DOWN            reduce using rule 109 (operand1 -> referenced_location .)
    BY              reduce using rule 109 (operand1 -> referenced_location .)
    TO              reduce using rule 109 (operand1 -> referenced_location .)
    ELSE            reduce using rule 109 (operand1 -> referenced_location .)
    ELSIF           reduce using rule 109 (operand1 -> referenced_location .)
    FI              reduce using rule 109 (operand1 -> referenced_location .)
    WHILE           reduce using rule 109 (operand1 -> referenced_location .)


state 95

    (12) declaration -> identifier_list . mode initialization
    (13) declaration -> identifier_list . mode
    (16) identifier_list -> identifier_list . COMMA identifier
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 122
    REF             shift and go to state 114
    ID              shift and go to state 7
    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    CHARS           shift and go to state 119
    ARRAY           shift and go to state 106

    discrete_range_mode            shift and go to state 104
    boolean_mode                   shift and go to state 108
    composite_mode                 shift and go to state 120
    mode                           shift and go to state 178
    discrete_mode_name             shift and go to state 107
    integer_mode                   shift and go to state 121
    character_mode                 shift and go to state 118
    array_mode                     shift and go to state 109
    reference_mode                 shift and go to state 111
    string_mode                    shift and go to state 123
    discrete_mode                  shift and go to state 124
    mode_name                      shift and go to state 116
    identifier                     shift and go to state 117

state 96

    (10) declaration_list -> declaration .

    SEMI            reduce using rule 10 (declaration_list -> declaration .)
    COMMA           reduce using rule 10 (declaration_list -> declaration .)


state 97

    (9) declaration_statement -> DCL declaration_list . SEMI
    (11) declaration_list -> declaration_list . COMMA declaration

    SEMI            shift and go to state 180
    COMMA           shift and go to state 179


state 98

    (83) boolean_expression -> expression .

    THEN            reduce using rule 83 (boolean_expression -> expression .)
    SEMI            reduce using rule 83 (boolean_expression -> expression .)


state 99

    (132) if_action -> IF boolean_expression . then_clause else_clause FI
    (133) if_action -> IF boolean_expression . then_clause FI
    (134) then_clause -> . THEN action_statement_list
    (135) then_clause -> . THEN

    THEN            shift and go to state 181

    then_clause                    shift and go to state 182

state 100

    (27) mode_definition -> identifier_list . ASSIGN mode
    (16) identifier_list -> identifier_list . COMMA identifier

    ASSIGN          shift and go to state 183
    COMMA           shift and go to state 122


state 101

    (25) newmode_list -> mode_definition .

    SEMI            reduce using rule 25 (newmode_list -> mode_definition .)
    COMMA           reduce using rule 25 (newmode_list -> mode_definition .)


state 102

    (24) newmode_statement -> TYPE newmode_list . SEMI
    (26) newmode_list -> newmode_list . COMMA mode_definition

    SEMI            shift and go to state 184
    COMMA           shift and go to state 185


state 103

    (166) return_action -> RETURN expression .

    SEMI            reduce using rule 166 (return_action -> RETURN expression .)


state 104

    (35) discrete_mode -> discrete_range_mode .

    LPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RBRACKET        reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    COMMA           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    WHILE           reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    SEMI            reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    LOC             reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    RPAREN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)
    ASSIGN          reduce using rule 35 (discrete_mode -> discrete_range_mode .)


state 105

    (22) synonym_definition -> identifier_list ASSIGN . constant_expression
    (23) constant_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 186
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    constant_expression            shift and go to state 187
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 106

    (49) array_mode -> ARRAY . LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> ARRAY . LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode

    LBRACKET        shift and go to state 188


state 107

    (39) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN

    LPAREN          shift and go to state 189


state 108

    (33) discrete_mode -> boolean_mode .

    LPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    RBRACKET        reduce using rule 33 (discrete_mode -> boolean_mode .)
    COMMA           reduce using rule 33 (discrete_mode -> boolean_mode .)
    WHILE           reduce using rule 33 (discrete_mode -> boolean_mode .)
    SEMI            reduce using rule 33 (discrete_mode -> boolean_mode .)
    LOC             reduce using rule 33 (discrete_mode -> boolean_mode .)
    RPAREN          reduce using rule 33 (discrete_mode -> boolean_mode .)
    ASSIGN          reduce using rule 33 (discrete_mode -> boolean_mode .)


state 109

    (46) composite_mode -> array_mode .

    ASSIGN          reduce using rule 46 (composite_mode -> array_mode .)
    SEMI            reduce using rule 46 (composite_mode -> array_mode .)
    COMMA           reduce using rule 46 (composite_mode -> array_mode .)
    LOC             reduce using rule 46 (composite_mode -> array_mode .)
    RPAREN          reduce using rule 46 (composite_mode -> array_mode .)


state 110

    (38) character_mode -> CHAR .

    LPAREN          reduce using rule 38 (character_mode -> CHAR .)
    ASSIGN          reduce using rule 38 (character_mode -> CHAR .)
    SEMI            reduce using rule 38 (character_mode -> CHAR .)
    COMMA           reduce using rule 38 (character_mode -> CHAR .)
    LOC             reduce using rule 38 (character_mode -> CHAR .)
    RPAREN          reduce using rule 38 (character_mode -> CHAR .)
    WHILE           reduce using rule 38 (character_mode -> CHAR .)
    RBRACKET        reduce using rule 38 (character_mode -> CHAR .)


state 111

    (30) mode -> reference_mode .

    ASSIGN          reduce using rule 30 (mode -> reference_mode .)
    SEMI            reduce using rule 30 (mode -> reference_mode .)
    COMMA           reduce using rule 30 (mode -> reference_mode .)
    LOC             reduce using rule 30 (mode -> reference_mode .)
    RPAREN          reduce using rule 30 (mode -> reference_mode .)


state 112

    (37) boolean_mode -> BOOL .

    LPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    RBRACKET        reduce using rule 37 (boolean_mode -> BOOL .)
    COMMA           reduce using rule 37 (boolean_mode -> BOOL .)
    ASSIGN          reduce using rule 37 (boolean_mode -> BOOL .)
    SEMI            reduce using rule 37 (boolean_mode -> BOOL .)
    LOC             reduce using rule 37 (boolean_mode -> BOOL .)
    RPAREN          reduce using rule 37 (boolean_mode -> BOOL .)
    WHILE           reduce using rule 37 (boolean_mode -> BOOL .)


state 113

    (36) integer_mode -> INT .

    LPAREN          reduce using rule 36 (integer_mode -> INT .)
    ASSIGN          reduce using rule 36 (integer_mode -> INT .)
    SEMI            reduce using rule 36 (integer_mode -> INT .)
    COMMA           reduce using rule 36 (integer_mode -> INT .)
    WHILE           reduce using rule 36 (integer_mode -> INT .)
    LOC             reduce using rule 36 (integer_mode -> INT .)
    RPAREN          reduce using rule 36 (integer_mode -> INT .)
    RBRACKET        reduce using rule 36 (integer_mode -> INT .)


state 114

    (44) reference_mode -> REF . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 114
    ID              shift and go to state 7
    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    CHARS           shift and go to state 119
    ARRAY           shift and go to state 106

    discrete_range_mode            shift and go to state 104
    composite_mode                 shift and go to state 120
    discrete_mode                  shift and go to state 124
    discrete_mode_name             shift and go to state 107
    integer_mode                   shift and go to state 121
    boolean_mode                   shift and go to state 108
    character_mode                 shift and go to state 118
    array_mode                     shift and go to state 109
    reference_mode                 shift and go to state 111
    string_mode                    shift and go to state 123
    mode                           shift and go to state 190
    mode_name                      shift and go to state 116
    identifier                     shift and go to state 117

state 115

    (21) synonym_definition -> identifier_list mode . ASSIGN constant_expression

    ASSIGN          shift and go to state 191


state 116

    (28) mode -> mode_name .

    ASSIGN          reduce using rule 28 (mode -> mode_name .)
    SEMI            reduce using rule 28 (mode -> mode_name .)
    COMMA           reduce using rule 28 (mode -> mode_name .)
    LOC             reduce using rule 28 (mode -> mode_name .)
    RPAREN          reduce using rule 28 (mode -> mode_name .)


state 117

    (41) mode_name -> identifier .
    (42) discrete_mode_name -> identifier .

    ASSIGN          reduce using rule 41 (mode_name -> identifier .)
    SEMI            reduce using rule 41 (mode_name -> identifier .)
    COMMA           reduce using rule 41 (mode_name -> identifier .)
    LOC             reduce using rule 41 (mode_name -> identifier .)
    RPAREN          reduce using rule 41 (mode_name -> identifier .)
    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 118

    (34) discrete_mode -> character_mode .

    LPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    RBRACKET        reduce using rule 34 (discrete_mode -> character_mode .)
    COMMA           reduce using rule 34 (discrete_mode -> character_mode .)
    WHILE           reduce using rule 34 (discrete_mode -> character_mode .)
    SEMI            reduce using rule 34 (discrete_mode -> character_mode .)
    LOC             reduce using rule 34 (discrete_mode -> character_mode .)
    RPAREN          reduce using rule 34 (discrete_mode -> character_mode .)
    ASSIGN          reduce using rule 34 (discrete_mode -> character_mode .)


state 119

    (47) string_mode -> CHARS . LBRACKET string_length RBRACKET

    LBRACKET        shift and go to state 192


state 120

    (31) mode -> composite_mode .

    ASSIGN          reduce using rule 31 (mode -> composite_mode .)
    SEMI            reduce using rule 31 (mode -> composite_mode .)
    COMMA           reduce using rule 31 (mode -> composite_mode .)
    LOC             reduce using rule 31 (mode -> composite_mode .)
    RPAREN          reduce using rule 31 (mode -> composite_mode .)


state 121

    (32) discrete_mode -> integer_mode .

    LPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    RBRACKET        reduce using rule 32 (discrete_mode -> integer_mode .)
    COMMA           reduce using rule 32 (discrete_mode -> integer_mode .)
    WHILE           reduce using rule 32 (discrete_mode -> integer_mode .)
    SEMI            reduce using rule 32 (discrete_mode -> integer_mode .)
    LOC             reduce using rule 32 (discrete_mode -> integer_mode .)
    RPAREN          reduce using rule 32 (discrete_mode -> integer_mode .)
    ASSIGN          reduce using rule 32 (discrete_mode -> integer_mode .)


state 122

    (16) identifier_list -> identifier_list COMMA . identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    identifier                     shift and go to state 193

state 123

    (45) composite_mode -> string_mode .

    ASSIGN          reduce using rule 45 (composite_mode -> string_mode .)
    SEMI            reduce using rule 45 (composite_mode -> string_mode .)
    COMMA           reduce using rule 45 (composite_mode -> string_mode .)
    LOC             reduce using rule 45 (composite_mode -> string_mode .)
    RPAREN          reduce using rule 45 (composite_mode -> string_mode .)


state 124

    (29) mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    ASSIGN          reduce using rule 29 (mode -> discrete_mode .)
    SEMI            reduce using rule 29 (mode -> discrete_mode .)
    COMMA           reduce using rule 29 (mode -> discrete_mode .)
    LOC             reduce using rule 29 (mode -> discrete_mode .)
    RPAREN          reduce using rule 29 (mode -> discrete_mode .)
    LPAREN          shift and go to state 194


state 125

    (20) synonym_list -> synonym_list COMMA . synonym_definition
    (21) synonym_definition -> . identifier_list mode ASSIGN constant_expression
    (22) synonym_definition -> . identifier_list ASSIGN constant_expression
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    identifier_list                shift and go to state 42
    synonym_definition             shift and go to state 195
    identifier                     shift and go to state 44

state 126

    (18) synonym_statement -> SYN synonym_list SEMI .

    END             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DCL             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    SYN             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    TYPE            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    ID              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    IF              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    DO              reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    EXIT            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RETURN          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    RESULT          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    NUM             reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    PRED            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    SUCC            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    UPPER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LOWER           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    LENGTH          reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    READ            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    PRINT           reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)
    $end            reduce using rule 18 (synonym_statement -> SYN synonym_list SEMI .)


state 127

    (163) parameter_list -> expression .

    RPAREN          reduce using rule 163 (parameter_list -> expression .)
    COMMA           reduce using rule 163 (parameter_list -> expression .)


state 128

    (162) procedure_call -> discrete_mode_name LPAREN RPAREN .

    LBRACKET        reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    ARROW           reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    AND             reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    OR              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    EQ              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    NEQ             reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    GT              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    GE              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    LT              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    LE              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    PLUS            reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    MINUS           reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    TIMES           reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    MOD             reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    NOT             reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    IN              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    CONCAT          reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    SEMI            reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    THEN            reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    RPAREN          reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    COMMA           reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    COLON           reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    DOWN            reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    BY              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    TO              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    ELSE            reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    ELSIF           reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    FI              reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    WHILE           reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 162 (procedure_call -> discrete_mode_name LPAREN RPAREN .)


state 129

    (161) procedure_call -> discrete_mode_name LPAREN parameter_list . RPAREN
    (164) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 197
    COMMA           shift and go to state 196


state 130

    (170) builtin_call -> builtin_name LPAREN RPAREN .

    LBRACKET        reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    ARROW           reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    AND             reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    OR              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    EQ              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    NEQ             reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    GT              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    GE              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    LT              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    LE              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    PLUS            reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    MINUS           reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    TIMES           reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    DIVIDE          reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    MOD             reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    NOT             reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    IN              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    CONCAT          reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    RPAREN          reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    COMMA           reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    SEMI            reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    ASSIGN          reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    RBRACKET        reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    COLON           reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    THEN            reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    DOWN            reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    BY              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    TO              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSE            reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    ELSIF           reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    FI              reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)
    WHILE           reduce using rule 170 (builtin_call -> builtin_name LPAREN RPAREN .)


state 131

    (169) builtin_call -> builtin_name LPAREN parameter_list . RPAREN
    (164) parameter_list -> parameter_list . COMMA expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 196


state 132

    (127) assigning_operator -> TIMES ASSIGN .

    IF              reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    MINUS           reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    NOT             reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    ARROW           reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    ID              reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    ICONST          reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    FALSE           reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    TRUE            reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    CCONST          reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    NULL            reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    SCONST          reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    LPAREN          reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    NUM             reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    PRED            reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    SUCC            reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    UPPER           reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    LOWER           reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    LENGTH          reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    READ            reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)
    PRINT           reduce using rule 127 (assigning_operator -> TIMES ASSIGN .)


state 133

    (61) lower_bound -> expression .
    (63) expression_list -> expression .

    COLON           reduce using rule 61 (lower_bound -> expression .)
    RBRACKET        reduce using rule 63 (expression_list -> expression .)
    COMMA           reduce using rule 63 (expression_list -> expression .)


state 134

    (59) location -> location LBRACKET expression_list . RBRACKET
    (64) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 200
    COMMA           shift and go to state 199


state 135

    (57) location -> location LBRACKET lower_bound . COLON upper_bound RBRACKET

    COLON           shift and go to state 201


state 136

    (128) assigning_operator -> DIVIDE ASSIGN .

    IF              reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    MINUS           reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    NOT             reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    ARROW           reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    ID              reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    ICONST          reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    FALSE           reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    TRUE            reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    CCONST          reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    NULL            reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    SCONST          reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    LPAREN          reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    NUM             reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    PRED            reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    SUCC            reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    UPPER           reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    LOWER           reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    LENGTH          reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    READ            reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)
    PRINT           reduce using rule 128 (assigning_operator -> DIVIDE ASSIGN .)


state 137

    (130) assigning_operator -> CONCAT ASSIGN .

    IF              reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    MINUS           reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    NOT             reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    ARROW           reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    ID              reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    ICONST          reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    FALSE           reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    TRUE            reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    CCONST          reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    NULL            reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    SCONST          reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    LPAREN          reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    NUM             reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    PRED            reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    SUCC            reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    UPPER           reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    LOWER           reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    LENGTH          reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    READ            reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)
    PRINT           reduce using rule 130 (assigning_operator -> CONCAT ASSIGN .)


state 138

    (124) assignment_action -> location assigning_operator expression .

    SEMI            reduce using rule 124 (assignment_action -> location assigning_operator expression .)


state 139

    (129) assigning_operator -> MOD ASSIGN .

    IF              reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    MINUS           reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    NOT             reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    ARROW           reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    ID              reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    ICONST          reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    FALSE           reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    TRUE            reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    CCONST          reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    NULL            reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    SCONST          reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    LPAREN          reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    NUM             reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    PRED            reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    SUCC            reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    UPPER           reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    LOWER           reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    LENGTH          reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    READ            reduce using rule 129 (assigning_operator -> MOD ASSIGN .)
    PRINT           reduce using rule 129 (assigning_operator -> MOD ASSIGN .)


state 140

    (125) assigning_operator -> PLUS ASSIGN .

    IF              reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    MINUS           reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    NOT             reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    ARROW           reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    ID              reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    ICONST          reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    FALSE           reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    TRUE            reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    CCONST          reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    NULL            reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    SCONST          reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    LPAREN          reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    NUM             reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    PRED            reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    SUCC            reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    UPPER           reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    LOWER           reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    LENGTH          reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    READ            reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)
    PRINT           reduce using rule 125 (assigning_operator -> PLUS ASSIGN .)


state 141

    (126) assigning_operator -> MINUS ASSIGN .

    IF              reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    MINUS           reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    NOT             reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    ARROW           reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    ID              reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    ICONST          reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    FALSE           reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    TRUE            reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    CCONST          reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    NULL            reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    SCONST          reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    LPAREN          reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    NUM             reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    PRED            reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    SUCC            reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    UPPER           reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    LOWER           reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    LENGTH          reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    READ            reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)
    PRINT           reduce using rule 126 (assigning_operator -> MINUS ASSIGN .)


state 142

    (180) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END
    (181) procedure_definition -> PROC . LPAREN formal_parameter_list RPAREN SEMI statement_list END
    (182) procedure_definition -> PROC . LPAREN RPAREN result_spec SEMI statement_list END
    (183) procedure_definition -> PROC . LPAREN RPAREN SEMI statement_list END

    LPAREN          shift and go to state 202


state 143

    (112) action_statement -> label_id COLON action . SEMI

    SEMI            shift and go to state 203


state 144

    (179) procedure_statement -> label_id COLON procedure_definition . SEMI

    SEMI            shift and go to state 204


state 145

    (138) do_action -> DO control_part SEMI . action_statement_list OD
    (139) do_action -> DO control_part SEMI . OD
    (115) action_statement_list -> . action_statement
    (116) action_statement_list -> . action_statement_list action_statement
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    OD              shift and go to state 205
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    builtin_call                   shift and go to state 19
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    label_id                       shift and go to state 67
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    result_action                  shift and go to state 2
    if_action                      shift and go to state 13
    exit_action                    shift and go to state 6
    action_statement               shift and go to state 68
    call_action                    shift and go to state 16
    action_statement_list          shift and go to state 206
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 146

    (147) step_enumeration -> loop_counter . ASSIGN start_value step_value DOWN end_value
    (148) step_enumeration -> loop_counter . ASSIGN start_value DOWN end_value
    (149) step_enumeration -> loop_counter . ASSIGN start_value step_value end_value
    (150) step_enumeration -> loop_counter . ASSIGN start_value end_value
    (156) range_enumeration -> loop_counter . DOWN IN discrete_mode
    (157) range_enumeration -> loop_counter . IN discrete_mode

    ASSIGN          shift and go to state 209
    DOWN            shift and go to state 208
    IN              shift and go to state 207


state 147

    (144) for_control -> FOR iteration .

    WHILE           reduce using rule 144 (for_control -> FOR iteration .)
    SEMI            reduce using rule 144 (for_control -> FOR iteration .)


state 148

    (146) iteration -> range_enumeration .

    WHILE           reduce using rule 146 (iteration -> range_enumeration .)
    SEMI            reduce using rule 146 (iteration -> range_enumeration .)


state 149

    (145) iteration -> step_enumeration .

    WHILE           reduce using rule 145 (iteration -> step_enumeration .)
    SEMI            reduce using rule 145 (iteration -> step_enumeration .)


state 150

    (151) loop_counter -> identifier .

    ASSIGN          reduce using rule 151 (loop_counter -> identifier .)
    DOWN            reduce using rule 151 (loop_counter -> identifier .)
    IN              reduce using rule 151 (loop_counter -> identifier .)


state 151

    (141) control_part -> for_control while_control .

    SEMI            reduce using rule 141 (control_part -> for_control while_control .)


state 152

    (140) do_action -> DO action_statement_list OD .

    SEMI            reduce using rule 140 (do_action -> DO action_statement_list OD .)


state 153

    (116) action_statement_list -> action_statement_list action_statement .

    ID              reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    IF              reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    DO              reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    EXIT            reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    RETURN          reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    RESULT          reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    NUM             reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    PRED            reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    SUCC            reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    UPPER           reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    LOWER           reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    LENGTH          reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    READ            reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    PRINT           reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    FI              reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    OD              reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)
    ELSE            reduce using rule 116 (action_statement_list -> action_statement_list action_statement .)


state 154

    (158) while_control -> WHILE boolean_expression .

    SEMI            reduce using rule 158 (while_control -> WHILE boolean_expression .)


state 155

    (112) action_statement -> label_id COLON . action SEMI
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (17) identifier -> . ID
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    ID              shift and go to state 7
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    result_action                  shift and go to state 2
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 80
    action                         shift and go to state 143
    if_action                      shift and go to state 13
    call_action                    shift and go to state 16
    return_action                  shift and go to state 39
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38

state 156

    (111) referenced_location -> ARROW location .
    (57) location -> location . LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> location . ARROW
    (59) location -> location . LBRACKET expression_list RBRACKET

    AND             reduce using rule 111 (referenced_location -> ARROW location .)
    OR              reduce using rule 111 (referenced_location -> ARROW location .)
    EQ              reduce using rule 111 (referenced_location -> ARROW location .)
    NEQ             reduce using rule 111 (referenced_location -> ARROW location .)
    GT              reduce using rule 111 (referenced_location -> ARROW location .)
    GE              reduce using rule 111 (referenced_location -> ARROW location .)
    LT              reduce using rule 111 (referenced_location -> ARROW location .)
    LE              reduce using rule 111 (referenced_location -> ARROW location .)
    PLUS            reduce using rule 111 (referenced_location -> ARROW location .)
    MINUS           reduce using rule 111 (referenced_location -> ARROW location .)
    TIMES           reduce using rule 111 (referenced_location -> ARROW location .)
    DIVIDE          reduce using rule 111 (referenced_location -> ARROW location .)
    MOD             reduce using rule 111 (referenced_location -> ARROW location .)
    NOT             reduce using rule 111 (referenced_location -> ARROW location .)
    IN              reduce using rule 111 (referenced_location -> ARROW location .)
    CONCAT          reduce using rule 111 (referenced_location -> ARROW location .)
    SEMI            reduce using rule 111 (referenced_location -> ARROW location .)
    THEN            reduce using rule 111 (referenced_location -> ARROW location .)
    RPAREN          reduce using rule 111 (referenced_location -> ARROW location .)
    COMMA           reduce using rule 111 (referenced_location -> ARROW location .)
    COLON           reduce using rule 111 (referenced_location -> ARROW location .)
    RBRACKET        reduce using rule 111 (referenced_location -> ARROW location .)
    DOWN            reduce using rule 111 (referenced_location -> ARROW location .)
    BY              reduce using rule 111 (referenced_location -> ARROW location .)
    TO              reduce using rule 111 (referenced_location -> ARROW location .)
    ELSE            reduce using rule 111 (referenced_location -> ARROW location .)
    ELSIF           reduce using rule 111 (referenced_location -> ARROW location .)
    FI              reduce using rule 111 (referenced_location -> ARROW location .)
    WHILE           reduce using rule 111 (referenced_location -> ARROW location .)
    LBRACKET        shift and go to state 52
    ARROW           shift and go to state 50


state 157

    (78) parenthesized_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 210


state 158

    (105) operand -> MINUS operand1 .

    AND             reduce using rule 105 (operand -> MINUS operand1 .)
    OR              reduce using rule 105 (operand -> MINUS operand1 .)
    EQ              reduce using rule 105 (operand -> MINUS operand1 .)
    NEQ             reduce using rule 105 (operand -> MINUS operand1 .)
    GT              reduce using rule 105 (operand -> MINUS operand1 .)
    GE              reduce using rule 105 (operand -> MINUS operand1 .)
    LT              reduce using rule 105 (operand -> MINUS operand1 .)
    LE              reduce using rule 105 (operand -> MINUS operand1 .)
    PLUS            reduce using rule 105 (operand -> MINUS operand1 .)
    MINUS           reduce using rule 105 (operand -> MINUS operand1 .)
    TIMES           reduce using rule 105 (operand -> MINUS operand1 .)
    DIVIDE          reduce using rule 105 (operand -> MINUS operand1 .)
    MOD             reduce using rule 105 (operand -> MINUS operand1 .)
    NOT             reduce using rule 105 (operand -> MINUS operand1 .)
    IN              reduce using rule 105 (operand -> MINUS operand1 .)
    CONCAT          reduce using rule 105 (operand -> MINUS operand1 .)
    RBRACKET        reduce using rule 105 (operand -> MINUS operand1 .)
    COMMA           reduce using rule 105 (operand -> MINUS operand1 .)
    RPAREN          reduce using rule 105 (operand -> MINUS operand1 .)
    COLON           reduce using rule 105 (operand -> MINUS operand1 .)
    SEMI            reduce using rule 105 (operand -> MINUS operand1 .)
    THEN            reduce using rule 105 (operand -> MINUS operand1 .)
    FI              reduce using rule 105 (operand -> MINUS operand1 .)
    ELSE            reduce using rule 105 (operand -> MINUS operand1 .)
    ELSIF           reduce using rule 105 (operand -> MINUS operand1 .)
    DOWN            reduce using rule 105 (operand -> MINUS operand1 .)
    BY              reduce using rule 105 (operand -> MINUS operand1 .)
    TO              reduce using rule 105 (operand -> MINUS operand1 .)
    WHILE           reduce using rule 105 (operand -> MINUS operand1 .)


state 159

    (106) operand -> NOT operand1 .

    AND             reduce using rule 106 (operand -> NOT operand1 .)
    OR              reduce using rule 106 (operand -> NOT operand1 .)
    EQ              reduce using rule 106 (operand -> NOT operand1 .)
    NEQ             reduce using rule 106 (operand -> NOT operand1 .)
    GT              reduce using rule 106 (operand -> NOT operand1 .)
    GE              reduce using rule 106 (operand -> NOT operand1 .)
    LT              reduce using rule 106 (operand -> NOT operand1 .)
    LE              reduce using rule 106 (operand -> NOT operand1 .)
    PLUS            reduce using rule 106 (operand -> NOT operand1 .)
    MINUS           reduce using rule 106 (operand -> NOT operand1 .)
    TIMES           reduce using rule 106 (operand -> NOT operand1 .)
    DIVIDE          reduce using rule 106 (operand -> NOT operand1 .)
    MOD             reduce using rule 106 (operand -> NOT operand1 .)
    NOT             reduce using rule 106 (operand -> NOT operand1 .)
    IN              reduce using rule 106 (operand -> NOT operand1 .)
    CONCAT          reduce using rule 106 (operand -> NOT operand1 .)
    RBRACKET        reduce using rule 106 (operand -> NOT operand1 .)
    COMMA           reduce using rule 106 (operand -> NOT operand1 .)
    RPAREN          reduce using rule 106 (operand -> NOT operand1 .)
    COLON           reduce using rule 106 (operand -> NOT operand1 .)
    SEMI            reduce using rule 106 (operand -> NOT operand1 .)
    THEN            reduce using rule 106 (operand -> NOT operand1 .)
    FI              reduce using rule 106 (operand -> NOT operand1 .)
    ELSE            reduce using rule 106 (operand -> NOT operand1 .)
    ELSIF           reduce using rule 106 (operand -> NOT operand1 .)
    DOWN            reduce using rule 106 (operand -> NOT operand1 .)
    BY              reduce using rule 106 (operand -> NOT operand1 .)
    TO              reduce using rule 106 (operand -> NOT operand1 .)
    WHILE           reduce using rule 106 (operand -> NOT operand1 .)


state 160

    (97) binop -> binop PLUS . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 211
    procedure_call                 shift and go to state 22

state 161

    (104) binop -> binop CONCAT . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 212
    procedure_call                 shift and go to state 22

state 162

    (99) binop -> binop TIMES . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 213
    procedure_call                 shift and go to state 22

state 163

    (92) binop -> binop NEQ . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 214
    procedure_call                 shift and go to state 22

state 164

    (96) binop -> binop LE . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 215
    procedure_call                 shift and go to state 22

state 165

    (93) binop -> binop GT . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 216
    procedure_call                 shift and go to state 22

state 166

    (100) binop -> binop DIVIDE . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 217
    procedure_call                 shift and go to state 22

state 167

    (91) binop -> binop EQ . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 218
    procedure_call                 shift and go to state 22

state 168

    (90) binop -> binop OR . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 219
    procedure_call                 shift and go to state 22

state 169

    (94) binop -> binop GE . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 220
    procedure_call                 shift and go to state 22

state 170

    (103) binop -> binop IN . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 221
    procedure_call                 shift and go to state 22

state 171

    (95) binop -> binop LT . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 222
    procedure_call                 shift and go to state 22

state 172

    (102) binop -> binop NOT . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 223
    procedure_call                 shift and go to state 22

state 173

    (98) binop -> binop MINUS . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 224
    procedure_call                 shift and go to state 22

state 174

    (101) binop -> binop MOD . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 225
    procedure_call                 shift and go to state 22

state 175

    (89) binop -> binop AND . binop
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    builtin_call                   shift and go to state 19
    value_array_element            shift and go to state 86
    discrete_mode_name             shift and go to state 4
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    value_array_slice              shift and go to state 77
    literal                        shift and go to state 83
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 226
    procedure_call                 shift and go to state 22

state 176

    (75) value_array_element -> array_primitive_value LBRACKET . expression_list RBRACKET
    (76) value_array_slice -> array_primitive_value LBRACKET . expression COLON expression RBRACKET
    (63) expression_list -> . expression
    (64) expression_list -> . expression_list COMMA expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 227
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    expression_list                shift and go to state 228
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 177

    (81) conditional_expression -> IF boolean_expression . then_expression else_expression FI
    (82) conditional_expression -> IF boolean_expression . then_expression elsif_expression else_expression FI
    (84) then_expression -> . THEN expression

    THEN            shift and go to state 229

    then_expression                shift and go to state 230

state 178

    (12) declaration -> identifier_list mode . initialization
    (13) declaration -> identifier_list mode .
    (14) initialization -> . ASSIGN expression

    SEMI            reduce using rule 13 (declaration -> identifier_list mode .)
    COMMA           reduce using rule 13 (declaration -> identifier_list mode .)
    ASSIGN          shift and go to state 231

    initialization                 shift and go to state 232

state 179

    (11) declaration_list -> declaration_list COMMA . declaration
    (12) declaration -> . identifier_list mode initialization
    (13) declaration -> . identifier_list mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    identifier_list                shift and go to state 95
    identifier                     shift and go to state 44
    declaration                    shift and go to state 233

state 180

    (9) declaration_statement -> DCL declaration_list SEMI .

    END             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DCL             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SYN             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    TYPE            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    ID              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    IF              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    DO              reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    EXIT            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RETURN          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    RESULT          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    NUM             reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRED            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    SUCC            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    UPPER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LOWER           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    LENGTH          reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    READ            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    PRINT           reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)
    $end            reduce using rule 9 (declaration_statement -> DCL declaration_list SEMI .)


state 181

    (134) then_clause -> THEN . action_statement_list
    (135) then_clause -> THEN .
    (115) action_statement_list -> . action_statement
    (116) action_statement_list -> . action_statement_list action_statement
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    FI              reduce using rule 135 (then_clause -> THEN .)
    ELSE            reduce using rule 135 (then_clause -> THEN .)
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    result_action                  shift and go to state 2
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    builtin_call                   shift and go to state 19
    if_action                      shift and go to state 13
    label_id                       shift and go to state 67
    action_statement               shift and go to state 68
    call_action                    shift and go to state 16
    return_action                  shift and go to state 39
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    action_statement_list          shift and go to state 234

state 182

    (132) if_action -> IF boolean_expression then_clause . else_clause FI
    (133) if_action -> IF boolean_expression then_clause . FI
    (136) else_clause -> . ELSE action_statement_list
    (137) else_clause -> . ELSE

    FI              shift and go to state 236
    ELSE            shift and go to state 235

    else_clause                    shift and go to state 237

state 183

    (27) mode_definition -> identifier_list ASSIGN . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 114
    ID              shift and go to state 7
    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    CHARS           shift and go to state 119
    ARRAY           shift and go to state 106

    discrete_range_mode            shift and go to state 104
    boolean_mode                   shift and go to state 108
    composite_mode                 shift and go to state 120
    discrete_mode                  shift and go to state 124
    discrete_mode_name             shift and go to state 107
    integer_mode                   shift and go to state 121
    character_mode                 shift and go to state 118
    array_mode                     shift and go to state 109
    reference_mode                 shift and go to state 111
    string_mode                    shift and go to state 123
    mode                           shift and go to state 238
    mode_name                      shift and go to state 116
    identifier                     shift and go to state 117

state 184

    (24) newmode_statement -> TYPE newmode_list SEMI .

    END             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DCL             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SYN             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    TYPE            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    ID              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    IF              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    DO              reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    EXIT            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RETURN          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    RESULT          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    NUM             reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRED            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    SUCC            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    UPPER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LOWER           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    LENGTH          reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    READ            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    PRINT           reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)
    $end            reduce using rule 24 (newmode_statement -> TYPE newmode_list SEMI .)


state 185

    (26) newmode_list -> newmode_list COMMA . mode_definition
    (27) mode_definition -> . identifier_list ASSIGN mode
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    identifier_list                shift and go to state 100
    mode_definition                shift and go to state 239
    identifier                     shift and go to state 44

state 186

    (23) constant_expression -> expression .

    SEMI            reduce using rule 23 (constant_expression -> expression .)
    COMMA           reduce using rule 23 (constant_expression -> expression .)


state 187

    (22) synonym_definition -> identifier_list ASSIGN constant_expression .

    SEMI            reduce using rule 22 (synonym_definition -> identifier_list ASSIGN constant_expression .)
    COMMA           reduce using rule 22 (synonym_definition -> identifier_list ASSIGN constant_expression .)


state 188

    (49) array_mode -> ARRAY LBRACKET . index_mode RBRACKET element_mode
    (50) array_mode -> ARRAY LBRACKET . index_mode COMMA index_mode_list RBRACKET element_mode
    (53) index_mode -> . discrete_mode
    (54) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (61) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (17) identifier -> . ID
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    ID              shift and go to state 7
    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    discrete_range_mode            shift and go to state 104
    operand1                       shift and go to state 84
    expression                     shift and go to state 240
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    builtin_name                   shift and go to state 9
    discrete_mode_name             shift and go to state 241
    conditional_expression         shift and go to state 72
    literal_range                  shift and go to state 242
    boolean_mode                   shift and go to state 108
    call_action                    shift and go to state 79
    index_mode                     shift and go to state 245
    operand                        shift and go to state 74
    identifier                     shift and go to state 243
    value_array_slice              shift and go to state 77
    lower_bound                    shift and go to state 244
    location                       shift and go to state 90
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    discrete_mode                  shift and go to state 246
    integer_mode                   shift and go to state 121
    primitive_value                shift and go to state 78
    character_mode                 shift and go to state 118
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 189

    (39) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (61) lower_bound -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 240
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    literal_range                  shift and go to state 247
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    lower_bound                    shift and go to state 244
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 190

    (44) reference_mode -> REF mode .

    ASSIGN          reduce using rule 44 (reference_mode -> REF mode .)
    LOC             reduce using rule 44 (reference_mode -> REF mode .)
    RPAREN          reduce using rule 44 (reference_mode -> REF mode .)
    COMMA           reduce using rule 44 (reference_mode -> REF mode .)
    SEMI            reduce using rule 44 (reference_mode -> REF mode .)


state 191

    (21) synonym_definition -> identifier_list mode ASSIGN . constant_expression
    (23) constant_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 186
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    constant_expression            shift and go to state 248
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 192

    (47) string_mode -> CHARS LBRACKET . string_length RBRACKET
    (48) string_length -> . ICONST

    ICONST          shift and go to state 250

    string_length                  shift and go to state 249

state 193

    (16) identifier_list -> identifier_list COMMA identifier .

    COMMA           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    REF             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ID              reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    INT             reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    BOOL            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHAR            reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    CHARS           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ARRAY           reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)
    ASSIGN          reduce using rule 16 (identifier_list -> identifier_list COMMA identifier .)


state 194

    (40) discrete_range_mode -> discrete_mode LPAREN . literal_range RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (61) lower_bound -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 240
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    literal_range                  shift and go to state 251
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    lower_bound                    shift and go to state 244
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    binop                          shift and go to state 82
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    literal                        shift and go to state 83

state 195

    (20) synonym_list -> synonym_list COMMA synonym_definition .

    SEMI            reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)
    COMMA           reduce using rule 20 (synonym_list -> synonym_list COMMA synonym_definition .)


state 196

    (164) parameter_list -> parameter_list COMMA . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 252
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 197

    (161) procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    ARROW           reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    GT              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    GE              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    LT              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    LE              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    NOT             reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 161 (procedure_call -> discrete_mode_name LPAREN parameter_list RPAREN .)


state 198

    (169) builtin_call -> builtin_name LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ARROW           reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    AND             reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    OR              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NEQ             reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GT              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    GE              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LT              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    LE              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    PLUS            reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MINUS           reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TIMES           reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DIVIDE          reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    MOD             reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    NOT             reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    IN              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    CONCAT          reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    RBRACKET        reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    COLON           reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    THEN            reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    DOWN            reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    BY              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    TO              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSE            reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    ELSIF           reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    FI              reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)
    WHILE           reduce using rule 169 (builtin_call -> builtin_name LPAREN parameter_list RPAREN .)


state 199

    (64) expression_list -> expression_list COMMA . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 253
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 200

    (59) location -> location LBRACKET expression_list RBRACKET .

    LBRACKET        reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    ARROW           reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    ASSIGN          reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    AND             reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    NEQ             reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    GE              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    LE              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    NOT             reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 59 (location -> location LBRACKET expression_list RBRACKET .)


state 201

    (57) location -> location LBRACKET lower_bound COLON . upper_bound RBRACKET
    (62) upper_bound -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    upper_bound                    shift and go to state 255
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 254
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 202

    (180) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN result_spec SEMI statement_list END
    (181) procedure_definition -> PROC LPAREN . formal_parameter_list RPAREN SEMI statement_list END
    (182) procedure_definition -> PROC LPAREN . RPAREN result_spec SEMI statement_list END
    (183) procedure_definition -> PROC LPAREN . RPAREN SEMI statement_list END
    (184) formal_parameter_list -> . formal_parameter
    (185) formal_parameter_list -> . formal_parameter_list COMMA formal_parameter
    (186) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    RPAREN          shift and go to state 257
    ID              shift and go to state 7

    identifier_list                shift and go to state 256
    identifier                     shift and go to state 44
    formal_parameter               shift and go to state 258
    formal_parameter_list          shift and go to state 259

state 203

    (112) action_statement -> label_id COLON action SEMI .

    END             reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    DCL             reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    SYN             reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    TYPE            reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    ID              reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    IF              reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    DO              reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    EXIT            reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    RETURN          reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    RESULT          reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    NUM             reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    PRED            reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    SUCC            reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    UPPER           reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    LOWER           reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    LENGTH          reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    READ            reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    PRINT           reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    $end            reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    OD              reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    FI              reduce using rule 112 (action_statement -> label_id COLON action SEMI .)
    ELSE            reduce using rule 112 (action_statement -> label_id COLON action SEMI .)


state 204

    (179) procedure_statement -> label_id COLON procedure_definition SEMI .

    DCL             reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    SYN             reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    TYPE            reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    ID              reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    IF              reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    DO              reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    EXIT            reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RETURN          reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    RESULT          reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    NUM             reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    PRED            reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    SUCC            reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    UPPER           reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LOWER           reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    LENGTH          reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    READ            reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    PRINT           reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    $end            reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)
    END             reduce using rule 179 (procedure_statement -> label_id COLON procedure_definition SEMI .)


state 205

    (139) do_action -> DO control_part SEMI OD .

    SEMI            reduce using rule 139 (do_action -> DO control_part SEMI OD .)


state 206

    (138) do_action -> DO control_part SEMI action_statement_list . OD
    (116) action_statement_list -> action_statement_list . action_statement
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    OD              shift and go to state 260
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    builtin_call                   shift and go to state 19
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    label_id                       shift and go to state 67
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    result_action                  shift and go to state 2
    if_action                      shift and go to state 13
    exit_action                    shift and go to state 6
    action_statement               shift and go to state 153
    call_action                    shift and go to state 16
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 207

    (157) range_enumeration -> loop_counter IN . discrete_mode
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (42) discrete_mode_name -> . identifier
    (17) identifier -> . ID

    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    ID              shift and go to state 7

    boolean_mode                   shift and go to state 108
    character_mode                 shift and go to state 118
    discrete_range_mode            shift and go to state 104
    discrete_mode_name             shift and go to state 107
    discrete_mode                  shift and go to state 261
    identifier                     shift and go to state 262
    integer_mode                   shift and go to state 121

state 208

    (156) range_enumeration -> loop_counter DOWN . IN discrete_mode

    IN              shift and go to state 263


state 209

    (147) step_enumeration -> loop_counter ASSIGN . start_value step_value DOWN end_value
    (148) step_enumeration -> loop_counter ASSIGN . start_value DOWN end_value
    (149) step_enumeration -> loop_counter ASSIGN . start_value step_value end_value
    (150) step_enumeration -> loop_counter ASSIGN . start_value end_value
    (152) start_value -> . discrete_expression
    (155) discrete_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 264
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    array_primitive_value          shift and go to state 92
    start_value                    shift and go to state 265
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    discrete_expression            shift and go to state 266
    value_array_slice              shift and go to state 77
    call_action                    shift and go to state 79
    parenthesized_expression       shift and go to state 85
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 210

    (78) parenthesized_expression -> LPAREN expression RPAREN .

    AND             reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    IN              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    CONCAT          reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    THEN            reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    DOWN            reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    BY              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    TO              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    FI              reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 78 (parenthesized_expression -> LPAREN expression RPAREN .)


state 211

    (97) binop -> binop PLUS binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 97 (binop -> binop PLUS binop .)
    OR              reduce using rule 97 (binop -> binop PLUS binop .)
    EQ              reduce using rule 97 (binop -> binop PLUS binop .)
    NEQ             reduce using rule 97 (binop -> binop PLUS binop .)
    GT              reduce using rule 97 (binop -> binop PLUS binop .)
    GE              reduce using rule 97 (binop -> binop PLUS binop .)
    LT              reduce using rule 97 (binop -> binop PLUS binop .)
    LE              reduce using rule 97 (binop -> binop PLUS binop .)
    PLUS            reduce using rule 97 (binop -> binop PLUS binop .)
    MINUS           reduce using rule 97 (binop -> binop PLUS binop .)
    NOT             reduce using rule 97 (binop -> binop PLUS binop .)
    IN              reduce using rule 97 (binop -> binop PLUS binop .)
    CONCAT          reduce using rule 97 (binop -> binop PLUS binop .)
    SEMI            reduce using rule 97 (binop -> binop PLUS binop .)
    THEN            reduce using rule 97 (binop -> binop PLUS binop .)
    RPAREN          reduce using rule 97 (binop -> binop PLUS binop .)
    COMMA           reduce using rule 97 (binop -> binop PLUS binop .)
    COLON           reduce using rule 97 (binop -> binop PLUS binop .)
    RBRACKET        reduce using rule 97 (binop -> binop PLUS binop .)
    DOWN            reduce using rule 97 (binop -> binop PLUS binop .)
    BY              reduce using rule 97 (binop -> binop PLUS binop .)
    TO              reduce using rule 97 (binop -> binop PLUS binop .)
    ELSE            reduce using rule 97 (binop -> binop PLUS binop .)
    ELSIF           reduce using rule 97 (binop -> binop PLUS binop .)
    FI              reduce using rule 97 (binop -> binop PLUS binop .)
    WHILE           reduce using rule 97 (binop -> binop PLUS binop .)
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! TIMES           [ reduce using rule 97 (binop -> binop PLUS binop .) ]
  ! DIVIDE          [ reduce using rule 97 (binop -> binop PLUS binop .) ]
  ! MOD             [ reduce using rule 97 (binop -> binop PLUS binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! PLUS            [ shift and go to state 160 ]
  ! MINUS           [ shift and go to state 173 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 212

    (104) binop -> binop CONCAT binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    CONCAT          reduce using rule 104 (binop -> binop CONCAT binop .)
    SEMI            reduce using rule 104 (binop -> binop CONCAT binop .)
    THEN            reduce using rule 104 (binop -> binop CONCAT binop .)
    RPAREN          reduce using rule 104 (binop -> binop CONCAT binop .)
    COMMA           reduce using rule 104 (binop -> binop CONCAT binop .)
    COLON           reduce using rule 104 (binop -> binop CONCAT binop .)
    RBRACKET        reduce using rule 104 (binop -> binop CONCAT binop .)
    DOWN            reduce using rule 104 (binop -> binop CONCAT binop .)
    BY              reduce using rule 104 (binop -> binop CONCAT binop .)
    TO              reduce using rule 104 (binop -> binop CONCAT binop .)
    ELSE            reduce using rule 104 (binop -> binop CONCAT binop .)
    ELSIF           reduce using rule 104 (binop -> binop CONCAT binop .)
    FI              reduce using rule 104 (binop -> binop CONCAT binop .)
    WHILE           reduce using rule 104 (binop -> binop CONCAT binop .)
    AND             shift and go to state 175
    OR              shift and go to state 168
    EQ              shift and go to state 167
    NEQ             shift and go to state 163
    GT              shift and go to state 165
    GE              shift and go to state 169
    LT              shift and go to state 171
    LE              shift and go to state 164
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174
    NOT             shift and go to state 172
    IN              shift and go to state 170

  ! AND             [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! OR              [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! EQ              [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! NEQ             [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! GT              [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! GE              [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! LT              [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! LE              [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! PLUS            [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! MINUS           [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! TIMES           [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! DIVIDE          [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! MOD             [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! NOT             [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! IN              [ reduce using rule 104 (binop -> binop CONCAT binop .) ]
  ! CONCAT          [ shift and go to state 161 ]


state 213

    (99) binop -> binop TIMES binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 99 (binop -> binop TIMES binop .)
    OR              reduce using rule 99 (binop -> binop TIMES binop .)
    EQ              reduce using rule 99 (binop -> binop TIMES binop .)
    NEQ             reduce using rule 99 (binop -> binop TIMES binop .)
    GT              reduce using rule 99 (binop -> binop TIMES binop .)
    GE              reduce using rule 99 (binop -> binop TIMES binop .)
    LT              reduce using rule 99 (binop -> binop TIMES binop .)
    LE              reduce using rule 99 (binop -> binop TIMES binop .)
    PLUS            reduce using rule 99 (binop -> binop TIMES binop .)
    MINUS           reduce using rule 99 (binop -> binop TIMES binop .)
    TIMES           reduce using rule 99 (binop -> binop TIMES binop .)
    DIVIDE          reduce using rule 99 (binop -> binop TIMES binop .)
    MOD             reduce using rule 99 (binop -> binop TIMES binop .)
    NOT             reduce using rule 99 (binop -> binop TIMES binop .)
    IN              reduce using rule 99 (binop -> binop TIMES binop .)
    CONCAT          reduce using rule 99 (binop -> binop TIMES binop .)
    SEMI            reduce using rule 99 (binop -> binop TIMES binop .)
    THEN            reduce using rule 99 (binop -> binop TIMES binop .)
    RPAREN          reduce using rule 99 (binop -> binop TIMES binop .)
    COMMA           reduce using rule 99 (binop -> binop TIMES binop .)
    COLON           reduce using rule 99 (binop -> binop TIMES binop .)
    RBRACKET        reduce using rule 99 (binop -> binop TIMES binop .)
    DOWN            reduce using rule 99 (binop -> binop TIMES binop .)
    BY              reduce using rule 99 (binop -> binop TIMES binop .)
    TO              reduce using rule 99 (binop -> binop TIMES binop .)
    ELSE            reduce using rule 99 (binop -> binop TIMES binop .)
    ELSIF           reduce using rule 99 (binop -> binop TIMES binop .)
    FI              reduce using rule 99 (binop -> binop TIMES binop .)
    WHILE           reduce using rule 99 (binop -> binop TIMES binop .)

  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! PLUS            [ shift and go to state 160 ]
  ! MINUS           [ shift and go to state 173 ]
  ! TIMES           [ shift and go to state 162 ]
  ! DIVIDE          [ shift and go to state 166 ]
  ! MOD             [ shift and go to state 174 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 214

    (92) binop -> binop NEQ binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 92 (binop -> binop NEQ binop .)
    OR              reduce using rule 92 (binop -> binop NEQ binop .)
    EQ              reduce using rule 92 (binop -> binop NEQ binop .)
    NEQ             reduce using rule 92 (binop -> binop NEQ binop .)
    NOT             reduce using rule 92 (binop -> binop NEQ binop .)
    IN              reduce using rule 92 (binop -> binop NEQ binop .)
    CONCAT          reduce using rule 92 (binop -> binop NEQ binop .)
    SEMI            reduce using rule 92 (binop -> binop NEQ binop .)
    THEN            reduce using rule 92 (binop -> binop NEQ binop .)
    RPAREN          reduce using rule 92 (binop -> binop NEQ binop .)
    COMMA           reduce using rule 92 (binop -> binop NEQ binop .)
    COLON           reduce using rule 92 (binop -> binop NEQ binop .)
    RBRACKET        reduce using rule 92 (binop -> binop NEQ binop .)
    DOWN            reduce using rule 92 (binop -> binop NEQ binop .)
    BY              reduce using rule 92 (binop -> binop NEQ binop .)
    TO              reduce using rule 92 (binop -> binop NEQ binop .)
    ELSE            reduce using rule 92 (binop -> binop NEQ binop .)
    ELSIF           reduce using rule 92 (binop -> binop NEQ binop .)
    FI              reduce using rule 92 (binop -> binop NEQ binop .)
    WHILE           reduce using rule 92 (binop -> binop NEQ binop .)
    GT              shift and go to state 165
    GE              shift and go to state 169
    LT              shift and go to state 171
    LE              shift and go to state 164
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! GT              [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! GE              [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! LT              [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! LE              [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! PLUS            [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! MINUS           [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! TIMES           [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! DIVIDE          [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! MOD             [ reduce using rule 92 (binop -> binop NEQ binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 215

    (96) binop -> binop LE binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 96 (binop -> binop LE binop .)
    OR              reduce using rule 96 (binop -> binop LE binop .)
    EQ              reduce using rule 96 (binop -> binop LE binop .)
    NEQ             reduce using rule 96 (binop -> binop LE binop .)
    GT              reduce using rule 96 (binop -> binop LE binop .)
    GE              reduce using rule 96 (binop -> binop LE binop .)
    LT              reduce using rule 96 (binop -> binop LE binop .)
    LE              reduce using rule 96 (binop -> binop LE binop .)
    NOT             reduce using rule 96 (binop -> binop LE binop .)
    IN              reduce using rule 96 (binop -> binop LE binop .)
    CONCAT          reduce using rule 96 (binop -> binop LE binop .)
    SEMI            reduce using rule 96 (binop -> binop LE binop .)
    THEN            reduce using rule 96 (binop -> binop LE binop .)
    RPAREN          reduce using rule 96 (binop -> binop LE binop .)
    COMMA           reduce using rule 96 (binop -> binop LE binop .)
    COLON           reduce using rule 96 (binop -> binop LE binop .)
    RBRACKET        reduce using rule 96 (binop -> binop LE binop .)
    DOWN            reduce using rule 96 (binop -> binop LE binop .)
    BY              reduce using rule 96 (binop -> binop LE binop .)
    TO              reduce using rule 96 (binop -> binop LE binop .)
    ELSE            reduce using rule 96 (binop -> binop LE binop .)
    ELSIF           reduce using rule 96 (binop -> binop LE binop .)
    FI              reduce using rule 96 (binop -> binop LE binop .)
    WHILE           reduce using rule 96 (binop -> binop LE binop .)
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! PLUS            [ reduce using rule 96 (binop -> binop LE binop .) ]
  ! MINUS           [ reduce using rule 96 (binop -> binop LE binop .) ]
  ! TIMES           [ reduce using rule 96 (binop -> binop LE binop .) ]
  ! DIVIDE          [ reduce using rule 96 (binop -> binop LE binop .) ]
  ! MOD             [ reduce using rule 96 (binop -> binop LE binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 216

    (93) binop -> binop GT binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 93 (binop -> binop GT binop .)
    OR              reduce using rule 93 (binop -> binop GT binop .)
    EQ              reduce using rule 93 (binop -> binop GT binop .)
    NEQ             reduce using rule 93 (binop -> binop GT binop .)
    GT              reduce using rule 93 (binop -> binop GT binop .)
    GE              reduce using rule 93 (binop -> binop GT binop .)
    LT              reduce using rule 93 (binop -> binop GT binop .)
    LE              reduce using rule 93 (binop -> binop GT binop .)
    NOT             reduce using rule 93 (binop -> binop GT binop .)
    IN              reduce using rule 93 (binop -> binop GT binop .)
    CONCAT          reduce using rule 93 (binop -> binop GT binop .)
    SEMI            reduce using rule 93 (binop -> binop GT binop .)
    THEN            reduce using rule 93 (binop -> binop GT binop .)
    RPAREN          reduce using rule 93 (binop -> binop GT binop .)
    COMMA           reduce using rule 93 (binop -> binop GT binop .)
    COLON           reduce using rule 93 (binop -> binop GT binop .)
    RBRACKET        reduce using rule 93 (binop -> binop GT binop .)
    DOWN            reduce using rule 93 (binop -> binop GT binop .)
    BY              reduce using rule 93 (binop -> binop GT binop .)
    TO              reduce using rule 93 (binop -> binop GT binop .)
    ELSE            reduce using rule 93 (binop -> binop GT binop .)
    ELSIF           reduce using rule 93 (binop -> binop GT binop .)
    FI              reduce using rule 93 (binop -> binop GT binop .)
    WHILE           reduce using rule 93 (binop -> binop GT binop .)
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! PLUS            [ reduce using rule 93 (binop -> binop GT binop .) ]
  ! MINUS           [ reduce using rule 93 (binop -> binop GT binop .) ]
  ! TIMES           [ reduce using rule 93 (binop -> binop GT binop .) ]
  ! DIVIDE          [ reduce using rule 93 (binop -> binop GT binop .) ]
  ! MOD             [ reduce using rule 93 (binop -> binop GT binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 217

    (100) binop -> binop DIVIDE binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 100 (binop -> binop DIVIDE binop .)
    OR              reduce using rule 100 (binop -> binop DIVIDE binop .)
    EQ              reduce using rule 100 (binop -> binop DIVIDE binop .)
    NEQ             reduce using rule 100 (binop -> binop DIVIDE binop .)
    GT              reduce using rule 100 (binop -> binop DIVIDE binop .)
    GE              reduce using rule 100 (binop -> binop DIVIDE binop .)
    LT              reduce using rule 100 (binop -> binop DIVIDE binop .)
    LE              reduce using rule 100 (binop -> binop DIVIDE binop .)
    PLUS            reduce using rule 100 (binop -> binop DIVIDE binop .)
    MINUS           reduce using rule 100 (binop -> binop DIVIDE binop .)
    TIMES           reduce using rule 100 (binop -> binop DIVIDE binop .)
    DIVIDE          reduce using rule 100 (binop -> binop DIVIDE binop .)
    MOD             reduce using rule 100 (binop -> binop DIVIDE binop .)
    NOT             reduce using rule 100 (binop -> binop DIVIDE binop .)
    IN              reduce using rule 100 (binop -> binop DIVIDE binop .)
    CONCAT          reduce using rule 100 (binop -> binop DIVIDE binop .)
    SEMI            reduce using rule 100 (binop -> binop DIVIDE binop .)
    THEN            reduce using rule 100 (binop -> binop DIVIDE binop .)
    RPAREN          reduce using rule 100 (binop -> binop DIVIDE binop .)
    COMMA           reduce using rule 100 (binop -> binop DIVIDE binop .)
    COLON           reduce using rule 100 (binop -> binop DIVIDE binop .)
    RBRACKET        reduce using rule 100 (binop -> binop DIVIDE binop .)
    DOWN            reduce using rule 100 (binop -> binop DIVIDE binop .)
    BY              reduce using rule 100 (binop -> binop DIVIDE binop .)
    TO              reduce using rule 100 (binop -> binop DIVIDE binop .)
    ELSE            reduce using rule 100 (binop -> binop DIVIDE binop .)
    ELSIF           reduce using rule 100 (binop -> binop DIVIDE binop .)
    FI              reduce using rule 100 (binop -> binop DIVIDE binop .)
    WHILE           reduce using rule 100 (binop -> binop DIVIDE binop .)

  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! PLUS            [ shift and go to state 160 ]
  ! MINUS           [ shift and go to state 173 ]
  ! TIMES           [ shift and go to state 162 ]
  ! DIVIDE          [ shift and go to state 166 ]
  ! MOD             [ shift and go to state 174 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 218

    (91) binop -> binop EQ binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 91 (binop -> binop EQ binop .)
    OR              reduce using rule 91 (binop -> binop EQ binop .)
    EQ              reduce using rule 91 (binop -> binop EQ binop .)
    NEQ             reduce using rule 91 (binop -> binop EQ binop .)
    NOT             reduce using rule 91 (binop -> binop EQ binop .)
    IN              reduce using rule 91 (binop -> binop EQ binop .)
    CONCAT          reduce using rule 91 (binop -> binop EQ binop .)
    SEMI            reduce using rule 91 (binop -> binop EQ binop .)
    THEN            reduce using rule 91 (binop -> binop EQ binop .)
    RPAREN          reduce using rule 91 (binop -> binop EQ binop .)
    COMMA           reduce using rule 91 (binop -> binop EQ binop .)
    COLON           reduce using rule 91 (binop -> binop EQ binop .)
    RBRACKET        reduce using rule 91 (binop -> binop EQ binop .)
    DOWN            reduce using rule 91 (binop -> binop EQ binop .)
    BY              reduce using rule 91 (binop -> binop EQ binop .)
    TO              reduce using rule 91 (binop -> binop EQ binop .)
    ELSE            reduce using rule 91 (binop -> binop EQ binop .)
    ELSIF           reduce using rule 91 (binop -> binop EQ binop .)
    FI              reduce using rule 91 (binop -> binop EQ binop .)
    WHILE           reduce using rule 91 (binop -> binop EQ binop .)
    GT              shift and go to state 165
    GE              shift and go to state 169
    LT              shift and go to state 171
    LE              shift and go to state 164
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! GT              [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! GE              [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! LT              [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! LE              [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! PLUS            [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! MINUS           [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! TIMES           [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! DIVIDE          [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! MOD             [ reduce using rule 91 (binop -> binop EQ binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 219

    (90) binop -> binop OR binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    OR              reduce using rule 90 (binop -> binop OR binop .)
    NOT             reduce using rule 90 (binop -> binop OR binop .)
    IN              reduce using rule 90 (binop -> binop OR binop .)
    CONCAT          reduce using rule 90 (binop -> binop OR binop .)
    SEMI            reduce using rule 90 (binop -> binop OR binop .)
    THEN            reduce using rule 90 (binop -> binop OR binop .)
    RPAREN          reduce using rule 90 (binop -> binop OR binop .)
    COMMA           reduce using rule 90 (binop -> binop OR binop .)
    COLON           reduce using rule 90 (binop -> binop OR binop .)
    RBRACKET        reduce using rule 90 (binop -> binop OR binop .)
    DOWN            reduce using rule 90 (binop -> binop OR binop .)
    BY              reduce using rule 90 (binop -> binop OR binop .)
    TO              reduce using rule 90 (binop -> binop OR binop .)
    ELSE            reduce using rule 90 (binop -> binop OR binop .)
    ELSIF           reduce using rule 90 (binop -> binop OR binop .)
    FI              reduce using rule 90 (binop -> binop OR binop .)
    WHILE           reduce using rule 90 (binop -> binop OR binop .)
    AND             shift and go to state 175
    EQ              shift and go to state 167
    NEQ             shift and go to state 163
    GT              shift and go to state 165
    GE              shift and go to state 169
    LT              shift and go to state 171
    LE              shift and go to state 164
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! AND             [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! EQ              [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! NEQ             [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! GT              [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! GE              [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! LT              [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! LE              [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! PLUS            [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! MINUS           [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! TIMES           [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! DIVIDE          [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! MOD             [ reduce using rule 90 (binop -> binop OR binop .) ]
  ! OR              [ shift and go to state 168 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 220

    (94) binop -> binop GE binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 94 (binop -> binop GE binop .)
    OR              reduce using rule 94 (binop -> binop GE binop .)
    EQ              reduce using rule 94 (binop -> binop GE binop .)
    NEQ             reduce using rule 94 (binop -> binop GE binop .)
    GT              reduce using rule 94 (binop -> binop GE binop .)
    GE              reduce using rule 94 (binop -> binop GE binop .)
    LT              reduce using rule 94 (binop -> binop GE binop .)
    LE              reduce using rule 94 (binop -> binop GE binop .)
    NOT             reduce using rule 94 (binop -> binop GE binop .)
    IN              reduce using rule 94 (binop -> binop GE binop .)
    CONCAT          reduce using rule 94 (binop -> binop GE binop .)
    SEMI            reduce using rule 94 (binop -> binop GE binop .)
    THEN            reduce using rule 94 (binop -> binop GE binop .)
    RPAREN          reduce using rule 94 (binop -> binop GE binop .)
    COMMA           reduce using rule 94 (binop -> binop GE binop .)
    COLON           reduce using rule 94 (binop -> binop GE binop .)
    RBRACKET        reduce using rule 94 (binop -> binop GE binop .)
    DOWN            reduce using rule 94 (binop -> binop GE binop .)
    BY              reduce using rule 94 (binop -> binop GE binop .)
    TO              reduce using rule 94 (binop -> binop GE binop .)
    ELSE            reduce using rule 94 (binop -> binop GE binop .)
    ELSIF           reduce using rule 94 (binop -> binop GE binop .)
    FI              reduce using rule 94 (binop -> binop GE binop .)
    WHILE           reduce using rule 94 (binop -> binop GE binop .)
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! PLUS            [ reduce using rule 94 (binop -> binop GE binop .) ]
  ! MINUS           [ reduce using rule 94 (binop -> binop GE binop .) ]
  ! TIMES           [ reduce using rule 94 (binop -> binop GE binop .) ]
  ! DIVIDE          [ reduce using rule 94 (binop -> binop GE binop .) ]
  ! MOD             [ reduce using rule 94 (binop -> binop GE binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 221

    (103) binop -> binop IN binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    NOT             reduce using rule 103 (binop -> binop IN binop .)
    IN              reduce using rule 103 (binop -> binop IN binop .)
    CONCAT          reduce using rule 103 (binop -> binop IN binop .)
    SEMI            reduce using rule 103 (binop -> binop IN binop .)
    THEN            reduce using rule 103 (binop -> binop IN binop .)
    RPAREN          reduce using rule 103 (binop -> binop IN binop .)
    COMMA           reduce using rule 103 (binop -> binop IN binop .)
    COLON           reduce using rule 103 (binop -> binop IN binop .)
    RBRACKET        reduce using rule 103 (binop -> binop IN binop .)
    DOWN            reduce using rule 103 (binop -> binop IN binop .)
    BY              reduce using rule 103 (binop -> binop IN binop .)
    TO              reduce using rule 103 (binop -> binop IN binop .)
    ELSE            reduce using rule 103 (binop -> binop IN binop .)
    ELSIF           reduce using rule 103 (binop -> binop IN binop .)
    FI              reduce using rule 103 (binop -> binop IN binop .)
    WHILE           reduce using rule 103 (binop -> binop IN binop .)
    AND             shift and go to state 175
    OR              shift and go to state 168
    EQ              shift and go to state 167
    NEQ             shift and go to state 163
    GT              shift and go to state 165
    GE              shift and go to state 169
    LT              shift and go to state 171
    LE              shift and go to state 164
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! AND             [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! OR              [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! EQ              [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! NEQ             [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! GT              [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! GE              [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! LT              [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! LE              [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! PLUS            [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! MINUS           [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! TIMES           [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! DIVIDE          [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! MOD             [ reduce using rule 103 (binop -> binop IN binop .) ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 222

    (95) binop -> binop LT binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 95 (binop -> binop LT binop .)
    OR              reduce using rule 95 (binop -> binop LT binop .)
    EQ              reduce using rule 95 (binop -> binop LT binop .)
    NEQ             reduce using rule 95 (binop -> binop LT binop .)
    GT              reduce using rule 95 (binop -> binop LT binop .)
    GE              reduce using rule 95 (binop -> binop LT binop .)
    LT              reduce using rule 95 (binop -> binop LT binop .)
    LE              reduce using rule 95 (binop -> binop LT binop .)
    NOT             reduce using rule 95 (binop -> binop LT binop .)
    IN              reduce using rule 95 (binop -> binop LT binop .)
    CONCAT          reduce using rule 95 (binop -> binop LT binop .)
    SEMI            reduce using rule 95 (binop -> binop LT binop .)
    THEN            reduce using rule 95 (binop -> binop LT binop .)
    RPAREN          reduce using rule 95 (binop -> binop LT binop .)
    COMMA           reduce using rule 95 (binop -> binop LT binop .)
    COLON           reduce using rule 95 (binop -> binop LT binop .)
    RBRACKET        reduce using rule 95 (binop -> binop LT binop .)
    DOWN            reduce using rule 95 (binop -> binop LT binop .)
    BY              reduce using rule 95 (binop -> binop LT binop .)
    TO              reduce using rule 95 (binop -> binop LT binop .)
    ELSE            reduce using rule 95 (binop -> binop LT binop .)
    ELSIF           reduce using rule 95 (binop -> binop LT binop .)
    FI              reduce using rule 95 (binop -> binop LT binop .)
    WHILE           reduce using rule 95 (binop -> binop LT binop .)
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! PLUS            [ reduce using rule 95 (binop -> binop LT binop .) ]
  ! MINUS           [ reduce using rule 95 (binop -> binop LT binop .) ]
  ! TIMES           [ reduce using rule 95 (binop -> binop LT binop .) ]
  ! DIVIDE          [ reduce using rule 95 (binop -> binop LT binop .) ]
  ! MOD             [ reduce using rule 95 (binop -> binop LT binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 223

    (102) binop -> binop NOT binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    NOT             reduce using rule 102 (binop -> binop NOT binop .)
    CONCAT          reduce using rule 102 (binop -> binop NOT binop .)
    SEMI            reduce using rule 102 (binop -> binop NOT binop .)
    THEN            reduce using rule 102 (binop -> binop NOT binop .)
    RPAREN          reduce using rule 102 (binop -> binop NOT binop .)
    COMMA           reduce using rule 102 (binop -> binop NOT binop .)
    COLON           reduce using rule 102 (binop -> binop NOT binop .)
    RBRACKET        reduce using rule 102 (binop -> binop NOT binop .)
    DOWN            reduce using rule 102 (binop -> binop NOT binop .)
    BY              reduce using rule 102 (binop -> binop NOT binop .)
    TO              reduce using rule 102 (binop -> binop NOT binop .)
    ELSE            reduce using rule 102 (binop -> binop NOT binop .)
    ELSIF           reduce using rule 102 (binop -> binop NOT binop .)
    FI              reduce using rule 102 (binop -> binop NOT binop .)
    WHILE           reduce using rule 102 (binop -> binop NOT binop .)
    AND             shift and go to state 175
    OR              shift and go to state 168
    EQ              shift and go to state 167
    NEQ             shift and go to state 163
    GT              shift and go to state 165
    GE              shift and go to state 169
    LT              shift and go to state 171
    LE              shift and go to state 164
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174
    IN              shift and go to state 170

  ! AND             [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! OR              [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! EQ              [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! NEQ             [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! GT              [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! GE              [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! LT              [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! LE              [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! PLUS            [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! MINUS           [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! TIMES           [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! DIVIDE          [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! MOD             [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! IN              [ reduce using rule 102 (binop -> binop NOT binop .) ]
  ! NOT             [ shift and go to state 172 ]
  ! CONCAT          [ shift and go to state 161 ]


state 224

    (98) binop -> binop MINUS binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 98 (binop -> binop MINUS binop .)
    OR              reduce using rule 98 (binop -> binop MINUS binop .)
    EQ              reduce using rule 98 (binop -> binop MINUS binop .)
    NEQ             reduce using rule 98 (binop -> binop MINUS binop .)
    GT              reduce using rule 98 (binop -> binop MINUS binop .)
    GE              reduce using rule 98 (binop -> binop MINUS binop .)
    LT              reduce using rule 98 (binop -> binop MINUS binop .)
    LE              reduce using rule 98 (binop -> binop MINUS binop .)
    PLUS            reduce using rule 98 (binop -> binop MINUS binop .)
    MINUS           reduce using rule 98 (binop -> binop MINUS binop .)
    NOT             reduce using rule 98 (binop -> binop MINUS binop .)
    IN              reduce using rule 98 (binop -> binop MINUS binop .)
    CONCAT          reduce using rule 98 (binop -> binop MINUS binop .)
    SEMI            reduce using rule 98 (binop -> binop MINUS binop .)
    THEN            reduce using rule 98 (binop -> binop MINUS binop .)
    RPAREN          reduce using rule 98 (binop -> binop MINUS binop .)
    COMMA           reduce using rule 98 (binop -> binop MINUS binop .)
    COLON           reduce using rule 98 (binop -> binop MINUS binop .)
    RBRACKET        reduce using rule 98 (binop -> binop MINUS binop .)
    DOWN            reduce using rule 98 (binop -> binop MINUS binop .)
    BY              reduce using rule 98 (binop -> binop MINUS binop .)
    TO              reduce using rule 98 (binop -> binop MINUS binop .)
    ELSE            reduce using rule 98 (binop -> binop MINUS binop .)
    ELSIF           reduce using rule 98 (binop -> binop MINUS binop .)
    FI              reduce using rule 98 (binop -> binop MINUS binop .)
    WHILE           reduce using rule 98 (binop -> binop MINUS binop .)
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! TIMES           [ reduce using rule 98 (binop -> binop MINUS binop .) ]
  ! DIVIDE          [ reduce using rule 98 (binop -> binop MINUS binop .) ]
  ! MOD             [ reduce using rule 98 (binop -> binop MINUS binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! PLUS            [ shift and go to state 160 ]
  ! MINUS           [ shift and go to state 173 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 225

    (101) binop -> binop MOD binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 101 (binop -> binop MOD binop .)
    OR              reduce using rule 101 (binop -> binop MOD binop .)
    EQ              reduce using rule 101 (binop -> binop MOD binop .)
    NEQ             reduce using rule 101 (binop -> binop MOD binop .)
    GT              reduce using rule 101 (binop -> binop MOD binop .)
    GE              reduce using rule 101 (binop -> binop MOD binop .)
    LT              reduce using rule 101 (binop -> binop MOD binop .)
    LE              reduce using rule 101 (binop -> binop MOD binop .)
    PLUS            reduce using rule 101 (binop -> binop MOD binop .)
    MINUS           reduce using rule 101 (binop -> binop MOD binop .)
    TIMES           reduce using rule 101 (binop -> binop MOD binop .)
    DIVIDE          reduce using rule 101 (binop -> binop MOD binop .)
    MOD             reduce using rule 101 (binop -> binop MOD binop .)
    NOT             reduce using rule 101 (binop -> binop MOD binop .)
    IN              reduce using rule 101 (binop -> binop MOD binop .)
    CONCAT          reduce using rule 101 (binop -> binop MOD binop .)
    SEMI            reduce using rule 101 (binop -> binop MOD binop .)
    THEN            reduce using rule 101 (binop -> binop MOD binop .)
    RPAREN          reduce using rule 101 (binop -> binop MOD binop .)
    COMMA           reduce using rule 101 (binop -> binop MOD binop .)
    COLON           reduce using rule 101 (binop -> binop MOD binop .)
    RBRACKET        reduce using rule 101 (binop -> binop MOD binop .)
    DOWN            reduce using rule 101 (binop -> binop MOD binop .)
    BY              reduce using rule 101 (binop -> binop MOD binop .)
    TO              reduce using rule 101 (binop -> binop MOD binop .)
    ELSE            reduce using rule 101 (binop -> binop MOD binop .)
    ELSIF           reduce using rule 101 (binop -> binop MOD binop .)
    FI              reduce using rule 101 (binop -> binop MOD binop .)
    WHILE           reduce using rule 101 (binop -> binop MOD binop .)

  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! EQ              [ shift and go to state 167 ]
  ! NEQ             [ shift and go to state 163 ]
  ! GT              [ shift and go to state 165 ]
  ! GE              [ shift and go to state 169 ]
  ! LT              [ shift and go to state 171 ]
  ! LE              [ shift and go to state 164 ]
  ! PLUS            [ shift and go to state 160 ]
  ! MINUS           [ shift and go to state 173 ]
  ! TIMES           [ shift and go to state 162 ]
  ! DIVIDE          [ shift and go to state 166 ]
  ! MOD             [ shift and go to state 174 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 226

    (89) binop -> binop AND binop .
    (89) binop -> binop . AND binop
    (90) binop -> binop . OR binop
    (91) binop -> binop . EQ binop
    (92) binop -> binop . NEQ binop
    (93) binop -> binop . GT binop
    (94) binop -> binop . GE binop
    (95) binop -> binop . LT binop
    (96) binop -> binop . LE binop
    (97) binop -> binop . PLUS binop
    (98) binop -> binop . MINUS binop
    (99) binop -> binop . TIMES binop
    (100) binop -> binop . DIVIDE binop
    (101) binop -> binop . MOD binop
    (102) binop -> binop . NOT binop
    (103) binop -> binop . IN binop
    (104) binop -> binop . CONCAT binop

    AND             reduce using rule 89 (binop -> binop AND binop .)
    OR              reduce using rule 89 (binop -> binop AND binop .)
    NOT             reduce using rule 89 (binop -> binop AND binop .)
    IN              reduce using rule 89 (binop -> binop AND binop .)
    CONCAT          reduce using rule 89 (binop -> binop AND binop .)
    SEMI            reduce using rule 89 (binop -> binop AND binop .)
    THEN            reduce using rule 89 (binop -> binop AND binop .)
    RPAREN          reduce using rule 89 (binop -> binop AND binop .)
    COMMA           reduce using rule 89 (binop -> binop AND binop .)
    COLON           reduce using rule 89 (binop -> binop AND binop .)
    RBRACKET        reduce using rule 89 (binop -> binop AND binop .)
    DOWN            reduce using rule 89 (binop -> binop AND binop .)
    BY              reduce using rule 89 (binop -> binop AND binop .)
    TO              reduce using rule 89 (binop -> binop AND binop .)
    ELSE            reduce using rule 89 (binop -> binop AND binop .)
    ELSIF           reduce using rule 89 (binop -> binop AND binop .)
    FI              reduce using rule 89 (binop -> binop AND binop .)
    WHILE           reduce using rule 89 (binop -> binop AND binop .)
    EQ              shift and go to state 167
    NEQ             shift and go to state 163
    GT              shift and go to state 165
    GE              shift and go to state 169
    LT              shift and go to state 171
    LE              shift and go to state 164
    PLUS            shift and go to state 160
    MINUS           shift and go to state 173
    TIMES           shift and go to state 162
    DIVIDE          shift and go to state 166
    MOD             shift and go to state 174

  ! EQ              [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! NEQ             [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! GT              [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! GE              [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! LT              [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! LE              [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! PLUS            [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! MINUS           [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! TIMES           [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! DIVIDE          [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! MOD             [ reduce using rule 89 (binop -> binop AND binop .) ]
  ! AND             [ shift and go to state 175 ]
  ! OR              [ shift and go to state 168 ]
  ! NOT             [ shift and go to state 172 ]
  ! IN              [ shift and go to state 170 ]
  ! CONCAT          [ shift and go to state 161 ]


state 227

    (76) value_array_slice -> array_primitive_value LBRACKET expression . COLON expression RBRACKET
    (63) expression_list -> expression .

    COLON           shift and go to state 267
    RBRACKET        reduce using rule 63 (expression_list -> expression .)
    COMMA           reduce using rule 63 (expression_list -> expression .)


state 228

    (75) value_array_element -> array_primitive_value LBRACKET expression_list . RBRACKET
    (64) expression_list -> expression_list . COMMA expression

    RBRACKET        shift and go to state 268
    COMMA           shift and go to state 199


state 229

    (84) then_expression -> THEN . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 269
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 230

    (81) conditional_expression -> IF boolean_expression then_expression . else_expression FI
    (82) conditional_expression -> IF boolean_expression then_expression . elsif_expression else_expression FI
    (85) else_expression -> . ELSE expression
    (86) elsif_expression -> . ELSIF boolean_expression then_expression
    (87) elsif_expression -> . elsif_expression ELSIF boolean_expression then_expression

    ELSE            shift and go to state 273
    ELSIF           shift and go to state 272

    else_expression                shift and go to state 271
    elsif_expression               shift and go to state 270

state 231

    (14) initialization -> ASSIGN . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 274
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 232

    (12) declaration -> identifier_list mode initialization .

    SEMI            reduce using rule 12 (declaration -> identifier_list mode initialization .)
    COMMA           reduce using rule 12 (declaration -> identifier_list mode initialization .)


state 233

    (11) declaration_list -> declaration_list COMMA declaration .

    SEMI            reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)
    COMMA           reduce using rule 11 (declaration_list -> declaration_list COMMA declaration .)


state 234

    (134) then_clause -> THEN action_statement_list .
    (116) action_statement_list -> action_statement_list . action_statement
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    FI              reduce using rule 134 (then_clause -> THEN action_statement_list .)
    ELSE            reduce using rule 134 (then_clause -> THEN action_statement_list .)
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    result_action                  shift and go to state 2
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    builtin_call                   shift and go to state 19
    if_action                      shift and go to state 13
    label_id                       shift and go to state 67
    action_statement               shift and go to state 153
    call_action                    shift and go to state 16
    return_action                  shift and go to state 39
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38

state 235

    (136) else_clause -> ELSE . action_statement_list
    (137) else_clause -> ELSE .
    (115) action_statement_list -> . action_statement
    (116) action_statement_list -> . action_statement_list action_statement
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    FI              reduce using rule 137 (else_clause -> ELSE .)
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    result_action                  shift and go to state 2
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    builtin_call                   shift and go to state 19
    if_action                      shift and go to state 13
    label_id                       shift and go to state 67
    action_statement               shift and go to state 68
    call_action                    shift and go to state 16
    return_action                  shift and go to state 39
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    action_statement_list          shift and go to state 275

state 236

    (133) if_action -> IF boolean_expression then_clause FI .

    SEMI            reduce using rule 133 (if_action -> IF boolean_expression then_clause FI .)


state 237

    (132) if_action -> IF boolean_expression then_clause else_clause . FI

    FI              shift and go to state 276


state 238

    (27) mode_definition -> identifier_list ASSIGN mode .

    SEMI            reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)
    COMMA           reduce using rule 27 (mode_definition -> identifier_list ASSIGN mode .)


state 239

    (26) newmode_list -> newmode_list COMMA mode_definition .

    SEMI            reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)
    COMMA           reduce using rule 26 (newmode_list -> newmode_list COMMA mode_definition .)


state 240

    (61) lower_bound -> expression .

    COLON           reduce using rule 61 (lower_bound -> expression .)


state 241

    (39) discrete_range_mode -> discrete_mode_name . LPAREN literal_range RPAREN
    (161) procedure_call -> discrete_mode_name . LPAREN parameter_list RPAREN
    (162) procedure_call -> discrete_mode_name . LPAREN RPAREN

    LPAREN          shift and go to state 277


state 242

    (54) index_mode -> literal_range .

    RBRACKET        reduce using rule 54 (index_mode -> literal_range .)
    COMMA           reduce using rule 54 (index_mode -> literal_range .)


state 243

    (42) discrete_mode_name -> identifier .
    (56) location -> identifier .

    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)
    LBRACKET        reduce using rule 56 (location -> identifier .)
    ARROW           reduce using rule 56 (location -> identifier .)
    AND             reduce using rule 56 (location -> identifier .)
    OR              reduce using rule 56 (location -> identifier .)
    EQ              reduce using rule 56 (location -> identifier .)
    NEQ             reduce using rule 56 (location -> identifier .)
    GT              reduce using rule 56 (location -> identifier .)
    GE              reduce using rule 56 (location -> identifier .)
    LT              reduce using rule 56 (location -> identifier .)
    LE              reduce using rule 56 (location -> identifier .)
    PLUS            reduce using rule 56 (location -> identifier .)
    MINUS           reduce using rule 56 (location -> identifier .)
    TIMES           reduce using rule 56 (location -> identifier .)
    DIVIDE          reduce using rule 56 (location -> identifier .)
    MOD             reduce using rule 56 (location -> identifier .)
    NOT             reduce using rule 56 (location -> identifier .)
    IN              reduce using rule 56 (location -> identifier .)
    CONCAT          reduce using rule 56 (location -> identifier .)
    COLON           reduce using rule 56 (location -> identifier .)


state 244

    (43) literal_range -> lower_bound . COLON upper_bound

    COLON           shift and go to state 278


state 245

    (49) array_mode -> ARRAY LBRACKET index_mode . RBRACKET element_mode
    (50) array_mode -> ARRAY LBRACKET index_mode . COMMA index_mode_list RBRACKET element_mode

    RBRACKET        shift and go to state 280
    COMMA           shift and go to state 279


state 246

    (53) index_mode -> discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    RBRACKET        reduce using rule 53 (index_mode -> discrete_mode .)
    COMMA           reduce using rule 53 (index_mode -> discrete_mode .)
    LPAREN          shift and go to state 194


state 247

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 281


state 248

    (21) synonym_definition -> identifier_list mode ASSIGN constant_expression .

    SEMI            reduce using rule 21 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)
    COMMA           reduce using rule 21 (synonym_definition -> identifier_list mode ASSIGN constant_expression .)


state 249

    (47) string_mode -> CHARS LBRACKET string_length . RBRACKET

    RBRACKET        shift and go to state 282


state 250

    (48) string_length -> ICONST .

    RBRACKET        reduce using rule 48 (string_length -> ICONST .)


state 251

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range . RPAREN

    RPAREN          shift and go to state 283


state 252

    (164) parameter_list -> parameter_list COMMA expression .

    RPAREN          reduce using rule 164 (parameter_list -> parameter_list COMMA expression .)
    COMMA           reduce using rule 164 (parameter_list -> parameter_list COMMA expression .)


state 253

    (64) expression_list -> expression_list COMMA expression .

    RBRACKET        reduce using rule 64 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 64 (expression_list -> expression_list COMMA expression .)


state 254

    (62) upper_bound -> expression .

    RBRACKET        reduce using rule 62 (upper_bound -> expression .)
    COMMA           reduce using rule 62 (upper_bound -> expression .)
    RPAREN          reduce using rule 62 (upper_bound -> expression .)


state 255

    (57) location -> location LBRACKET lower_bound COLON upper_bound . RBRACKET

    RBRACKET        shift and go to state 284


state 256

    (186) formal_parameter -> identifier_list . parameter_spec
    (16) identifier_list -> identifier_list . COMMA identifier
    (188) parameter_spec -> . mode LOC
    (189) parameter_spec -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . identifier

    COMMA           shift and go to state 122
    REF             shift and go to state 114
    ID              shift and go to state 7
    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    CHARS           shift and go to state 119
    ARRAY           shift and go to state 106

    discrete_range_mode            shift and go to state 104
    boolean_mode                   shift and go to state 108
    composite_mode                 shift and go to state 120
    mode                           shift and go to state 285
    discrete_mode_name             shift and go to state 107
    parameter_spec                 shift and go to state 286
    integer_mode                   shift and go to state 121
    character_mode                 shift and go to state 118
    array_mode                     shift and go to state 109
    reference_mode                 shift and go to state 111
    string_mode                    shift and go to state 123
    discrete_mode                  shift and go to state 124
    mode_name                      shift and go to state 116
    identifier                     shift and go to state 117

state 257

    (182) procedure_definition -> PROC LPAREN RPAREN . result_spec SEMI statement_list END
    (183) procedure_definition -> PROC LPAREN RPAREN . SEMI statement_list END
    (187) result_spec -> . RETURNS LPAREN parameter_spec RPAREN

    SEMI            shift and go to state 287
    RETURNS         shift and go to state 288

    result_spec                    shift and go to state 289

state 258

    (184) formal_parameter_list -> formal_parameter .

    RPAREN          reduce using rule 184 (formal_parameter_list -> formal_parameter .)
    COMMA           reduce using rule 184 (formal_parameter_list -> formal_parameter .)


state 259

    (180) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN result_spec SEMI statement_list END
    (181) procedure_definition -> PROC LPAREN formal_parameter_list . RPAREN SEMI statement_list END
    (185) formal_parameter_list -> formal_parameter_list . COMMA formal_parameter

    RPAREN          shift and go to state 291
    COMMA           shift and go to state 290


state 260

    (138) do_action -> DO control_part SEMI action_statement_list OD .

    SEMI            reduce using rule 138 (do_action -> DO control_part SEMI action_statement_list OD .)


state 261

    (157) range_enumeration -> loop_counter IN discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 157 (range_enumeration -> loop_counter IN discrete_mode .)
    SEMI            reduce using rule 157 (range_enumeration -> loop_counter IN discrete_mode .)
    LPAREN          shift and go to state 194


state 262

    (42) discrete_mode_name -> identifier .

    LPAREN          reduce using rule 42 (discrete_mode_name -> identifier .)


state 263

    (156) range_enumeration -> loop_counter DOWN IN . discrete_mode
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (42) discrete_mode_name -> . identifier
    (17) identifier -> . ID

    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    ID              shift and go to state 7

    boolean_mode                   shift and go to state 108
    character_mode                 shift and go to state 118
    discrete_range_mode            shift and go to state 104
    discrete_mode_name             shift and go to state 107
    discrete_mode                  shift and go to state 292
    identifier                     shift and go to state 262
    integer_mode                   shift and go to state 121

state 264

    (155) discrete_expression -> expression .

    WHILE           reduce using rule 155 (discrete_expression -> expression .)
    SEMI            reduce using rule 155 (discrete_expression -> expression .)
    DOWN            reduce using rule 155 (discrete_expression -> expression .)
    BY              reduce using rule 155 (discrete_expression -> expression .)
    TO              reduce using rule 155 (discrete_expression -> expression .)


state 265

    (147) step_enumeration -> loop_counter ASSIGN start_value . step_value DOWN end_value
    (148) step_enumeration -> loop_counter ASSIGN start_value . DOWN end_value
    (149) step_enumeration -> loop_counter ASSIGN start_value . step_value end_value
    (150) step_enumeration -> loop_counter ASSIGN start_value . end_value
    (153) step_value -> . BY ICONST
    (154) end_value -> . TO discrete_expression

    DOWN            shift and go to state 294
    BY              shift and go to state 293
    TO              shift and go to state 296

    end_value                      shift and go to state 295
    step_value                     shift and go to state 297

state 266

    (152) start_value -> discrete_expression .

    DOWN            reduce using rule 152 (start_value -> discrete_expression .)
    BY              reduce using rule 152 (start_value -> discrete_expression .)
    TO              reduce using rule 152 (start_value -> discrete_expression .)


state 267

    (76) value_array_slice -> array_primitive_value LBRACKET expression COLON . expression RBRACKET
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 298
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 268

    (75) value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .

    AND             reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    OR              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    EQ              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    NEQ             reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    GT              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    GE              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LT              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LE              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    PLUS            reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    MINUS           reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    TIMES           reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    DIVIDE          reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    MOD             reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    NOT             reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    IN              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    CONCAT          reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    SEMI            reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    THEN            reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    RPAREN          reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    COMMA           reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    COLON           reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    RBRACKET        reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    DOWN            reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    BY              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    TO              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    ELSE            reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    ELSIF           reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    FI              reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    WHILE           reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)
    LBRACKET        reduce using rule 75 (value_array_element -> array_primitive_value LBRACKET expression_list RBRACKET .)


state 269

    (84) then_expression -> THEN expression .

    ELSE            reduce using rule 84 (then_expression -> THEN expression .)
    ELSIF           reduce using rule 84 (then_expression -> THEN expression .)


state 270

    (82) conditional_expression -> IF boolean_expression then_expression elsif_expression . else_expression FI
    (87) elsif_expression -> elsif_expression . ELSIF boolean_expression then_expression
    (85) else_expression -> . ELSE expression

    ELSIF           shift and go to state 300
    ELSE            shift and go to state 273

    else_expression                shift and go to state 299

state 271

    (81) conditional_expression -> IF boolean_expression then_expression else_expression . FI

    FI              shift and go to state 301


state 272

    (86) elsif_expression -> ELSIF . boolean_expression then_expression
    (83) boolean_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    boolean_expression             shift and go to state 302
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 98
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 273

    (85) else_expression -> ELSE . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 303
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 274

    (14) initialization -> ASSIGN expression .

    SEMI            reduce using rule 14 (initialization -> ASSIGN expression .)
    COMMA           reduce using rule 14 (initialization -> ASSIGN expression .)


state 275

    (136) else_clause -> ELSE action_statement_list .
    (116) action_statement_list -> action_statement_list . action_statement
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    FI              reduce using rule 136 (else_clause -> ELSE action_statement_list .)
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    result_action                  shift and go to state 2
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    location                       shift and go to state 12
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    builtin_call                   shift and go to state 19
    if_action                      shift and go to state 13
    label_id                       shift and go to state 67
    action_statement               shift and go to state 153
    call_action                    shift and go to state 16
    return_action                  shift and go to state 39
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38

state 276

    (132) if_action -> IF boolean_expression then_clause else_clause FI .

    SEMI            reduce using rule 132 (if_action -> IF boolean_expression then_clause else_clause FI .)


state 277

    (39) discrete_range_mode -> discrete_mode_name LPAREN . literal_range RPAREN
    (161) procedure_call -> discrete_mode_name LPAREN . parameter_list RPAREN
    (162) procedure_call -> discrete_mode_name LPAREN . RPAREN
    (43) literal_range -> . lower_bound COLON upper_bound
    (163) parameter_list -> . expression
    (164) parameter_list -> . parameter_list COMMA expression
    (61) lower_bound -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    RPAREN          shift and go to state 128
    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 304
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    literal_range                  shift and go to state 247
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    lower_bound                    shift and go to state 244
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    parameter_list                 shift and go to state 129
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 278

    (43) literal_range -> lower_bound COLON . upper_bound
    (62) upper_bound -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    upper_bound                    shift and go to state 305
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 254
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 279

    (50) array_mode -> ARRAY LBRACKET index_mode COMMA . index_mode_list RBRACKET element_mode
    (51) index_mode_list -> . index_mode
    (52) index_mode_list -> . index_mode_list COMMA index_mode
    (53) index_mode -> . discrete_mode
    (54) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (61) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (17) identifier -> . ID
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    ID              shift and go to state 7
    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    discrete_range_mode            shift and go to state 104
    operand1                       shift and go to state 84
    expression                     shift and go to state 240
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    builtin_name                   shift and go to state 9
    discrete_mode_name             shift and go to state 241
    conditional_expression         shift and go to state 72
    literal_range                  shift and go to state 242
    boolean_mode                   shift and go to state 108
    call_action                    shift and go to state 79
    index_mode                     shift and go to state 306
    index_mode_list                shift and go to state 307
    operand                        shift and go to state 74
    identifier                     shift and go to state 243
    value_array_slice              shift and go to state 77
    lower_bound                    shift and go to state 244
    location                       shift and go to state 90
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    discrete_mode                  shift and go to state 246
    integer_mode                   shift and go to state 121
    primitive_value                shift and go to state 78
    character_mode                 shift and go to state 118
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 280

    (49) array_mode -> ARRAY LBRACKET index_mode RBRACKET . element_mode
    (55) element_mode -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 114
    ID              shift and go to state 7
    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    CHARS           shift and go to state 119
    ARRAY           shift and go to state 106

    discrete_range_mode            shift and go to state 104
    element_mode                   shift and go to state 308
    composite_mode                 shift and go to state 120
    discrete_mode                  shift and go to state 124
    discrete_mode_name             shift and go to state 107
    integer_mode                   shift and go to state 121
    boolean_mode                   shift and go to state 108
    character_mode                 shift and go to state 118
    array_mode                     shift and go to state 109
    reference_mode                 shift and go to state 111
    string_mode                    shift and go to state 123
    mode                           shift and go to state 309
    mode_name                      shift and go to state 116
    identifier                     shift and go to state 117

state 281

    (39) discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    LOC             reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 39 (discrete_range_mode -> discrete_mode_name LPAREN literal_range RPAREN .)


state 282

    (47) string_mode -> CHARS LBRACKET string_length RBRACKET .

    LOC             reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    RPAREN          reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    COMMA           reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    ASSIGN          reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)
    SEMI            reduce using rule 47 (string_mode -> CHARS LBRACKET string_length RBRACKET .)


state 283

    (40) discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .

    LPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    ASSIGN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    SEMI            reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    COMMA           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    LOC             reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RPAREN          reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    WHILE           reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)
    RBRACKET        reduce using rule 40 (discrete_range_mode -> discrete_mode LPAREN literal_range RPAREN .)


state 284

    (57) location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .

    LBRACKET        reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ARROW           reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    PLUS            reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MINUS           reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TIMES           reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DIVIDE          reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    MOD             reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    CONCAT          reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ASSIGN          reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    AND             reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    OR              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    EQ              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NEQ             reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GT              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    GE              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LT              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    LE              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    NOT             reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    IN              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    DOWN            reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    BY              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    TO              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    SEMI            reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    THEN            reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RPAREN          reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COMMA           reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    COLON           reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    RBRACKET        reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSE            reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    ELSIF           reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    FI              reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)
    WHILE           reduce using rule 57 (location -> location LBRACKET lower_bound COLON upper_bound RBRACKET .)


state 285

    (188) parameter_spec -> mode . LOC
    (189) parameter_spec -> mode .

    LOC             shift and go to state 310
    RPAREN          reduce using rule 189 (parameter_spec -> mode .)
    COMMA           reduce using rule 189 (parameter_spec -> mode .)


state 286

    (186) formal_parameter -> identifier_list parameter_spec .

    RPAREN          reduce using rule 186 (formal_parameter -> identifier_list parameter_spec .)
    COMMA           reduce using rule 186 (formal_parameter -> identifier_list parameter_spec .)


state 287

    (183) procedure_definition -> PROC LPAREN RPAREN SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    statement_list                 shift and go to state 311
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 21
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 288

    (187) result_spec -> RETURNS . LPAREN parameter_spec RPAREN

    LPAREN          shift and go to state 312


state 289

    (182) procedure_definition -> PROC LPAREN RPAREN result_spec . SEMI statement_list END

    SEMI            shift and go to state 313


state 290

    (185) formal_parameter_list -> formal_parameter_list COMMA . formal_parameter
    (186) formal_parameter -> . identifier_list parameter_spec
    (15) identifier_list -> . identifier
    (16) identifier_list -> . identifier_list COMMA identifier
    (17) identifier -> . ID

    ID              shift and go to state 7

    formal_parameter               shift and go to state 314
    identifier_list                shift and go to state 256
    identifier                     shift and go to state 44

state 291

    (180) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . result_spec SEMI statement_list END
    (181) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN . SEMI statement_list END
    (187) result_spec -> . RETURNS LPAREN parameter_spec RPAREN

    SEMI            shift and go to state 315
    RETURNS         shift and go to state 288

    result_spec                    shift and go to state 316

state 292

    (156) range_enumeration -> loop_counter DOWN IN discrete_mode .
    (40) discrete_range_mode -> discrete_mode . LPAREN literal_range RPAREN

    WHILE           reduce using rule 156 (range_enumeration -> loop_counter DOWN IN discrete_mode .)
    SEMI            reduce using rule 156 (range_enumeration -> loop_counter DOWN IN discrete_mode .)
    LPAREN          shift and go to state 194


state 293

    (153) step_value -> BY . ICONST

    ICONST          shift and go to state 317


state 294

    (148) step_enumeration -> loop_counter ASSIGN start_value DOWN . end_value
    (154) end_value -> . TO discrete_expression

    TO              shift and go to state 296

    end_value                      shift and go to state 318

state 295

    (150) step_enumeration -> loop_counter ASSIGN start_value end_value .

    WHILE           reduce using rule 150 (step_enumeration -> loop_counter ASSIGN start_value end_value .)
    SEMI            reduce using rule 150 (step_enumeration -> loop_counter ASSIGN start_value end_value .)


state 296

    (154) end_value -> TO . discrete_expression
    (155) discrete_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    expression                     shift and go to state 264
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    discrete_expression            shift and go to state 319
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 297

    (147) step_enumeration -> loop_counter ASSIGN start_value step_value . DOWN end_value
    (149) step_enumeration -> loop_counter ASSIGN start_value step_value . end_value
    (154) end_value -> . TO discrete_expression

    DOWN            shift and go to state 320
    TO              shift and go to state 296

    end_value                      shift and go to state 321

state 298

    (76) value_array_slice -> array_primitive_value LBRACKET expression COLON expression . RBRACKET

    RBRACKET        shift and go to state 322


state 299

    (82) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression . FI

    FI              shift and go to state 323


state 300

    (87) elsif_expression -> elsif_expression ELSIF . boolean_expression then_expression
    (83) boolean_expression -> . expression
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (17) identifier -> . ID
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ID              shift and go to state 7
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    operand1                       shift and go to state 84
    boolean_expression             shift and go to state 324
    parenthesized_expression       shift and go to state 85
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    discrete_mode_name             shift and go to state 4
    conditional_expression         shift and go to state 72
    builtin_name                   shift and go to state 9
    location                       shift and go to state 90
    operand                        shift and go to state 74
    identifier                     shift and go to state 80
    value_array_slice              shift and go to state 77
    array_primitive_value          shift and go to state 92
    expression                     shift and go to state 98
    builtin_call                   shift and go to state 19
    primitive_value                shift and go to state 78
    call_action                    shift and go to state 79
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 301

    (81) conditional_expression -> IF boolean_expression then_expression else_expression FI .

    COLON           reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    SEMI            reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    COMMA           reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSE            reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    ELSIF           reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    THEN            reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RBRACKET        reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    RPAREN          reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    WHILE           reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    DOWN            reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    BY              reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    TO              reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)
    FI              reduce using rule 81 (conditional_expression -> IF boolean_expression then_expression else_expression FI .)


state 302

    (86) elsif_expression -> ELSIF boolean_expression . then_expression
    (84) then_expression -> . THEN expression

    THEN            shift and go to state 229

    then_expression                shift and go to state 325

state 303

    (85) else_expression -> ELSE expression .

    FI              reduce using rule 85 (else_expression -> ELSE expression .)


state 304

    (163) parameter_list -> expression .
    (61) lower_bound -> expression .

    RPAREN          reduce using rule 163 (parameter_list -> expression .)
    COMMA           reduce using rule 163 (parameter_list -> expression .)
    COLON           reduce using rule 61 (lower_bound -> expression .)


state 305

    (43) literal_range -> lower_bound COLON upper_bound .

    RBRACKET        reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    COMMA           reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)
    RPAREN          reduce using rule 43 (literal_range -> lower_bound COLON upper_bound .)


state 306

    (51) index_mode_list -> index_mode .

    RBRACKET        reduce using rule 51 (index_mode_list -> index_mode .)
    COMMA           reduce using rule 51 (index_mode_list -> index_mode .)


state 307

    (50) array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list . RBRACKET element_mode
    (52) index_mode_list -> index_mode_list . COMMA index_mode

    RBRACKET        shift and go to state 327
    COMMA           shift and go to state 326


state 308

    (49) array_mode -> ARRAY LBRACKET index_mode RBRACKET element_mode .

    ASSIGN          reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode RBRACKET element_mode .)
    SEMI            reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode RBRACKET element_mode .)
    COMMA           reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode RBRACKET element_mode .)
    LOC             reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode RBRACKET element_mode .)
    RPAREN          reduce using rule 49 (array_mode -> ARRAY LBRACKET index_mode RBRACKET element_mode .)


state 309

    (55) element_mode -> mode .

    ASSIGN          reduce using rule 55 (element_mode -> mode .)
    SEMI            reduce using rule 55 (element_mode -> mode .)
    COMMA           reduce using rule 55 (element_mode -> mode .)
    LOC             reduce using rule 55 (element_mode -> mode .)
    RPAREN          reduce using rule 55 (element_mode -> mode .)


state 310

    (188) parameter_spec -> mode LOC .

    RPAREN          reduce using rule 188 (parameter_spec -> mode LOC .)
    COMMA           reduce using rule 188 (parameter_spec -> mode LOC .)


state 311

    (183) procedure_definition -> PROC LPAREN RPAREN SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    END             shift and go to state 328
    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 47
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 312

    (187) result_spec -> RETURNS LPAREN . parameter_spec RPAREN
    (188) parameter_spec -> . mode LOC
    (189) parameter_spec -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 114
    ID              shift and go to state 7
    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    CHARS           shift and go to state 119
    ARRAY           shift and go to state 106

    discrete_range_mode            shift and go to state 104
    composite_mode                 shift and go to state 120
    discrete_mode                  shift and go to state 124
    discrete_mode_name             shift and go to state 107
    parameter_spec                 shift and go to state 329
    integer_mode                   shift and go to state 121
    boolean_mode                   shift and go to state 108
    character_mode                 shift and go to state 118
    array_mode                     shift and go to state 109
    reference_mode                 shift and go to state 111
    string_mode                    shift and go to state 123
    mode                           shift and go to state 285
    mode_name                      shift and go to state 116
    identifier                     shift and go to state 117

state 313

    (182) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    statement_list                 shift and go to state 330
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 21
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 314

    (185) formal_parameter_list -> formal_parameter_list COMMA formal_parameter .

    RPAREN          reduce using rule 185 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)
    COMMA           reduce using rule 185 (formal_parameter_list -> formal_parameter_list COMMA formal_parameter .)


state 315

    (181) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    statement_list                 shift and go to state 331
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 21
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 316

    (180) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec . SEMI statement_list END

    SEMI            shift and go to state 332


state 317

    (153) step_value -> BY ICONST .

    DOWN            reduce using rule 153 (step_value -> BY ICONST .)
    TO              reduce using rule 153 (step_value -> BY ICONST .)


state 318

    (148) step_enumeration -> loop_counter ASSIGN start_value DOWN end_value .

    WHILE           reduce using rule 148 (step_enumeration -> loop_counter ASSIGN start_value DOWN end_value .)
    SEMI            reduce using rule 148 (step_enumeration -> loop_counter ASSIGN start_value DOWN end_value .)


state 319

    (154) end_value -> TO discrete_expression .

    WHILE           reduce using rule 154 (end_value -> TO discrete_expression .)
    SEMI            reduce using rule 154 (end_value -> TO discrete_expression .)


state 320

    (147) step_enumeration -> loop_counter ASSIGN start_value step_value DOWN . end_value
    (154) end_value -> . TO discrete_expression

    TO              shift and go to state 296

    end_value                      shift and go to state 333

state 321

    (149) step_enumeration -> loop_counter ASSIGN start_value step_value end_value .

    WHILE           reduce using rule 149 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)
    SEMI            reduce using rule 149 (step_enumeration -> loop_counter ASSIGN start_value step_value end_value .)


state 322

    (76) value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .

    AND             reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    OR              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    EQ              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    NEQ             reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    GT              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    GE              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LT              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LE              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    PLUS            reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    MINUS           reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    TIMES           reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    DIVIDE          reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    MOD             reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    NOT             reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    IN              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    CONCAT          reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    SEMI            reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    THEN            reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    RPAREN          reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    COMMA           reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    COLON           reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    RBRACKET        reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    DOWN            reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    BY              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    TO              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSE            reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    ELSIF           reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    FI              reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    WHILE           reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)
    LBRACKET        reduce using rule 76 (value_array_slice -> array_primitive_value LBRACKET expression COLON expression RBRACKET .)


state 323

    (82) conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .

    COLON           reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    SEMI            reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    COMMA           reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSE            reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    ELSIF           reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    THEN            reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RBRACKET        reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    RPAREN          reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    WHILE           reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    DOWN            reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    BY              reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    TO              reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)
    FI              reduce using rule 82 (conditional_expression -> IF boolean_expression then_expression elsif_expression else_expression FI .)


state 324

    (87) elsif_expression -> elsif_expression ELSIF boolean_expression . then_expression
    (84) then_expression -> . THEN expression

    THEN            shift and go to state 229

    then_expression                shift and go to state 334

state 325

    (86) elsif_expression -> ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 86 (elsif_expression -> ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 86 (elsif_expression -> ELSIF boolean_expression then_expression .)


state 326

    (52) index_mode_list -> index_mode_list COMMA . index_mode
    (53) index_mode -> . discrete_mode
    (54) index_mode -> . literal_range
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (43) literal_range -> . lower_bound COLON upper_bound
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (61) lower_bound -> . expression
    (42) discrete_mode_name -> . identifier
    (79) expression -> . binop
    (80) expression -> . conditional_expression
    (17) identifier -> . ID
    (88) binop -> . operand
    (89) binop -> . binop AND binop
    (90) binop -> . binop OR binop
    (91) binop -> . binop EQ binop
    (92) binop -> . binop NEQ binop
    (93) binop -> . binop GT binop
    (94) binop -> . binop GE binop
    (95) binop -> . binop LT binop
    (96) binop -> . binop LE binop
    (97) binop -> . binop PLUS binop
    (98) binop -> . binop MINUS binop
    (99) binop -> . binop TIMES binop
    (100) binop -> . binop DIVIDE binop
    (101) binop -> . binop MOD binop
    (102) binop -> . binop NOT binop
    (103) binop -> . binop IN binop
    (104) binop -> . binop CONCAT binop
    (81) conditional_expression -> . IF boolean_expression then_expression else_expression FI
    (82) conditional_expression -> . IF boolean_expression then_expression elsif_expression else_expression FI
    (105) operand -> . MINUS operand1
    (106) operand -> . NOT operand1
    (107) operand -> . operand1
    (108) operand1 -> . location
    (109) operand1 -> . referenced_location
    (110) operand1 -> . primitive_value
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (111) referenced_location -> . ARROW location
    (65) primitive_value -> . literal
    (66) primitive_value -> . value_array_element
    (67) primitive_value -> . value_array_slice
    (68) primitive_value -> . parenthesized_expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (69) literal -> . ICONST
    (70) literal -> . FALSE
    (71) literal -> . TRUE
    (72) literal -> . CCONST
    (73) literal -> . NULL
    (74) literal -> . SCONST
    (75) value_array_element -> . array_primitive_value LBRACKET expression_list RBRACKET
    (76) value_array_slice -> . array_primitive_value LBRACKET expression COLON expression RBRACKET
    (78) parenthesized_expression -> . LPAREN expression RPAREN
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (77) array_primitive_value -> . primitive_value
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    ID              shift and go to state 7
    IF              shift and go to state 93
    MINUS           shift and go to state 75
    NOT             shift and go to state 81
    ARROW           shift and go to state 69
    ICONST          shift and go to state 91
    FALSE           shift and go to state 87
    TRUE            shift and go to state 89
    CCONST          shift and go to state 73
    NULL            shift and go to state 76
    SCONST          shift and go to state 88
    LPAREN          shift and go to state 71
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    discrete_range_mode            shift and go to state 104
    operand1                       shift and go to state 84
    expression                     shift and go to state 240
    value_array_element            shift and go to state 86
    procedure_call                 shift and go to state 22
    builtin_name                   shift and go to state 9
    discrete_mode_name             shift and go to state 241
    conditional_expression         shift and go to state 72
    literal_range                  shift and go to state 242
    boolean_mode                   shift and go to state 108
    call_action                    shift and go to state 79
    index_mode                     shift and go to state 335
    operand                        shift and go to state 74
    identifier                     shift and go to state 243
    value_array_slice              shift and go to state 77
    lower_bound                    shift and go to state 244
    location                       shift and go to state 90
    array_primitive_value          shift and go to state 92
    parenthesized_expression       shift and go to state 85
    builtin_call                   shift and go to state 19
    discrete_mode                  shift and go to state 246
    integer_mode                   shift and go to state 121
    primitive_value                shift and go to state 78
    character_mode                 shift and go to state 118
    referenced_location            shift and go to state 94
    binop                          shift and go to state 82
    literal                        shift and go to state 83

state 327

    (50) array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET . element_mode
    (55) element_mode -> . mode
    (28) mode -> . mode_name
    (29) mode -> . discrete_mode
    (30) mode -> . reference_mode
    (31) mode -> . composite_mode
    (41) mode_name -> . identifier
    (32) discrete_mode -> . integer_mode
    (33) discrete_mode -> . boolean_mode
    (34) discrete_mode -> . character_mode
    (35) discrete_mode -> . discrete_range_mode
    (44) reference_mode -> . REF mode
    (45) composite_mode -> . string_mode
    (46) composite_mode -> . array_mode
    (17) identifier -> . ID
    (36) integer_mode -> . INT
    (37) boolean_mode -> . BOOL
    (38) character_mode -> . CHAR
    (39) discrete_range_mode -> . discrete_mode_name LPAREN literal_range RPAREN
    (40) discrete_range_mode -> . discrete_mode LPAREN literal_range RPAREN
    (47) string_mode -> . CHARS LBRACKET string_length RBRACKET
    (49) array_mode -> . ARRAY LBRACKET index_mode RBRACKET element_mode
    (50) array_mode -> . ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode
    (42) discrete_mode_name -> . identifier

    REF             shift and go to state 114
    ID              shift and go to state 7
    INT             shift and go to state 113
    BOOL            shift and go to state 112
    CHAR            shift and go to state 110
    CHARS           shift and go to state 119
    ARRAY           shift and go to state 106

    discrete_range_mode            shift and go to state 104
    element_mode                   shift and go to state 336
    string_mode                    shift and go to state 123
    composite_mode                 shift and go to state 120
    mode                           shift and go to state 309
    discrete_mode_name             shift and go to state 107
    integer_mode                   shift and go to state 121
    boolean_mode                   shift and go to state 108
    character_mode                 shift and go to state 118
    array_mode                     shift and go to state 109
    reference_mode                 shift and go to state 111
    discrete_mode                  shift and go to state 124
    mode_name                      shift and go to state 116
    identifier                     shift and go to state 117

state 328

    (183) procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END .

    SEMI            reduce using rule 183 (procedure_definition -> PROC LPAREN RPAREN SEMI statement_list END .)


state 329

    (187) result_spec -> RETURNS LPAREN parameter_spec . RPAREN

    RPAREN          shift and go to state 337


state 330

    (182) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    END             shift and go to state 338
    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 47
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 331

    (181) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    END             shift and go to state 339
    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 47
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 332

    (180) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    statement_list                 shift and go to state 340
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 21
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 333

    (147) step_enumeration -> loop_counter ASSIGN start_value step_value DOWN end_value .

    WHILE           reduce using rule 147 (step_enumeration -> loop_counter ASSIGN start_value step_value DOWN end_value .)
    SEMI            reduce using rule 147 (step_enumeration -> loop_counter ASSIGN start_value step_value DOWN end_value .)


state 334

    (87) elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .

    ELSIF           reduce using rule 87 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)
    ELSE            reduce using rule 87 (elsif_expression -> elsif_expression ELSIF boolean_expression then_expression .)


state 335

    (52) index_mode_list -> index_mode_list COMMA index_mode .

    RBRACKET        reduce using rule 52 (index_mode_list -> index_mode_list COMMA index_mode .)
    COMMA           reduce using rule 52 (index_mode_list -> index_mode_list COMMA index_mode .)


state 336

    (50) array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode .

    ASSIGN          reduce using rule 50 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode .)
    SEMI            reduce using rule 50 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode .)
    COMMA           reduce using rule 50 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode .)
    LOC             reduce using rule 50 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode .)
    RPAREN          reduce using rule 50 (array_mode -> ARRAY LBRACKET index_mode COMMA index_mode_list RBRACKET element_mode .)


state 337

    (187) result_spec -> RETURNS LPAREN parameter_spec RPAREN .

    SEMI            reduce using rule 187 (result_spec -> RETURNS LPAREN parameter_spec RPAREN .)


state 338

    (182) procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END .

    SEMI            reduce using rule 182 (procedure_definition -> PROC LPAREN RPAREN result_spec SEMI statement_list END .)


state 339

    (181) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END .

    SEMI            reduce using rule 181 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN SEMI statement_list END .)


state 340

    (180) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list . END
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . synonym_statement
    (6) statement -> . newmode_statement
    (7) statement -> . procedure_statement
    (8) statement -> . action_statement
    (9) declaration_statement -> . DCL declaration_list SEMI
    (18) synonym_statement -> . SYN synonym_list SEMI
    (24) newmode_statement -> . TYPE newmode_list SEMI
    (179) procedure_statement -> . label_id COLON procedure_definition SEMI
    (112) action_statement -> . label_id COLON action SEMI
    (113) action_statement -> . action SEMI
    (114) label_id -> . identifier
    (117) action -> . if_action
    (118) action -> . do_action
    (119) action -> . assignment_action
    (120) action -> . call_action
    (121) action -> . exit_action
    (122) action -> . return_action
    (123) action -> . result_action
    (17) identifier -> . ID
    (132) if_action -> . IF boolean_expression then_clause else_clause FI
    (133) if_action -> . IF boolean_expression then_clause FI
    (138) do_action -> . DO control_part SEMI action_statement_list OD
    (139) do_action -> . DO control_part SEMI OD
    (140) do_action -> . DO action_statement_list OD
    (124) assignment_action -> . location assigning_operator expression
    (159) call_action -> . procedure_call
    (160) call_action -> . builtin_call
    (165) exit_action -> . EXIT identifier
    (166) return_action -> . RETURN expression
    (167) return_action -> . RETURN
    (168) result_action -> . RESULT expression
    (56) location -> . identifier
    (57) location -> . location LBRACKET lower_bound COLON upper_bound RBRACKET
    (58) location -> . location ARROW
    (59) location -> . location LBRACKET expression_list RBRACKET
    (60) location -> . call_action
    (161) procedure_call -> . discrete_mode_name LPAREN parameter_list RPAREN
    (162) procedure_call -> . discrete_mode_name LPAREN RPAREN
    (169) builtin_call -> . builtin_name LPAREN parameter_list RPAREN
    (170) builtin_call -> . builtin_name LPAREN RPAREN
    (42) discrete_mode_name -> . identifier
    (171) builtin_name -> . NUM
    (172) builtin_name -> . PRED
    (173) builtin_name -> . SUCC
    (174) builtin_name -> . UPPER
    (175) builtin_name -> . LOWER
    (176) builtin_name -> . LENGTH
    (177) builtin_name -> . READ
    (178) builtin_name -> . PRINT

    END             shift and go to state 341
    DCL             shift and go to state 29
    SYN             shift and go to state 3
    TYPE            shift and go to state 34
    ID              shift and go to state 7
    IF              shift and go to state 33
    DO              shift and go to state 26
    EXIT            shift and go to state 1
    RETURN          shift and go to state 36
    RESULT          shift and go to state 28
    NUM             shift and go to state 27
    PRED            shift and go to state 8
    SUCC            shift and go to state 17
    UPPER           shift and go to state 15
    LOWER           shift and go to state 40
    LENGTH          shift and go to state 24
    READ            shift and go to state 31
    PRINT           shift and go to state 35

    if_action                      shift and go to state 13
    procedure_call                 shift and go to state 22
    result_action                  shift and go to state 2
    discrete_mode_name             shift and go to state 4
    location                       shift and go to state 12
    synonym_statement              shift and go to state 23
    exit_action                    shift and go to state 6
    builtin_name                   shift and go to state 9
    statement                      shift and go to state 47
    identifier                     shift and go to state 10
    action                         shift and go to state 11
    procedure_statement            shift and go to state 30
    newmode_statement              shift and go to state 14
    label_id                       shift and go to state 25
    action_statement               shift and go to state 32
    call_action                    shift and go to state 16
    declaration_statement          shift and go to state 18
    builtin_call                   shift and go to state 19
    assignment_action              shift and go to state 37
    do_action                      shift and go to state 38
    return_action                  shift and go to state 39

state 341

    (180) procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END .

    SEMI            reduce using rule 180 (procedure_definition -> PROC LPAREN formal_parameter_list RPAREN result_spec SEMI statement_list END .)

