Program: 
  StmtList: 
    Type: 
      ModeDef: =
        ID: vector (at line: 1)
        Mode: 
          ArrayMode: 
            Range: 
              Expr: 
                Constant: 1, int (at line: 1)
              Expr: 
                Constant: 10, int (at line: 1)
            Mode: 
              DiscreteMode: int (at line: 1)
    DclStmt: 
      Decl: 
        ID: v (at line: 2)
        Mode: 
          ID: vector (at line: 2)
      Decl: 
        ID: i (at line: 2)
        Mode: 
          DiscreteMode: int (at line: 2)
    ProcStmt: 
      ID: sum (at line: 4)
      ProcDef:  (at line: 4)
        FormalParam: 
          ID: v (at line: 4)
          ParamSpec: None
            Mode: 
              ID: vector (at line: 4)
        Returns: 
          ParamSpec: None
            Mode: 
              DiscreteMode: int (at line: 4)
        StmtList: 
          DclStmt: 
            Decl: 
              ID: s (at line: 5)
              ID: i (at line: 5)
              Mode: 
                DiscreteMode: int (at line: 5)
          ActionStmt: 
            Assignment: =
              ID: i (at line: 6)
              Expr: 
                Constant: 1, int (at line: 6)
          ActionStmt: 
            Assignment: =
              ID: s (at line: 7)
              Expr: 
                Constant: 0, int (at line: 7)
          ActionStmt: 
            DoAction: 
              Control: 
                WhileControl: 
                  BoolExpr: 
                    Expr: 
                      Binop: < (at line: 9)
                        ID: i (at line: 9)
                        Constant: 10, int (at line: 9)
              ActionStmt: 
                Assignment: =
                  ID: s (at line: 10)
                  Expr: 
                    Binop: + (at line: 10)
                      ID: s (at line: 10)
                      Array: 
                        ID: v (at line: 10)
                        Expr: 
                          ID: i (at line: 10)
              ActionStmt: 
                Assignment: ['+', '=']
                  ID: i (at line: 11)
                  Expr: 
                    Constant: 1, int (at line: 11)
          ActionStmt: 
            Return: 
              Expr: 
                ID: s (at line: 13)
    ActionStmt: 
      DoAction: 
        Control: 
          ForControl: 
            StepEnum: =
              ID: i (at line: 17)
              Expr: 
                Constant: 1, int (at line: 17)
              Expr: 
                Constant: 10, int (at line: 17)
        ActionStmt: 
          Call: 
            Func: read
            Param: 
              Expr: 
                Array: 
                  ID: v (at line: 18)
                  Expr: 
                    ID: i (at line: 18)
    ActionStmt: 
      Call: 
        Func: print
        Param: 
          Expr: 
            ProcCall: 
              ID: sum (at line: 20)
              Param: 
                Expr: 
                  ID: v (at line: 20)
<lyaparser.ID object at 0x103654dd8>
<lyaparser.ID object at 0x103654d68>
<lyasem.ExprType object at 0x10140ad68>
<lyasem.ExprType object at 0x10140ad68>
<lyaparser.ID object at 0x10154a668>
<lyaparser.ID object at 0x10154a748>
<lyasem.ExprType object at 0x10140ad68>
false
<lyasem.ExprType object at 0x10140ad68>
true
{0: None, '_ret': None}
Program {'i': {'node': <lyaparser.Decl object at 0x103654550>, 'scope': 0, 'number': 10, 'type': None}, 'sum': {'node': <lyaparser.ProcStmt object at 0x103654828>, 'scope': 1, 'number': None, 'type': None}, 'char': <lyasem.ExprType object at 0x10140add8>, 'bool': <lyasem.ExprType object at 0x1014605f8>, 'string': <lyasem.ExprType object at 0x10140ae48>, 'vector': {'node': <lyaparser.ModeDef object at 0x103654588>, 'scope': 0, 'number': None, 'type': None}, 'int': <lyasem.ExprType object at 0x10140ad68>, 'v': {'node': <lyaparser.Decl object at 0x103654630>, 'scope': 0, 'number': 0, 'type': 'array'}}
[
    ('stp',),
    ('alc', 11),
    ('jmp', 3),
    ('lbl', 1),
    ('enf', 1),
    ('alc', 2),
    ('ldc', 1),
    ('stv', 1, 1),
    ('ldc', 0),
    ('stv', 1, 0),
    ('lbl', 4),
    ('ldv', 1, 1),
    ('ldc', 10),
    ('les',),
    ('jof', 5),
    ('ldv', 1, 0),
    ('ldv', 1, -3),
    ('ldv', 1, 1),
    ('ldc', 1),
    ('sub',),
    ('idx', 1),
    ('grc',),
    ('add',),
    ('stv', 1, 0),
    ('ldc', 1),
    ('ldv', 1, 1),
    ('add',),
    ('stv', 1, 1),
    ('jmp', 4),
    ('lbl', 5),
    ('ldv', 1, 0),
    ('stv', 1, -4),
    ('jmp', 2),
    ('lbl', 2),
    ('dlc', 2),
    ('ret', 1, 1),
    ('lbl', 3),
    ('ldc', 1),
    ('stv', 0, 10),
    ('lbl', 6),
    ('ldr', 0, 0),
    ('ldv', 0, 10),
    ('ldc', 1),
    ('sub',),
    ('idx', 1),
    ('rdv',),
    ('smv', 1),
    ('ldv', 0, 10),
    ('ldc', 1),
    ('add',),
    ('stv', 0, 10),
    ('ldv', 0, 10),
    ('ldc', 10),
    ('leq',),
    ('jof', 7),
    ('jmp', 6),
    ('lbl', 7),
    ('alc', 1),
    ('ldr', 0, 0),
    ('cfu', 1),
    ('prv',),
    ('dlc', 11),
    ('end',),
]

